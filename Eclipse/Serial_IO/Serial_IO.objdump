
Serial_IO.elf:     file format elf32-littlenios2
Serial_IO.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005aec memsz 0x00005aec flags r-x
    LOAD off    0x00006b0c vaddr 0x00015b0c paddr 0x00016544 align 2**12
         filesz 0x00000a38 memsz 0x00000a38 flags rw-
    LOAD off    0x00007f7c vaddr 0x00016f7c paddr 0x00016f7c align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000057d0  000101bc  000101bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000180  0001598c  0001598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a38  00015b0c  00016544  00006b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00016f7c  00016f7c  00007f7c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000170cc  000170cc  00007544  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007544  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a90  00000000  00000000  00007568  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001985f  00000000  00000000  00007ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006835  00000000  00000000  00021857  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000070ae  00000000  00000000  0002808c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001718  00000000  00000000  0002f13c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022bc  00000000  00000000  00030854  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004e11  00000000  00000000  00032b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00037924  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006d8  00000000  00000000  00037948  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003a5a2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003a5a5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003a5a8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003a5a9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003a5aa  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003a5ae  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003a5b2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003a5b6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003a5bf  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003a5c8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0003a5d1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  0003a5dd  2**0
                  CONTENTS, READONLY
 29 .jdi          0000503a  00000000  00000000  0003a600  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000856da  00000000  00000000  0003f63a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101bc l    d  .text	00000000 .text
0001598c l    d  .rodata	00000000 .rodata
00015b0c l    d  .rwdata	00000000 .rwdata
00016f7c l    d  .bss	00000000 .bss
000170cc l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Serial_IO_bsp//obj/HAL/src/crt0.o
000101f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00010908 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010adc l     F .text	00000038 alt_dev_reg
00015b0c l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010dcc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00010ec8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001100c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011038 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001142c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011584 l     F .text	00000050 alt_get_errno
000115d4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00015ce0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00013ed4 l     F .text	00000008 __fp_lock
00013edc l     F .text	00000008 __fp_unlock
00013ef0 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
00014afc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00015140 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000152c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000153d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
000154cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00015638 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016540 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001583c l     F .text	00000050 alt_get_errno
00015034 g     F .text	00000054 _isatty_r
000109ec g     F .text	00000068 alt_main
00016fcc g     O .bss	00000100 alt_irq
00015088 g     F .text	0000005c _lseek_r
00016544 g       *ABS*	00000000 __flash_rwdata_start
000170cc g       *ABS*	00000000 __alt_heap_start
00014dc4 g     F .text	0000005c __sseek
00014234 g     F .text	00000010 __sinit
00013804 g     F .text	00000138 __swbuf_r
0001408c g     F .text	00000078 __sfmoreglue
00015618 g     F .text	00000020 __malloc_unlock
00012e60 g     F .text	0000015c memmove
0001421c g     F .text	00000018 _cleanup
00010a98 g     F .text	00000044 alt_putstr
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00014fdc g     F .text	00000058 _fstat_r
00016f94 g     O .bss	00000004 errno
00013704 g     F .text	00000014 __srget
00014d40 g     F .text	00000008 __seofread
00016f80 g     O .bss	00000004 alt_argv
0001e50c g       *ABS*	00000000 _gp
00015b60 g     O .rwdata	00000180 alt_fd_list
00012324 g     F .text	00000070 _getc_r
00012394 g     F .text	00000088 getc
00011a64 g     F .text	00000090 alt_find_dev
00012d28 g     F .text	00000138 memcpy
00013ee4 g     F .text	0000000c _cleanup_r
0001150c g     F .text	00000078 alt_io_redirect
00010c54 g     F .text	000000e4 altera_avalon_jtag_uart_read
0001525c g     F .text	00000008 .hidden __udivsi3
00015420 g     F .text	000000ac isatty
00011cdc g     F .text	0000008c alt_icache_flush
00016fa0 g     O .bss	00000004 __malloc_top_pad
00011e58 g     F .text	000004cc __sfvwrite_r
00013718 g     F .text	00000054 _sbrk_r
000150e4 g     F .text	0000005c _read_r
0001651c g     O .rwdata	00000004 alt_max_fd
00014ed8 g     F .text	000000f0 _fclose_r
00013ea4 g     F .text	00000030 fflush
00016f9c g     O .bss	00000004 __malloc_max_sbrked_mem
00010738 g     F .text	00000044 displayString
0001551c g     F .text	000000dc lseek
00016530 g     O .rwdata	00000004 _global_impure_ptr
00013128 g     F .text	00000568 _realloc_r
000170cc g       *ABS*	00000000 __bss_end
0001133c g     F .text	000000f0 alt_iic_isr_register
000108cc g     F .text	0000003c alt_getchar
00011940 g     F .text	00000104 alt_tick
00014254 g     F .text	00000018 __fp_lock_all
000112f0 g     F .text	0000004c alt_ic_irq_enabled
000118a8 g     F .text	00000098 alt_alarm_stop
00016f88 g     O .bss	00000004 alt_irq_active
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
000100ec g     F .exceptions	000000d0 alt_irq_handler
00015b38 g     O .rwdata	00000028 alt_dev_null
0001077c g     F .text	00000094 generateParity
00010ff0 g     F .text	0000001c alt_dcache_flush_all
00016544 g       *ABS*	00000000 __ram_rwdata_end
00016514 g     O .rwdata	00000008 alt_dev_list
0001588c g     F .text	00000100 write
00012fbc g     F .text	000000a0 _putc_r
00015b0c g       *ABS*	00000000 __ram_rodata_end
00015318 g     F .text	000000b8 fstat
00015264 g     F .text	00000008 .hidden __umodsi3
000170cc g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010e40 g     F .text	00000088 alt_avalon_timer_sc_init
00010d38 g     F .text	00000094 altera_avalon_jtag_uart_write
00014244 g     F .text	00000004 __sfp_lock_acquire
00012bc4 g     F .text	000000e8 memchr
000143a8 g     F .text	000002f0 _free_r
00013690 g     F .text	00000074 __srget_r
00013aac g     F .text	00000194 __call_exitprocs
00016538 g     O .rwdata	00000004 __malloc_sbrk_base
000101bc g     F .text	0000003c _start
00016f8c g     O .bss	00000004 _alt_tick_rate
00016f90 g     O .bss	00000004 _alt_nticks
00015688 g     F .text	00000104 read
00010b48 g     F .text	0000004c alt_sys_init
0001526c g     F .text	00000028 .hidden __mulsi3
00015b0c g       *ABS*	00000000 __ram_rwdata_start
0001598c g       *ABS*	00000000 __ram_rodata_start
00016fa4 g     O .bss	00000028 __malloc_current_mallinfo
00010b94 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011c08 g     F .text	000000d4 alt_get_fd
00014e84 g     F .text	00000054 _close_r
00012cac g     F .text	0000007c memcmp
000170cc g       *ABS*	00000000 __alt_stack_base
00013958 g     F .text	00000154 __swsetup_r
00014104 g     F .text	00000118 __sfp
00016104 g     O .rwdata	00000408 __malloc_av_
00014250 g     F .text	00000004 __sinit_lock_release
00014cec g     F .text	00000054 __sread
00011af4 g     F .text	00000114 alt_find_file
00011088 g     F .text	000000a4 alt_dev_llist_insert
000155f8 g     F .text	00000020 __malloc_lock
0001578c g     F .text	000000b0 sbrk
00013e48 g     F .text	0000005c _fflush_r
00016f7c g       *ABS*	00000000 __bss_start
000149d8 g     F .text	00000124 memset
000105ec g     F .text	0000014c transmitString
000101f8 g     F .text	00000148 main
00016f84 g     O .bss	00000004 alt_envp
00016f98 g     O .bss	00000004 __malloc_max_total_mem
00010bf4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001393c g     F .text	0000001c __swbuf
00014e20 g     F .text	00000008 __sclose
0001a000 g       *ABS*	00000000 __alt_heap_limit
00014fc8 g     F .text	00000014 fclose
0001241c g     F .text	000007a8 _malloc_r
00016520 g     O .rwdata	00000004 alt_errno
00010340 g     F .text	00000098 receiveChar
00014698 g     F .text	000000c4 _fwalk
0001305c g     F .text	000000cc putc
000151ac g     F .text	00000054 .hidden __divsi3
00014284 g     F .text	00000124 _malloc_trim_r
0001598c g       *ABS*	00000000 __flash_rodata_start
00010860 g     F .text	0000006c delay
00010b14 g     F .text	00000034 alt_irq_init
00011828 g     F .text	00000080 alt_release_fd
00014e28 g     F .text	0000005c _write_r
00016534 g     O .rwdata	00000004 _impure_ptr
00016f7c g     O .bss	00000004 alt_argc
00013c40 g     F .text	00000208 __sflush_r
00014b18 g     F .text	000001d4 __srefill_r
00010020 g       .exceptions	00000000 alt_irq_entry
0001426c g     F .text	00000018 __fp_unlock_all
0001650c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001115c g     F .text	00000050 alt_ic_isr_register
00016544 g       *ABS*	00000000 _edata
000170cc g       *ABS*	00000000 _end
000103d8 g     F .text	00000100 receiveString
000101bc g       *ABS*	00000000 __ram_exceptions_end
00011da0 g     F .text	0000009c _fputs_r
0001124c g     F .text	000000a4 alt_ic_irq_disable
00014d48 g     F .text	0000007c __swrite
0001653c g     O .rwdata	00000004 __malloc_trim_threshold
00011a44 g     F .text	00000020 altera_nios2_qsys_irq_init
00011d68 g     F .text	00000038 exit
0001475c g     F .text	000000c4 _fwalk_reent
00015200 g     F .text	0000005c .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00014248 g     F .text	00000004 __sfp_lock_release
000104d8 g     F .text	00000114 transmitChar
00015294 g     F .text	00000034 _exit
00014820 g     F .text	000001b8 __smakebuf_r
0001376c g     F .text	00000098 strlen
000116c8 g     F .text	00000160 open
00010a54 g     F .text	00000044 alt_putchar
0001112c g     F .text	00000030 alt_icache_flush_all
00011e3c g     F .text	0000001c fputs
00016524 g     O .rwdata	00000004 alt_priority_mask
000111ac g     F .text	000000a0 alt_ic_irq_enable
00010810 g     F .text	00000050 addParity
00016528 g     O .rwdata	00000008 alt_alarm_list
00010f18 g     F .text	000000d8 close
0001096c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
0001424c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <_gp+0xffff1af8>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406f14 	ori	at,at,444
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001426 	beq	r2,zero,1017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00800074 	movhi	r2,1
   10130:	109bf304 	addi	r2,r2,28620
   10134:	e0fffd17 	ldw	r3,-12(fp)
   10138:	180690fa 	slli	r3,r3,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	00800074 	movhi	r2,1
   10148:	109bf304 	addi	r2,r2,28620
   1014c:	e13ffd17 	ldw	r4,-12(fp)
   10150:	200890fa 	slli	r4,r4,3
   10154:	21000104 	addi	r4,r4,4
   10158:	1105883a 	add	r2,r2,r4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	00000706 	br	10198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1017c:	e0bffc17 	ldw	r2,-16(fp)
   10180:	1085883a 	add	r2,r2,r2
   10184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10188:	e0bffd17 	ldw	r2,-12(fp)
   1018c:	10800044 	addi	r2,r2,1
   10190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   10194:	003fe106 	br	1011c <_gp+0xffff1c10>

    active = alt_irq_pending ();
   10198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1019c:	e0bffb17 	ldw	r2,-20(fp)
   101a0:	103fdb1e 	bne	r2,zero,10110 <_gp+0xffff1c04>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a4:	0001883a 	nop
}
   101a8:	e037883a 	mov	sp,fp
   101ac:	dfc00117 	ldw	ra,4(sp)
   101b0:	df000017 	ldw	fp,0(sp)
   101b4:	dec00204 	addi	sp,sp,8
   101b8:	f800283a 	ret

Disassembly of section .text:

000101bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101bc:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101c0:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   101c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c8:	d6b94314 	ori	gp,gp,58636
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101cc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101d0:	109bdf14 	ori	r2,r2,28540

    movhi r3, %hi(__bss_end)
   101d4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d8:	18dc3314 	ori	r3,r3,28876

    beq r2, r3, 1f
   101dc:	10c00326 	beq	r2,r3,101ec <_start+0x30>

0:
    stw zero, (r2)
   101e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e8:	10fffd36 	bltu	r2,r3,101e0 <_gp+0xffff1cd4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101ec:	001096c0 	call	1096c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101f0:	00109ec0 	call	109ec <alt_main>

000101f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f4:	003fff06 	br	101f4 <_gp+0xffff1ce8>

000101f8 <main>:
void transmitString(char buf[GAME_CMD_LENGTH]);
alt_u8 generateParity(char byte);
alt_u8 addParity(char byte);
void delay(int n);

int main(void) {
   101f8:	defffa04 	addi	sp,sp,-24
   101fc:	dfc00515 	stw	ra,20(sp)
   10200:	df000415 	stw	fp,16(sp)
   10204:	df000404 	addi	fp,sp,16
  // Print intro message
  alt_putstr("This interface allows you to send and receive signals over a serial interface.\n");
   10208:	01000074 	movhi	r4,1
   1020c:	21166304 	addi	r4,r4,22924
   10210:	0010a980 	call	10a98 <alt_putstr>
  //alt_putchar((char) parity);
  // Shift parity bit to MSB of word
  alt_u8 send = (parity << 7) | word;
 */

  alt_putstr("Would you like to receive a string or a character? S/C\n");
   10214:	01000074 	movhi	r4,1
   10218:	21167704 	addi	r4,r4,23004
   1021c:	0010a980 	call	10a98 <alt_putstr>
  char c = alt_getchar();
   10220:	00108cc0 	call	108cc <alt_getchar>
   10224:	e0bfff05 	stb	r2,-4(fp)

  // Enter infinite loop to constantly monitor serial I/O
  while (1) {
	  switch (c) {
   10228:	e0bfff07 	ldb	r2,-4(fp)
   1022c:	10c014e0 	cmpeqi	r3,r2,83
   10230:	1800091e 	bne	r3,zero,10258 <main+0x60>
   10234:	10c01508 	cmpgei	r3,r2,84
   10238:	1800031e 	bne	r3,zero,10248 <main+0x50>
   1023c:	108010e0 	cmpeqi	r2,r2,67
   10240:	10003b1e 	bne	r2,zero,10330 <main+0x138>
   10244:	00003d06 	br	1033c <main+0x144>
   10248:	10c018e0 	cmpeqi	r3,r2,99
   1024c:	1800381e 	bne	r3,zero,10330 <main+0x138>
   10250:	10801ce0 	cmpeqi	r2,r2,115
   10254:	10003926 	beq	r2,zero,1033c <main+0x144>
	  	  case 'S' :
	  	  case 's' :
	  		  alt_putstr("Enter S to send a string, R to receive.\n");
   10258:	01000074 	movhi	r4,1
   1025c:	21168504 	addi	r4,r4,23060
   10260:	0010a980 	call	10a98 <alt_putstr>
			  char tmp = alt_getchar();
   10264:	00108cc0 	call	108cc <alt_getchar>
   10268:	e0bfff45 	stb	r2,-3(fp)
			  //alt_getchar(); // Clear newline
			  if (tmp == 'S') {
   1026c:	e0bfff47 	ldb	r2,-3(fp)
   10270:	108014d8 	cmpnei	r2,r2,83
   10274:	1000281e 	bne	r2,zero,10318 <main+0x120>
				  alt_putstr("Enter string to send: ");
   10278:	01000074 	movhi	r4,1
   1027c:	21169004 	addi	r4,r4,23104
   10280:	0010a980 	call	10a98 <alt_putstr>
				  char sel = alt_getchar();
   10284:	00108cc0 	call	108cc <alt_getchar>
   10288:	e0bffc05 	stb	r2,-16(fp)
				  alt_getchar();
   1028c:	00108cc0 	call	108cc <alt_getchar>
				  char buf[GAME_CMD_LENGTH];
				  int i;
				  for (i = 0; i < GAME_CMD_LENGTH; i++) {
   10290:	e03ffd15 	stw	zero,-12(fp)
   10294:	00000706 	br	102b4 <main+0xbc>
					  buf[i] = 0;
   10298:	e0ffff84 	addi	r3,fp,-2
   1029c:	e0bffd17 	ldw	r2,-12(fp)
   102a0:	1885883a 	add	r2,r3,r2
   102a4:	10000005 	stb	zero,0(r2)
				  alt_putstr("Enter string to send: ");
				  char sel = alt_getchar();
				  alt_getchar();
				  char buf[GAME_CMD_LENGTH];
				  int i;
				  for (i = 0; i < GAME_CMD_LENGTH; i++) {
   102a8:	e0bffd17 	ldw	r2,-12(fp)
   102ac:	10800044 	addi	r2,r2,1
   102b0:	e0bffd15 	stw	r2,-12(fp)
   102b4:	e0bffd17 	ldw	r2,-12(fp)
   102b8:	10800090 	cmplti	r2,r2,2
   102bc:	103ff61e 	bne	r2,zero,10298 <_gp+0xffff1d8c>
					  buf[i] = 0;
				  }
				  int j = 0;
   102c0:	e03ffe15 	stw	zero,-8(fp)
				  while (sel != '\n') {
   102c4:	00000d06 	br	102fc <main+0x104>
					  buf[j] = sel;
   102c8:	e0ffff84 	addi	r3,fp,-2
   102cc:	e0bffe17 	ldw	r2,-8(fp)
   102d0:	1885883a 	add	r2,r3,r2
   102d4:	e0fffc03 	ldbu	r3,-16(fp)
   102d8:	10c00005 	stb	r3,0(r2)
					  sel = alt_getchar();
   102dc:	00108cc0 	call	108cc <alt_getchar>
   102e0:	e0bffc05 	stb	r2,-16(fp)
					  j++;
   102e4:	e0bffe17 	ldw	r2,-8(fp)
   102e8:	10800044 	addi	r2,r2,1
   102ec:	e0bffe15 	stw	r2,-8(fp)
					  alt_putchar(sel);
   102f0:	e0bffc07 	ldb	r2,-16(fp)
   102f4:	1009883a 	mov	r4,r2
   102f8:	0010a540 	call	10a54 <alt_putchar>
				  int i;
				  for (i = 0; i < GAME_CMD_LENGTH; i++) {
					  buf[i] = 0;
				  }
				  int j = 0;
				  while (sel != '\n') {
   102fc:	e0bffc07 	ldb	r2,-16(fp)
   10300:	10800298 	cmpnei	r2,r2,10
   10304:	103ff01e 	bne	r2,zero,102c8 <_gp+0xffff1dbc>
					  buf[j] = sel;
					  sel = alt_getchar();
					  j++;
					  alt_putchar(sel);
				  }
				  transmitString(buf);
   10308:	e0bfff84 	addi	r2,fp,-2
   1030c:	1009883a 	mov	r4,r2
   10310:	00105ec0 	call	105ec <transmitString>
   10314:	00000506 	br	1032c <main+0x134>
			  } else if (tmp == 'R') {
   10318:	e0bfff47 	ldb	r2,-3(fp)
   1031c:	10801498 	cmpnei	r2,r2,82
   10320:	1000021e 	bne	r2,zero,1032c <main+0x134>
				  receiveString();
   10324:	00103d80 	call	103d8 <receiveString>
			  }
			  //receiveString();

		  	  break;
   10328:	00000406 	br	1033c <main+0x144>
   1032c:	00000306 	br	1033c <main+0x144>
	  	  case 'C' :
	  	  case 'c' :
	  		  receiveChar();
   10330:	00103400 	call	10340 <receiveChar>
	  		  transmitChar();
   10334:	00104d80 	call	104d8 <transmitChar>
		  	  break;
   10338:	0001883a 	nop
	  }
  }
   1033c:	003fba06 	br	10228 <_gp+0xffff1d1c>

00010340 <receiveChar>:
}

/**
 * Receives a single character from the serial in line
 */
void receiveChar() {
   10340:	defffd04 	addi	sp,sp,-12
   10344:	dfc00215 	stw	ra,8(sp)
   10348:	df000115 	stw	fp,4(sp)
   1034c:	df000104 	addi	fp,sp,4
	alt_u8 c = (alt_u8) IORD_ALTERA_AVALON_PIO_DATA(RX_ADDR);
   10350:	008000b4 	movhi	r2,2
   10354:	10843404 	addi	r2,r2,4304
   10358:	10800037 	ldwio	r2,0(r2)
   1035c:	e0bfff05 	stb	r2,-4(fp)
	// Extract parity bit
	//alt_u8 sentParity = c >> 7;
	// Mask out the parity (8th) bit
	//char rcvd = c & 0x7f;
	// Extract parity bit
	alt_u8 sentParity = c & 0x01;
   10360:	e0bfff03 	ldbu	r2,-4(fp)
   10364:	1080004c 	andi	r2,r2,1
   10368:	e0bfff45 	stb	r2,-3(fp)
	// Mask out the parity (1st) bit
	char rcvd = (c & 0xfe) >> 1;
   1036c:	e0bfff03 	ldbu	r2,-4(fp)
   10370:	1004d07a 	srli	r2,r2,1
   10374:	e0bfff85 	stb	r2,-2(fp)

	// Compute parity and compare to the sent parity bit
	alt_u8 genParity = generateParity(rcvd);
   10378:	e0bfff87 	ldb	r2,-2(fp)
   1037c:	1009883a 	mov	r4,r2
   10380:	001077c0 	call	1077c <generateParity>
   10384:	e0bfffc5 	stb	r2,-1(fp)
	if (sentParity != genParity) {
   10388:	e0ffff43 	ldbu	r3,-3(fp)
   1038c:	e0bfffc3 	ldbu	r2,-1(fp)
   10390:	18800426 	beq	r3,r2,103a4 <receiveChar+0x64>
		alt_putstr("Parity error in received character!\n");
   10394:	01000074 	movhi	r4,1
   10398:	21169604 	addi	r4,r4,23128
   1039c:	0010a980 	call	10a98 <alt_putstr>
   103a0:	00000806 	br	103c4 <receiveChar+0x84>
		//alt_putchar(rcvd);
	} else {
		alt_putstr("Character received: ");
   103a4:	01000074 	movhi	r4,1
   103a8:	2116a004 	addi	r4,r4,23168
   103ac:	0010a980 	call	10a98 <alt_putstr>
		alt_putchar(rcvd);
   103b0:	e0bfff87 	ldb	r2,-2(fp)
   103b4:	1009883a 	mov	r4,r2
   103b8:	0010a540 	call	10a54 <alt_putchar>
		alt_putchar('\n');
   103bc:	01000284 	movi	r4,10
   103c0:	0010a540 	call	10a54 <alt_putchar>
	}
}
   103c4:	e037883a 	mov	sp,fp
   103c8:	dfc00117 	ldw	ra,4(sp)
   103cc:	df000017 	ldw	fp,0(sp)
   103d0:	dec00204 	addi	sp,sp,8
   103d4:	f800283a 	ret

000103d8 <receiveString>:

/**
 * Receives and displays a series of characters
 */
void receiveString() {
   103d8:	defffa04 	addi	sp,sp,-24
   103dc:	dfc00515 	stw	ra,20(sp)
   103e0:	df000415 	stw	fp,16(sp)
   103e4:	df000404 	addi	fp,sp,16
	char buf[GAME_CMD_LENGTH];
	int i;
	for (i = 0; i < GAME_CMD_LENGTH; i++) {
   103e8:	e03ffc15 	stw	zero,-16(fp)
   103ec:	00000706 	br	1040c <receiveString+0x34>
		buf[i] = 0;
   103f0:	e0ffff44 	addi	r3,fp,-3
   103f4:	e0bffc17 	ldw	r2,-16(fp)
   103f8:	1885883a 	add	r2,r3,r2
   103fc:	10000005 	stb	zero,0(r2)
 * Receives and displays a series of characters
 */
void receiveString() {
	char buf[GAME_CMD_LENGTH];
	int i;
	for (i = 0; i < GAME_CMD_LENGTH; i++) {
   10400:	e0bffc17 	ldw	r2,-16(fp)
   10404:	10800044 	addi	r2,r2,1
   10408:	e0bffc15 	stw	r2,-16(fp)
   1040c:	e0bffc17 	ldw	r2,-16(fp)
   10410:	10800090 	cmplti	r2,r2,2
   10414:	103ff61e 	bne	r2,zero,103f0 <_gp+0xffff1ee4>
		buf[i] = 0;
	}
	alt_u8 c = (alt_u8) IORD_ALTERA_AVALON_PIO_DATA(RX_ADDR);
   10418:	008000b4 	movhi	r2,2
   1041c:	10843404 	addi	r2,r2,4304
   10420:	10800037 	ldwio	r2,0(r2)
   10424:	e0bffe05 	stb	r2,-8(fp)
	int j = 0;
   10428:	e03ffd15 	stw	zero,-12(fp)
	while (j < GAME_CMD_LENGTH && c != '\0') {
   1042c:	00001d06 	br	104a4 <receiveString+0xcc>
		alt_u8 c = (alt_u8) IORD_ALTERA_AVALON_PIO_DATA(RX_ADDR);
   10430:	008000b4 	movhi	r2,2
   10434:	10843404 	addi	r2,r2,4304
   10438:	10800037 	ldwio	r2,0(r2)
   1043c:	e0bffe45 	stb	r2,-7(fp)
		// Extract parity bit
		//alt_u8 sentParity = c >> 7;
		// Mask out the parity (8th) bit
		//char rcvd = c & 0x7f;
		// Extract parity bit
		alt_u8 sentParity = c & 0x01;
   10440:	e0bffe43 	ldbu	r2,-7(fp)
   10444:	1080004c 	andi	r2,r2,1
   10448:	e0bffe85 	stb	r2,-6(fp)
		// Mask out the parity (1st) bit
		char rcvd = (c & 0xfe) >> 1;
   1044c:	e0bffe43 	ldbu	r2,-7(fp)
   10450:	1004d07a 	srli	r2,r2,1
   10454:	e0bffec5 	stb	r2,-5(fp)

		// Compute parity and compare to the sent parity bit
		alt_u8 genParity = generateParity(rcvd);
   10458:	e0bffec7 	ldb	r2,-5(fp)
   1045c:	1009883a 	mov	r4,r2
   10460:	001077c0 	call	1077c <generateParity>
   10464:	e0bfff05 	stb	r2,-4(fp)
		if (sentParity != genParity) {
   10468:	e0fffe83 	ldbu	r3,-6(fp)
   1046c:	e0bfff03 	ldbu	r2,-4(fp)
   10470:	18800426 	beq	r3,r2,10484 <receiveString+0xac>
			alt_putstr("Refused: parity error in received character!\n");
   10474:	01000074 	movhi	r4,1
   10478:	2116a604 	addi	r4,r4,23192
   1047c:	0010a980 	call	10a98 <alt_putstr>
   10480:	00000806 	br	104a4 <receiveString+0xcc>
		} else {
			buf[j] = rcvd;
   10484:	e0ffff44 	addi	r3,fp,-3
   10488:	e0bffd17 	ldw	r2,-12(fp)
   1048c:	1885883a 	add	r2,r3,r2
   10490:	e0fffec3 	ldbu	r3,-5(fp)
   10494:	10c00005 	stb	r3,0(r2)
			j++;
   10498:	e0bffd17 	ldw	r2,-12(fp)
   1049c:	10800044 	addi	r2,r2,1
   104a0:	e0bffd15 	stw	r2,-12(fp)
	for (i = 0; i < GAME_CMD_LENGTH; i++) {
		buf[i] = 0;
	}
	alt_u8 c = (alt_u8) IORD_ALTERA_AVALON_PIO_DATA(RX_ADDR);
	int j = 0;
	while (j < GAME_CMD_LENGTH && c != '\0') {
   104a4:	e0bffd17 	ldw	r2,-12(fp)
   104a8:	10800088 	cmpgei	r2,r2,2
   104ac:	1000021e 	bne	r2,zero,104b8 <receiveString+0xe0>
   104b0:	e0bffe03 	ldbu	r2,-8(fp)
   104b4:	103fde1e 	bne	r2,zero,10430 <_gp+0xffff1f24>
		} else {
			buf[j] = rcvd;
			j++;
		}
	}
	displayString(buf);
   104b8:	e0bfff44 	addi	r2,fp,-3
   104bc:	1009883a 	mov	r4,r2
   104c0:	00107380 	call	10738 <displayString>
}
   104c4:	e037883a 	mov	sp,fp
   104c8:	dfc00117 	ldw	ra,4(sp)
   104cc:	df000017 	ldw	fp,0(sp)
   104d0:	dec00204 	addi	sp,sp,8
   104d4:	f800283a 	ret

000104d8 <transmitChar>:

/**
 * Transmits a single character entered on the console
 */
void transmitChar() {
   104d8:	defffd04 	addi	sp,sp,-12
   104dc:	dfc00215 	stw	ra,8(sp)
   104e0:	df000115 	stw	fp,4(sp)
   104e4:	df000104 	addi	fp,sp,4
	char c = alt_getchar();
   104e8:	00108cc0 	call	108cc <alt_getchar>
   104ec:	e0bfff05 	stb	r2,-4(fp)
	if (c != '\n') {
   104f0:	e0bfff07 	ldb	r2,-4(fp)
   104f4:	108002a0 	cmpeqi	r2,r2,10
   104f8:	1000301e 	bne	r2,zero,105bc <transmitChar+0xe4>
		*LOAD = 0;
   104fc:	008000b4 	movhi	r2,2
   10500:	10840c04 	addi	r2,r2,4144
   10504:	10000005 	stb	zero,0(r2)
		delay(10);
   10508:	01000284 	movi	r4,10
   1050c:	00108600 	call	10860 <delay>
		*TRANSMIT_ENABLE = 0;
   10510:	008000b4 	movhi	r2,2
   10514:	10840804 	addi	r2,r2,4128
   10518:	10000005 	stb	zero,0(r2)
		// Compute parity and append parity bit to word
		alt_u8 send = addParity(c);
   1051c:	e0bfff07 	ldb	r2,-4(fp)
   10520:	1009883a 	mov	r4,r2
   10524:	00108100 	call	10810 <addParity>
   10528:	e0bfff45 	stb	r2,-3(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(TX_ADDR, send);
   1052c:	e0ffff43 	ldbu	r3,-3(fp)
   10530:	008000b4 	movhi	r2,2
   10534:	10843004 	addi	r2,r2,4288
   10538:	10c00035 	stwio	r3,0(r2)
		delay(10);
   1053c:	01000284 	movi	r4,10
   10540:	00108600 	call	10860 <delay>
		// Signal char is loaded into transmit line
		*LOAD = 1;
   10544:	008000b4 	movhi	r2,2
   10548:	10840c04 	addi	r2,r2,4144
   1054c:	00c00044 	movi	r3,1
   10550:	10c00005 	stb	r3,0(r2)
		delay(10);
   10554:	01000284 	movi	r4,10
   10558:	00108600 	call	10860 <delay>
		*LOAD = 0;
   1055c:	008000b4 	movhi	r2,2
   10560:	10840c04 	addi	r2,r2,4144
   10564:	10000005 	stb	zero,0(r2)
		delay(10);
   10568:	01000284 	movi	r4,10
   1056c:	00108600 	call	10860 <delay>
		*TRANSMIT_ENABLE = 1;
   10570:	008000b4 	movhi	r2,2
   10574:	10840804 	addi	r2,r2,4128
   10578:	00c00044 	movi	r3,1
   1057c:	10c00005 	stb	r3,0(r2)
		while (*CHAR_SENT == 0) {
   10580:	00000206 	br	1058c <transmitChar+0xb4>
			delay(5);
   10584:	01000144 	movi	r4,5
   10588:	00108600 	call	10860 <delay>
		*LOAD = 1;
		delay(10);
		*LOAD = 0;
		delay(10);
		*TRANSMIT_ENABLE = 1;
		while (*CHAR_SENT == 0) {
   1058c:	008000b4 	movhi	r2,2
   10590:	10841404 	addi	r2,r2,4176
   10594:	10800003 	ldbu	r2,0(r2)
   10598:	10803fcc 	andi	r2,r2,255
   1059c:	1080201c 	xori	r2,r2,128
   105a0:	10bfe004 	addi	r2,r2,-128
   105a4:	103ff726 	beq	r2,zero,10584 <_gp+0xffff2078>
			delay(5);
		}
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_ADDR, send);
   105a8:	e0ffff43 	ldbu	r3,-3(fp)
   105ac:	008000b4 	movhi	r2,2
   105b0:	10843c04 	addi	r2,r2,4336
   105b4:	10c00035 	stwio	r3,0(r2)
   105b8:	00000106 	br	105c0 <transmitChar+0xe8>
	} else {
		c = '\0';
   105bc:	e03fff05 	stb	zero,-4(fp)
	}
	// Signal transmit is done
	*LOAD = 0;
   105c0:	008000b4 	movhi	r2,2
   105c4:	10840c04 	addi	r2,r2,4144
   105c8:	10000005 	stb	zero,0(r2)
	*TRANSMIT_ENABLE = 0;
   105cc:	008000b4 	movhi	r2,2
   105d0:	10840804 	addi	r2,r2,4128
   105d4:	10000005 	stb	zero,0(r2)
	// Clear newline
	//c = alt_getchar();
}
   105d8:	e037883a 	mov	sp,fp
   105dc:	dfc00117 	ldw	ra,4(sp)
   105e0:	df000017 	ldw	fp,0(sp)
   105e4:	dec00204 	addi	sp,sp,8
   105e8:	f800283a 	ret

000105ec <transmitString>:

/**
 * Transmits each character in buf.
 */
void transmitString(char buf[GAME_CMD_LENGTH]) {
   105ec:	defffb04 	addi	sp,sp,-20
   105f0:	dfc00415 	stw	ra,16(sp)
   105f4:	df000315 	stw	fp,12(sp)
   105f8:	df000304 	addi	fp,sp,12
   105fc:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0; i < GAME_CMD_LENGTH; i++) {
   10600:	e03ffd15 	stw	zero,-12(fp)
   10604:	00003e06 	br	10700 <transmitString+0x114>
		char c = buf[i];
   10608:	e0bffd17 	ldw	r2,-12(fp)
   1060c:	e0ffff17 	ldw	r3,-4(fp)
   10610:	1885883a 	add	r2,r3,r2
   10614:	10800003 	ldbu	r2,0(r2)
   10618:	e0bffe05 	stb	r2,-8(fp)
		if (c != 0) {
   1061c:	e0bffe07 	ldb	r2,-8(fp)
   10620:	10003226 	beq	r2,zero,106ec <transmitString+0x100>
			*LOAD = 0;
   10624:	008000b4 	movhi	r2,2
   10628:	10840c04 	addi	r2,r2,4144
   1062c:	10000005 	stb	zero,0(r2)
			delay(10);
   10630:	01000284 	movi	r4,10
   10634:	00108600 	call	10860 <delay>
			*TRANSMIT_ENABLE = 0;
   10638:	008000b4 	movhi	r2,2
   1063c:	10840804 	addi	r2,r2,4128
   10640:	10000005 	stb	zero,0(r2)
			// Compute parity and append parity bit to word
			alt_u8 send = addParity(c);
   10644:	e0bffe07 	ldb	r2,-8(fp)
   10648:	1009883a 	mov	r4,r2
   1064c:	00108100 	call	10810 <addParity>
   10650:	e0bffe45 	stb	r2,-7(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(TX_ADDR, send);
   10654:	e0fffe43 	ldbu	r3,-7(fp)
   10658:	008000b4 	movhi	r2,2
   1065c:	10843004 	addi	r2,r2,4288
   10660:	10c00035 	stwio	r3,0(r2)
			delay(10);
   10664:	01000284 	movi	r4,10
   10668:	00108600 	call	10860 <delay>
			// Signal char is loaded into transmit line
			*LOAD = 1;
   1066c:	008000b4 	movhi	r2,2
   10670:	10840c04 	addi	r2,r2,4144
   10674:	00c00044 	movi	r3,1
   10678:	10c00005 	stb	r3,0(r2)
			delay(10);
   1067c:	01000284 	movi	r4,10
   10680:	00108600 	call	10860 <delay>
			*LOAD = 0;
   10684:	008000b4 	movhi	r2,2
   10688:	10840c04 	addi	r2,r2,4144
   1068c:	10000005 	stb	zero,0(r2)
			delay(10);
   10690:	01000284 	movi	r4,10
   10694:	00108600 	call	10860 <delay>
			alt_u8 one = 1;
   10698:	00800044 	movi	r2,1
   1069c:	e0bffe85 	stb	r2,-6(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(0x00021020, one);
   106a0:	e0fffe83 	ldbu	r3,-6(fp)
   106a4:	008000b4 	movhi	r2,2
   106a8:	10840804 	addi	r2,r2,4128
   106ac:	10c00035 	stwio	r3,0(r2)
			while (*CHAR_SENT == 0) {
   106b0:	00000206 	br	106bc <transmitString+0xd0>
				delay(5);
   106b4:	01000144 	movi	r4,5
   106b8:	00108600 	call	10860 <delay>
			delay(10);
			*LOAD = 0;
			delay(10);
			alt_u8 one = 1;
			IOWR_ALTERA_AVALON_PIO_DATA(0x00021020, one);
			while (*CHAR_SENT == 0) {
   106bc:	008000b4 	movhi	r2,2
   106c0:	10841404 	addi	r2,r2,4176
   106c4:	10800003 	ldbu	r2,0(r2)
   106c8:	10803fcc 	andi	r2,r2,255
   106cc:	1080201c 	xori	r2,r2,128
   106d0:	10bfe004 	addi	r2,r2,-128
   106d4:	103ff726 	beq	r2,zero,106b4 <_gp+0xffff21a8>
				delay(5);
			}
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_ADDR, send);
   106d8:	e0fffe43 	ldbu	r3,-7(fp)
   106dc:	008000b4 	movhi	r2,2
   106e0:	10843c04 	addi	r2,r2,4336
   106e4:	10c00035 	stwio	r3,0(r2)
   106e8:	00000206 	br	106f4 <transmitString+0x108>
		} else {
			i = GAME_CMD_LENGTH;
   106ec:	00800084 	movi	r2,2
   106f0:	e0bffd15 	stw	r2,-12(fp)
/**
 * Transmits each character in buf.
 */
void transmitString(char buf[GAME_CMD_LENGTH]) {
	int i;
	for (i = 0; i < GAME_CMD_LENGTH; i++) {
   106f4:	e0bffd17 	ldw	r2,-12(fp)
   106f8:	10800044 	addi	r2,r2,1
   106fc:	e0bffd15 	stw	r2,-12(fp)
   10700:	e0bffd17 	ldw	r2,-12(fp)
   10704:	10800090 	cmplti	r2,r2,2
   10708:	103fbf1e 	bne	r2,zero,10608 <_gp+0xffff20fc>
		} else {
			i = GAME_CMD_LENGTH;
		}
	}
	// Signal transmit is done
	*LOAD = 0;
   1070c:	008000b4 	movhi	r2,2
   10710:	10840c04 	addi	r2,r2,4144
   10714:	10000005 	stb	zero,0(r2)
	// Echo characters
	//displayString(buf);
	*TRANSMIT_ENABLE = 0;
   10718:	008000b4 	movhi	r2,2
   1071c:	10840804 	addi	r2,r2,4128
   10720:	10000005 	stb	zero,0(r2)
}
   10724:	e037883a 	mov	sp,fp
   10728:	dfc00117 	ldw	ra,4(sp)
   1072c:	df000017 	ldw	fp,0(sp)
   10730:	dec00204 	addi	sp,sp,8
   10734:	f800283a 	ret

00010738 <displayString>:

/**
 * Nicely display the contents of buf
 */
void displayString(char *buf) {
   10738:	defffd04 	addi	sp,sp,-12
   1073c:	dfc00215 	stw	ra,8(sp)
   10740:	df000115 	stw	fp,4(sp)
   10744:	df000104 	addi	fp,sp,4
   10748:	e13fff15 	stw	r4,-4(fp)
	alt_putstr("String received: ");
   1074c:	01000074 	movhi	r4,1
   10750:	2116b204 	addi	r4,r4,23240
   10754:	0010a980 	call	10a98 <alt_putstr>
	alt_putstr(buf);
   10758:	e13fff17 	ldw	r4,-4(fp)
   1075c:	0010a980 	call	10a98 <alt_putstr>
	alt_putchar('\n');
   10760:	01000284 	movi	r4,10
   10764:	0010a540 	call	10a54 <alt_putchar>
}
   10768:	e037883a 	mov	sp,fp
   1076c:	dfc00117 	ldw	ra,4(sp)
   10770:	df000017 	ldw	fp,0(sp)
   10774:	dec00204 	addi	sp,sp,8
   10778:	f800283a 	ret

0001077c <generateParity>:

/**
 * Generates a parity bit for even parity for the char byte
 * Returns the parity bit as an unsigned 8bit number
 */
alt_u8 generateParity(char byte) {
   1077c:	defffb04 	addi	sp,sp,-20
   10780:	df000415 	stw	fp,16(sp)
   10784:	df000404 	addi	fp,sp,16
   10788:	2005883a 	mov	r2,r4
   1078c:	e0bfff05 	stb	r2,-4(fp)
	int ones = 0;
   10790:	e03ffc15 	stw	zero,-16(fp)
	int i;
	for (i = 7; i >= 0; i--) {
   10794:	008001c4 	movi	r2,7
   10798:	e0bffd15 	stw	r2,-12(fp)
   1079c:	00000b06 	br	107cc <generateParity+0x50>
		if (((byte >> i) & 0x01) == 1) {
   107a0:	e0ffff07 	ldb	r3,-4(fp)
   107a4:	e0bffd17 	ldw	r2,-12(fp)
   107a8:	1885d83a 	sra	r2,r3,r2
   107ac:	1080004c 	andi	r2,r2,1
   107b0:	10000326 	beq	r2,zero,107c0 <generateParity+0x44>
			ones++;
   107b4:	e0bffc17 	ldw	r2,-16(fp)
   107b8:	10800044 	addi	r2,r2,1
   107bc:	e0bffc15 	stw	r2,-16(fp)
 * Returns the parity bit as an unsigned 8bit number
 */
alt_u8 generateParity(char byte) {
	int ones = 0;
	int i;
	for (i = 7; i >= 0; i--) {
   107c0:	e0bffd17 	ldw	r2,-12(fp)
   107c4:	10bfffc4 	addi	r2,r2,-1
   107c8:	e0bffd15 	stw	r2,-12(fp)
   107cc:	e0bffd17 	ldw	r2,-12(fp)
   107d0:	103ff30e 	bge	r2,zero,107a0 <_gp+0xffff2294>
		if (((byte >> i) & 0x01) == 1) {
			ones++;
		}
	}
	alt_u8 parity = ones % 2;
   107d4:	e0fffc17 	ldw	r3,-16(fp)
   107d8:	00a00034 	movhi	r2,32768
   107dc:	10800044 	addi	r2,r2,1
   107e0:	1884703a 	and	r2,r3,r2
   107e4:	1000040e 	bge	r2,zero,107f8 <generateParity+0x7c>
   107e8:	10bfffc4 	addi	r2,r2,-1
   107ec:	00ffff84 	movi	r3,-2
   107f0:	10c4b03a 	or	r2,r2,r3
   107f4:	10800044 	addi	r2,r2,1
   107f8:	e0bffe05 	stb	r2,-8(fp)
	return parity;
   107fc:	e0bffe03 	ldbu	r2,-8(fp)
}
   10800:	e037883a 	mov	sp,fp
   10804:	df000017 	ldw	fp,0(sp)
   10808:	dec00104 	addi	sp,sp,4
   1080c:	f800283a 	ret

00010810 <addParity>:
/**
 * Adds the parity bit to char c, shifting the bits of c
 * left 1 bit and putting the parity as the LSB
 * Returns the char c as an unsigned 8bit number
 */
alt_u8 addParity(char c) {
   10810:	defffc04 	addi	sp,sp,-16
   10814:	dfc00315 	stw	ra,12(sp)
   10818:	df000215 	stw	fp,8(sp)
   1081c:	df000204 	addi	fp,sp,8
   10820:	2005883a 	mov	r2,r4
   10824:	e0bfff05 	stb	r2,-4(fp)
	// Compute parity and append parity bit to word
	alt_u8 parity = generateParity(c);
   10828:	e0bfff07 	ldb	r2,-4(fp)
   1082c:	1009883a 	mov	r4,r2
   10830:	001077c0 	call	1077c <generateParity>
   10834:	e0bffe05 	stb	r2,-8(fp)
	// Shift parity bit to MSB of word
	//alt_u8 send = (parity << 7) | c;
	// Shift parity bit to LSB of word
	return (c << 1) | parity;
   10838:	e0bfff07 	ldb	r2,-4(fp)
   1083c:	1085883a 	add	r2,r2,r2
   10840:	1007883a 	mov	r3,r2
   10844:	e0bffe03 	ldbu	r2,-8(fp)
   10848:	1884b03a 	or	r2,r3,r2
}
   1084c:	e037883a 	mov	sp,fp
   10850:	dfc00117 	ldw	ra,4(sp)
   10854:	df000017 	ldw	fp,0(sp)
   10858:	dec00204 	addi	sp,sp,8
   1085c:	f800283a 	ret

00010860 <delay>:

/**
 * A simple software delay function
 */
void delay(int n) {
   10860:	defffb04 	addi	sp,sp,-20
   10864:	df000415 	stw	fp,16(sp)
   10868:	df000404 	addi	fp,sp,16
   1086c:	e13fff15 	stw	r4,-4(fp)
	int i;
	int j;
	int count;
	for (i = 0; i < n; i++) {
   10870:	e03ffc15 	stw	zero,-16(fp)
   10874:	00000e06 	br	108b0 <delay+0x50>
		for (j = 0; j < n; j++) {
   10878:	e03ffd15 	stw	zero,-12(fp)
   1087c:	00000606 	br	10898 <delay+0x38>
			count++;
   10880:	e0bffe17 	ldw	r2,-8(fp)
   10884:	10800044 	addi	r2,r2,1
   10888:	e0bffe15 	stw	r2,-8(fp)
void delay(int n) {
	int i;
	int j;
	int count;
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
   1088c:	e0bffd17 	ldw	r2,-12(fp)
   10890:	10800044 	addi	r2,r2,1
   10894:	e0bffd15 	stw	r2,-12(fp)
   10898:	e0fffd17 	ldw	r3,-12(fp)
   1089c:	e0bfff17 	ldw	r2,-4(fp)
   108a0:	18bff716 	blt	r3,r2,10880 <_gp+0xffff2374>
 */
void delay(int n) {
	int i;
	int j;
	int count;
	for (i = 0; i < n; i++) {
   108a4:	e0bffc17 	ldw	r2,-16(fp)
   108a8:	10800044 	addi	r2,r2,1
   108ac:	e0bffc15 	stw	r2,-16(fp)
   108b0:	e0fffc17 	ldw	r3,-16(fp)
   108b4:	e0bfff17 	ldw	r2,-4(fp)
   108b8:	18bfef16 	blt	r3,r2,10878 <_gp+0xffff236c>
		for (j = 0; j < n; j++) {
			count++;
		}
	}
}
   108bc:	e037883a 	mov	sp,fp
   108c0:	df000017 	ldw	fp,0(sp)
   108c4:	dec00104 	addi	sp,sp,4
   108c8:	f800283a 	ret

000108cc <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   108cc:	defffe04 	addi	sp,sp,-8
   108d0:	dfc00115 	stw	ra,4(sp)
   108d4:	df000015 	stw	fp,0(sp)
   108d8:	d839883a 	mov	fp,sp
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
   108dc:	00800074 	movhi	r2,1
   108e0:	10994d04 	addi	r2,r2,25908
   108e4:	10800017 	ldw	r2,0(r2)
   108e8:	10800117 	ldw	r2,4(r2)
   108ec:	1009883a 	mov	r4,r2
   108f0:	00123940 	call	12394 <getc>
#endif
#endif
}
   108f4:	e037883a 	mov	sp,fp
   108f8:	dfc00117 	ldw	ra,4(sp)
   108fc:	df000017 	ldw	fp,0(sp)
   10900:	dec00204 	addi	sp,sp,8
   10904:	f800283a 	ret

00010908 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10908:	defffc04 	addi	sp,sp,-16
   1090c:	df000315 	stw	fp,12(sp)
   10910:	df000304 	addi	fp,sp,12
   10914:	e13ffd15 	stw	r4,-12(fp)
   10918:	e17ffe15 	stw	r5,-8(fp)
   1091c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10920:	e0fffe17 	ldw	r3,-8(fp)
   10924:	e0bffd17 	ldw	r2,-12(fp)
   10928:	18800c26 	beq	r3,r2,1095c <alt_load_section+0x54>
  {
    while( to != end )
   1092c:	00000806 	br	10950 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10930:	e0bffe17 	ldw	r2,-8(fp)
   10934:	10c00104 	addi	r3,r2,4
   10938:	e0fffe15 	stw	r3,-8(fp)
   1093c:	e0fffd17 	ldw	r3,-12(fp)
   10940:	19000104 	addi	r4,r3,4
   10944:	e13ffd15 	stw	r4,-12(fp)
   10948:	18c00017 	ldw	r3,0(r3)
   1094c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10950:	e0fffe17 	ldw	r3,-8(fp)
   10954:	e0bfff17 	ldw	r2,-4(fp)
   10958:	18bff51e 	bne	r3,r2,10930 <_gp+0xffff2424>
    {
      *to++ = *from++;
    }
  }
}
   1095c:	e037883a 	mov	sp,fp
   10960:	df000017 	ldw	fp,0(sp)
   10964:	dec00104 	addi	sp,sp,4
   10968:	f800283a 	ret

0001096c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1096c:	defffe04 	addi	sp,sp,-8
   10970:	dfc00115 	stw	ra,4(sp)
   10974:	df000015 	stw	fp,0(sp)
   10978:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1097c:	01000074 	movhi	r4,1
   10980:	21195104 	addi	r4,r4,25924
   10984:	01400074 	movhi	r5,1
   10988:	2956c304 	addi	r5,r5,23308
   1098c:	01800074 	movhi	r6,1
   10990:	31995104 	addi	r6,r6,25924
   10994:	00109080 	call	10908 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10998:	01000074 	movhi	r4,1
   1099c:	21000804 	addi	r4,r4,32
   109a0:	01400074 	movhi	r5,1
   109a4:	29400804 	addi	r5,r5,32
   109a8:	01800074 	movhi	r6,1
   109ac:	31806f04 	addi	r6,r6,444
   109b0:	00109080 	call	10908 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   109b4:	01000074 	movhi	r4,1
   109b8:	21166304 	addi	r4,r4,22924
   109bc:	01400074 	movhi	r5,1
   109c0:	29566304 	addi	r5,r5,22924
   109c4:	01800074 	movhi	r6,1
   109c8:	3196c304 	addi	r6,r6,23308
   109cc:	00109080 	call	10908 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   109d0:	0010ff00 	call	10ff0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   109d4:	001112c0 	call	1112c <alt_icache_flush_all>
}
   109d8:	e037883a 	mov	sp,fp
   109dc:	dfc00117 	ldw	ra,4(sp)
   109e0:	df000017 	ldw	fp,0(sp)
   109e4:	dec00204 	addi	sp,sp,8
   109e8:	f800283a 	ret

000109ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   109ec:	defffd04 	addi	sp,sp,-12
   109f0:	dfc00215 	stw	ra,8(sp)
   109f4:	df000115 	stw	fp,4(sp)
   109f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   109fc:	0009883a 	mov	r4,zero
   10a00:	0010b140 	call	10b14 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10a04:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10a08:	0010b480 	call	10b48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10a0c:	01000074 	movhi	r4,1
   10a10:	2116b704 	addi	r4,r4,23260
   10a14:	01400074 	movhi	r5,1
   10a18:	2956b704 	addi	r5,r5,23260
   10a1c:	01800074 	movhi	r6,1
   10a20:	3196b704 	addi	r6,r6,23260
   10a24:	001150c0 	call	1150c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10a28:	d1229c17 	ldw	r4,-30096(gp)
   10a2c:	d0e29d17 	ldw	r3,-30092(gp)
   10a30:	d0a29e17 	ldw	r2,-30088(gp)
   10a34:	180b883a 	mov	r5,r3
   10a38:	100d883a 	mov	r6,r2
   10a3c:	00101f80 	call	101f8 <main>
   10a40:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10a44:	01000044 	movi	r4,1
   10a48:	0010f180 	call	10f18 <close>
  exit (result);
   10a4c:	e13fff17 	ldw	r4,-4(fp)
   10a50:	0011d680 	call	11d68 <exit>

00010a54 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   10a54:	defffd04 	addi	sp,sp,-12
   10a58:	dfc00215 	stw	ra,8(sp)
   10a5c:	df000115 	stw	fp,4(sp)
   10a60:	df000104 	addi	fp,sp,4
   10a64:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   10a68:	00800074 	movhi	r2,1
   10a6c:	10994d04 	addi	r2,r2,25908
   10a70:	10800017 	ldw	r2,0(r2)
   10a74:	10800217 	ldw	r2,8(r2)
   10a78:	e13fff17 	ldw	r4,-4(fp)
   10a7c:	100b883a 	mov	r5,r2
   10a80:	001305c0 	call	1305c <putc>
#endif
#endif
}
   10a84:	e037883a 	mov	sp,fp
   10a88:	dfc00117 	ldw	ra,4(sp)
   10a8c:	df000017 	ldw	fp,0(sp)
   10a90:	dec00204 	addi	sp,sp,8
   10a94:	f800283a 	ret

00010a98 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10a98:	defffd04 	addi	sp,sp,-12
   10a9c:	dfc00215 	stw	ra,8(sp)
   10aa0:	df000115 	stw	fp,4(sp)
   10aa4:	df000104 	addi	fp,sp,4
   10aa8:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   10aac:	00800074 	movhi	r2,1
   10ab0:	10994d04 	addi	r2,r2,25908
   10ab4:	10800017 	ldw	r2,0(r2)
   10ab8:	10800217 	ldw	r2,8(r2)
   10abc:	e13fff17 	ldw	r4,-4(fp)
   10ac0:	100b883a 	mov	r5,r2
   10ac4:	0011e3c0 	call	11e3c <fputs>
#endif
#endif
}
   10ac8:	e037883a 	mov	sp,fp
   10acc:	dfc00117 	ldw	ra,4(sp)
   10ad0:	df000017 	ldw	fp,0(sp)
   10ad4:	dec00204 	addi	sp,sp,8
   10ad8:	f800283a 	ret

00010adc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10adc:	defffd04 	addi	sp,sp,-12
   10ae0:	dfc00215 	stw	ra,8(sp)
   10ae4:	df000115 	stw	fp,4(sp)
   10ae8:	df000104 	addi	fp,sp,4
   10aec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10af0:	e13fff17 	ldw	r4,-4(fp)
   10af4:	01400074 	movhi	r5,1
   10af8:	29594504 	addi	r5,r5,25876
   10afc:	00110880 	call	11088 <alt_dev_llist_insert>
}
   10b00:	e037883a 	mov	sp,fp
   10b04:	dfc00117 	ldw	ra,4(sp)
   10b08:	df000017 	ldw	fp,0(sp)
   10b0c:	dec00204 	addi	sp,sp,8
   10b10:	f800283a 	ret

00010b14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10b14:	defffd04 	addi	sp,sp,-12
   10b18:	dfc00215 	stw	ra,8(sp)
   10b1c:	df000115 	stw	fp,4(sp)
   10b20:	df000104 	addi	fp,sp,4
   10b24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   10b28:	0011a440 	call	11a44 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10b2c:	00800044 	movi	r2,1
   10b30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10b34:	e037883a 	mov	sp,fp
   10b38:	dfc00117 	ldw	ra,4(sp)
   10b3c:	df000017 	ldw	fp,0(sp)
   10b40:	dec00204 	addi	sp,sp,8
   10b44:	f800283a 	ret

00010b48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10b48:	defffe04 	addi	sp,sp,-8
   10b4c:	dfc00115 	stw	ra,4(sp)
   10b50:	df000015 	stw	fp,0(sp)
   10b54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   10b58:	010000b4 	movhi	r4,2
   10b5c:	21040004 	addi	r4,r4,4096
   10b60:	000b883a 	mov	r5,zero
   10b64:	01800044 	movi	r6,1
   10b68:	01c0fa04 	movi	r7,1000
   10b6c:	0010e400 	call	10e40 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   10b70:	01000074 	movhi	r4,1
   10b74:	2116c304 	addi	r4,r4,23308
   10b78:	0010adc0 	call	10adc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   10b7c:	0001883a 	nop
}
   10b80:	e037883a 	mov	sp,fp
   10b84:	dfc00117 	ldw	ra,4(sp)
   10b88:	df000017 	ldw	fp,0(sp)
   10b8c:	dec00204 	addi	sp,sp,8
   10b90:	f800283a 	ret

00010b94 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10b94:	defffa04 	addi	sp,sp,-24
   10b98:	dfc00515 	stw	ra,20(sp)
   10b9c:	df000415 	stw	fp,16(sp)
   10ba0:	df000404 	addi	fp,sp,16
   10ba4:	e13ffd15 	stw	r4,-12(fp)
   10ba8:	e17ffe15 	stw	r5,-8(fp)
   10bac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10bb0:	e0bffd17 	ldw	r2,-12(fp)
   10bb4:	10800017 	ldw	r2,0(r2)
   10bb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10bbc:	e0bffc17 	ldw	r2,-16(fp)
   10bc0:	10c00a04 	addi	r3,r2,40
   10bc4:	e0bffd17 	ldw	r2,-12(fp)
   10bc8:	10800217 	ldw	r2,8(r2)
   10bcc:	1809883a 	mov	r4,r3
   10bd0:	e17ffe17 	ldw	r5,-8(fp)
   10bd4:	e1bfff17 	ldw	r6,-4(fp)
   10bd8:	100f883a 	mov	r7,r2
   10bdc:	0010c540 	call	10c54 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10be0:	e037883a 	mov	sp,fp
   10be4:	dfc00117 	ldw	ra,4(sp)
   10be8:	df000017 	ldw	fp,0(sp)
   10bec:	dec00204 	addi	sp,sp,8
   10bf0:	f800283a 	ret

00010bf4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10bf4:	defffa04 	addi	sp,sp,-24
   10bf8:	dfc00515 	stw	ra,20(sp)
   10bfc:	df000415 	stw	fp,16(sp)
   10c00:	df000404 	addi	fp,sp,16
   10c04:	e13ffd15 	stw	r4,-12(fp)
   10c08:	e17ffe15 	stw	r5,-8(fp)
   10c0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10c10:	e0bffd17 	ldw	r2,-12(fp)
   10c14:	10800017 	ldw	r2,0(r2)
   10c18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10c1c:	e0bffc17 	ldw	r2,-16(fp)
   10c20:	10c00a04 	addi	r3,r2,40
   10c24:	e0bffd17 	ldw	r2,-12(fp)
   10c28:	10800217 	ldw	r2,8(r2)
   10c2c:	1809883a 	mov	r4,r3
   10c30:	e17ffe17 	ldw	r5,-8(fp)
   10c34:	e1bfff17 	ldw	r6,-4(fp)
   10c38:	100f883a 	mov	r7,r2
   10c3c:	0010d380 	call	10d38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10c40:	e037883a 	mov	sp,fp
   10c44:	dfc00117 	ldw	ra,4(sp)
   10c48:	df000017 	ldw	fp,0(sp)
   10c4c:	dec00204 	addi	sp,sp,8
   10c50:	f800283a 	ret

00010c54 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   10c54:	defff704 	addi	sp,sp,-36
   10c58:	df000815 	stw	fp,32(sp)
   10c5c:	df000804 	addi	fp,sp,32
   10c60:	e13ffc15 	stw	r4,-16(fp)
   10c64:	e17ffd15 	stw	r5,-12(fp)
   10c68:	e1bffe15 	stw	r6,-8(fp)
   10c6c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   10c70:	e0bffc17 	ldw	r2,-16(fp)
   10c74:	10800017 	ldw	r2,0(r2)
   10c78:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   10c7c:	e0bffd17 	ldw	r2,-12(fp)
   10c80:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   10c84:	e0bffe17 	ldw	r2,-8(fp)
   10c88:	e0fffd17 	ldw	r3,-12(fp)
   10c8c:	1885883a 	add	r2,r3,r2
   10c90:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   10c94:	00001406 	br	10ce8 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10c98:	e0bff917 	ldw	r2,-28(fp)
   10c9c:	10800037 	ldwio	r2,0(r2)
   10ca0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   10ca4:	e0bffb17 	ldw	r2,-20(fp)
   10ca8:	10a0000c 	andi	r2,r2,32768
   10cac:	10000626 	beq	r2,zero,10cc8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10cb0:	e0bff817 	ldw	r2,-32(fp)
   10cb4:	10c00044 	addi	r3,r2,1
   10cb8:	e0fff815 	stw	r3,-32(fp)
   10cbc:	e0fffb17 	ldw	r3,-20(fp)
   10cc0:	10c00005 	stb	r3,0(r2)
   10cc4:	00000806 	br	10ce8 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   10cc8:	e0fff817 	ldw	r3,-32(fp)
   10ccc:	e0bffd17 	ldw	r2,-12(fp)
   10cd0:	18800126 	beq	r3,r2,10cd8 <altera_avalon_jtag_uart_read+0x84>
      break;
   10cd4:	00000706 	br	10cf4 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
   10cd8:	e0bfff17 	ldw	r2,-4(fp)
   10cdc:	1090000c 	andi	r2,r2,16384
   10ce0:	10000126 	beq	r2,zero,10ce8 <altera_avalon_jtag_uart_read+0x94>
      break;   
   10ce4:	00000306 	br	10cf4 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   10ce8:	e0fff817 	ldw	r3,-32(fp)
   10cec:	e0bffa17 	ldw	r2,-24(fp)
   10cf0:	18bfe936 	bltu	r3,r2,10c98 <_gp+0xffff278c>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   10cf4:	e0fff817 	ldw	r3,-32(fp)
   10cf8:	e0bffd17 	ldw	r2,-12(fp)
   10cfc:	18800426 	beq	r3,r2,10d10 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
   10d00:	e0fff817 	ldw	r3,-32(fp)
   10d04:	e0bffd17 	ldw	r2,-12(fp)
   10d08:	1885c83a 	sub	r2,r3,r2
   10d0c:	00000606 	br	10d28 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
   10d10:	e0bfff17 	ldw	r2,-4(fp)
   10d14:	1090000c 	andi	r2,r2,16384
   10d18:	10000226 	beq	r2,zero,10d24 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
   10d1c:	00bffd44 	movi	r2,-11
   10d20:	00000106 	br	10d28 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
   10d24:	00bffec4 	movi	r2,-5
}
   10d28:	e037883a 	mov	sp,fp
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00104 	addi	sp,sp,4
   10d34:	f800283a 	ret

00010d38 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10d38:	defff904 	addi	sp,sp,-28
   10d3c:	df000615 	stw	fp,24(sp)
   10d40:	df000604 	addi	fp,sp,24
   10d44:	e13ffc15 	stw	r4,-16(fp)
   10d48:	e17ffd15 	stw	r5,-12(fp)
   10d4c:	e1bffe15 	stw	r6,-8(fp)
   10d50:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   10d54:	e0bffc17 	ldw	r2,-16(fp)
   10d58:	10800017 	ldw	r2,0(r2)
   10d5c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   10d60:	e0bffe17 	ldw	r2,-8(fp)
   10d64:	e0fffd17 	ldw	r3,-12(fp)
   10d68:	1885883a 	add	r2,r3,r2
   10d6c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   10d70:	00000e06 	br	10dac <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10d74:	e0bffa17 	ldw	r2,-24(fp)
   10d78:	10800104 	addi	r2,r2,4
   10d7c:	10800037 	ldwio	r2,0(r2)
   10d80:	10bfffec 	andhi	r2,r2,65535
   10d84:	10000926 	beq	r2,zero,10dac <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10d88:	e0fffa17 	ldw	r3,-24(fp)
   10d8c:	e0bffd17 	ldw	r2,-12(fp)
   10d90:	11000044 	addi	r4,r2,1
   10d94:	e13ffd15 	stw	r4,-12(fp)
   10d98:	10800003 	ldbu	r2,0(r2)
   10d9c:	10803fcc 	andi	r2,r2,255
   10da0:	1080201c 	xori	r2,r2,128
   10da4:	10bfe004 	addi	r2,r2,-128
   10da8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10dac:	e0fffd17 	ldw	r3,-12(fp)
   10db0:	e0bffb17 	ldw	r2,-20(fp)
   10db4:	18bfef36 	bltu	r3,r2,10d74 <_gp+0xffff2868>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   10db8:	e0bffe17 	ldw	r2,-8(fp)
}
   10dbc:	e037883a 	mov	sp,fp
   10dc0:	df000017 	ldw	fp,0(sp)
   10dc4:	dec00104 	addi	sp,sp,4
   10dc8:	f800283a 	ret

00010dcc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10dcc:	defffa04 	addi	sp,sp,-24
   10dd0:	dfc00515 	stw	ra,20(sp)
   10dd4:	df000415 	stw	fp,16(sp)
   10dd8:	df000404 	addi	fp,sp,16
   10ddc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10de0:	0007883a 	mov	r3,zero
   10de4:	e0bfff17 	ldw	r2,-4(fp)
   10de8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10dec:	e0bfff17 	ldw	r2,-4(fp)
   10df0:	10800104 	addi	r2,r2,4
   10df4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10df8:	0005303a 	rdctl	r2,status
   10dfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e00:	e0fffd17 	ldw	r3,-12(fp)
   10e04:	00bfff84 	movi	r2,-2
   10e08:	1884703a 	and	r2,r3,r2
   10e0c:	1001703a 	wrctl	status,r2
  
  return context;
   10e10:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10e14:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10e18:	00119400 	call	11940 <alt_tick>
   10e1c:	e0bffc17 	ldw	r2,-16(fp)
   10e20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e24:	e0bffe17 	ldw	r2,-8(fp)
   10e28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10e2c:	e037883a 	mov	sp,fp
   10e30:	dfc00117 	ldw	ra,4(sp)
   10e34:	df000017 	ldw	fp,0(sp)
   10e38:	dec00204 	addi	sp,sp,8
   10e3c:	f800283a 	ret

00010e40 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10e40:	defff804 	addi	sp,sp,-32
   10e44:	dfc00715 	stw	ra,28(sp)
   10e48:	df000615 	stw	fp,24(sp)
   10e4c:	df000604 	addi	fp,sp,24
   10e50:	e13ffc15 	stw	r4,-16(fp)
   10e54:	e17ffd15 	stw	r5,-12(fp)
   10e58:	e1bffe15 	stw	r6,-8(fp)
   10e5c:	e1ffff15 	stw	r7,-4(fp)
   10e60:	e0bfff17 	ldw	r2,-4(fp)
   10e64:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10e68:	00800074 	movhi	r2,1
   10e6c:	109be304 	addi	r2,r2,28556
   10e70:	10800017 	ldw	r2,0(r2)
   10e74:	1000041e 	bne	r2,zero,10e88 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   10e78:	00800074 	movhi	r2,1
   10e7c:	109be304 	addi	r2,r2,28556
   10e80:	e0fffb17 	ldw	r3,-20(fp)
   10e84:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10e88:	e0bffc17 	ldw	r2,-16(fp)
   10e8c:	10800104 	addi	r2,r2,4
   10e90:	00c001c4 	movi	r3,7
   10e94:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10e98:	d8000015 	stw	zero,0(sp)
   10e9c:	e13ffd17 	ldw	r4,-12(fp)
   10ea0:	e17ffe17 	ldw	r5,-8(fp)
   10ea4:	01800074 	movhi	r6,1
   10ea8:	31837304 	addi	r6,r6,3532
   10eac:	e1fffc17 	ldw	r7,-16(fp)
   10eb0:	001115c0 	call	1115c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10eb4:	e037883a 	mov	sp,fp
   10eb8:	dfc00117 	ldw	ra,4(sp)
   10ebc:	df000017 	ldw	fp,0(sp)
   10ec0:	dec00204 	addi	sp,sp,8
   10ec4:	f800283a 	ret

00010ec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10ec8:	defffe04 	addi	sp,sp,-8
   10ecc:	dfc00115 	stw	ra,4(sp)
   10ed0:	df000015 	stw	fp,0(sp)
   10ed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10ed8:	00800074 	movhi	r2,1
   10edc:	10994804 	addi	r2,r2,25888
   10ee0:	10800017 	ldw	r2,0(r2)
   10ee4:	10000526 	beq	r2,zero,10efc <alt_get_errno+0x34>
   10ee8:	00800074 	movhi	r2,1
   10eec:	10994804 	addi	r2,r2,25888
   10ef0:	10800017 	ldw	r2,0(r2)
   10ef4:	103ee83a 	callr	r2
   10ef8:	00000206 	br	10f04 <alt_get_errno+0x3c>
   10efc:	00800074 	movhi	r2,1
   10f00:	109be504 	addi	r2,r2,28564
}
   10f04:	e037883a 	mov	sp,fp
   10f08:	dfc00117 	ldw	ra,4(sp)
   10f0c:	df000017 	ldw	fp,0(sp)
   10f10:	dec00204 	addi	sp,sp,8
   10f14:	f800283a 	ret

00010f18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   10f18:	defffb04 	addi	sp,sp,-20
   10f1c:	dfc00415 	stw	ra,16(sp)
   10f20:	df000315 	stw	fp,12(sp)
   10f24:	df000304 	addi	fp,sp,12
   10f28:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   10f2c:	e0bfff17 	ldw	r2,-4(fp)
   10f30:	10000816 	blt	r2,zero,10f54 <close+0x3c>
   10f34:	e13fff17 	ldw	r4,-4(fp)
   10f38:	01400304 	movi	r5,12
   10f3c:	001526c0 	call	1526c <__mulsi3>
   10f40:	1007883a 	mov	r3,r2
   10f44:	00800074 	movhi	r2,1
   10f48:	1096d804 	addi	r2,r2,23392
   10f4c:	1885883a 	add	r2,r3,r2
   10f50:	00000106 	br	10f58 <close+0x40>
   10f54:	0005883a 	mov	r2,zero
   10f58:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   10f5c:	e0bffd17 	ldw	r2,-12(fp)
   10f60:	10001926 	beq	r2,zero,10fc8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   10f64:	e0bffd17 	ldw	r2,-12(fp)
   10f68:	10800017 	ldw	r2,0(r2)
   10f6c:	10800417 	ldw	r2,16(r2)
   10f70:	10000626 	beq	r2,zero,10f8c <close+0x74>
   10f74:	e0bffd17 	ldw	r2,-12(fp)
   10f78:	10800017 	ldw	r2,0(r2)
   10f7c:	10800417 	ldw	r2,16(r2)
   10f80:	e13ffd17 	ldw	r4,-12(fp)
   10f84:	103ee83a 	callr	r2
   10f88:	00000106 	br	10f90 <close+0x78>
   10f8c:	0005883a 	mov	r2,zero
   10f90:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   10f94:	e13fff17 	ldw	r4,-4(fp)
   10f98:	00118280 	call	11828 <alt_release_fd>
    if (rval < 0)
   10f9c:	e0bffe17 	ldw	r2,-8(fp)
   10fa0:	1000070e 	bge	r2,zero,10fc0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   10fa4:	0010ec80 	call	10ec8 <alt_get_errno>
   10fa8:	1007883a 	mov	r3,r2
   10fac:	e0bffe17 	ldw	r2,-8(fp)
   10fb0:	0085c83a 	sub	r2,zero,r2
   10fb4:	18800015 	stw	r2,0(r3)
      return -1;
   10fb8:	00bfffc4 	movi	r2,-1
   10fbc:	00000706 	br	10fdc <close+0xc4>
    }
    return 0;
   10fc0:	0005883a 	mov	r2,zero
   10fc4:	00000506 	br	10fdc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10fc8:	0010ec80 	call	10ec8 <alt_get_errno>
   10fcc:	1007883a 	mov	r3,r2
   10fd0:	00801444 	movi	r2,81
   10fd4:	18800015 	stw	r2,0(r3)
    return -1;
   10fd8:	00bfffc4 	movi	r2,-1
  }
}
   10fdc:	e037883a 	mov	sp,fp
   10fe0:	dfc00117 	ldw	ra,4(sp)
   10fe4:	df000017 	ldw	fp,0(sp)
   10fe8:	dec00204 	addi	sp,sp,8
   10fec:	f800283a 	ret

00010ff0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10ff0:	deffff04 	addi	sp,sp,-4
   10ff4:	df000015 	stw	fp,0(sp)
   10ff8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10ffc:	e037883a 	mov	sp,fp
   11000:	df000017 	ldw	fp,0(sp)
   11004:	dec00104 	addi	sp,sp,4
   11008:	f800283a 	ret

0001100c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1100c:	defffc04 	addi	sp,sp,-16
   11010:	df000315 	stw	fp,12(sp)
   11014:	df000304 	addi	fp,sp,12
   11018:	e13ffd15 	stw	r4,-12(fp)
   1101c:	e17ffe15 	stw	r5,-8(fp)
   11020:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11024:	e0bfff17 	ldw	r2,-4(fp)
}
   11028:	e037883a 	mov	sp,fp
   1102c:	df000017 	ldw	fp,0(sp)
   11030:	dec00104 	addi	sp,sp,4
   11034:	f800283a 	ret

00011038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11038:	defffe04 	addi	sp,sp,-8
   1103c:	dfc00115 	stw	ra,4(sp)
   11040:	df000015 	stw	fp,0(sp)
   11044:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11048:	00800074 	movhi	r2,1
   1104c:	10994804 	addi	r2,r2,25888
   11050:	10800017 	ldw	r2,0(r2)
   11054:	10000526 	beq	r2,zero,1106c <alt_get_errno+0x34>
   11058:	00800074 	movhi	r2,1
   1105c:	10994804 	addi	r2,r2,25888
   11060:	10800017 	ldw	r2,0(r2)
   11064:	103ee83a 	callr	r2
   11068:	00000206 	br	11074 <alt_get_errno+0x3c>
   1106c:	00800074 	movhi	r2,1
   11070:	109be504 	addi	r2,r2,28564
}
   11074:	e037883a 	mov	sp,fp
   11078:	dfc00117 	ldw	ra,4(sp)
   1107c:	df000017 	ldw	fp,0(sp)
   11080:	dec00204 	addi	sp,sp,8
   11084:	f800283a 	ret

00011088 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11088:	defffa04 	addi	sp,sp,-24
   1108c:	dfc00515 	stw	ra,20(sp)
   11090:	df000415 	stw	fp,16(sp)
   11094:	df000404 	addi	fp,sp,16
   11098:	e13ffe15 	stw	r4,-8(fp)
   1109c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   110a0:	e0bffe17 	ldw	r2,-8(fp)
   110a4:	10000326 	beq	r2,zero,110b4 <alt_dev_llist_insert+0x2c>
   110a8:	e0bffe17 	ldw	r2,-8(fp)
   110ac:	10800217 	ldw	r2,8(r2)
   110b0:	1000061e 	bne	r2,zero,110cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   110b4:	00110380 	call	11038 <alt_get_errno>
   110b8:	1007883a 	mov	r3,r2
   110bc:	00800584 	movi	r2,22
   110c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   110c4:	00bffa84 	movi	r2,-22
   110c8:	00001306 	br	11118 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   110cc:	e0bffe17 	ldw	r2,-8(fp)
   110d0:	e0ffff17 	ldw	r3,-4(fp)
   110d4:	e0fffc15 	stw	r3,-16(fp)
   110d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   110dc:	e0bffd17 	ldw	r2,-12(fp)
   110e0:	e0fffc17 	ldw	r3,-16(fp)
   110e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   110e8:	e0bffc17 	ldw	r2,-16(fp)
   110ec:	10c00017 	ldw	r3,0(r2)
   110f0:	e0bffd17 	ldw	r2,-12(fp)
   110f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   110f8:	e0bffc17 	ldw	r2,-16(fp)
   110fc:	10800017 	ldw	r2,0(r2)
   11100:	e0fffd17 	ldw	r3,-12(fp)
   11104:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11108:	e0bffc17 	ldw	r2,-16(fp)
   1110c:	e0fffd17 	ldw	r3,-12(fp)
   11110:	10c00015 	stw	r3,0(r2)

  return 0;  
   11114:	0005883a 	mov	r2,zero
}
   11118:	e037883a 	mov	sp,fp
   1111c:	dfc00117 	ldw	ra,4(sp)
   11120:	df000017 	ldw	fp,0(sp)
   11124:	dec00204 	addi	sp,sp,8
   11128:	f800283a 	ret

0001112c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1112c:	defffe04 	addi	sp,sp,-8
   11130:	dfc00115 	stw	ra,4(sp)
   11134:	df000015 	stw	fp,0(sp)
   11138:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1113c:	0009883a 	mov	r4,zero
   11140:	01420004 	movi	r5,2048
   11144:	0011cdc0 	call	11cdc <alt_icache_flush>
#endif
}
   11148:	e037883a 	mov	sp,fp
   1114c:	dfc00117 	ldw	ra,4(sp)
   11150:	df000017 	ldw	fp,0(sp)
   11154:	dec00204 	addi	sp,sp,8
   11158:	f800283a 	ret

0001115c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1115c:	defff904 	addi	sp,sp,-28
   11160:	dfc00615 	stw	ra,24(sp)
   11164:	df000515 	stw	fp,20(sp)
   11168:	df000504 	addi	fp,sp,20
   1116c:	e13ffc15 	stw	r4,-16(fp)
   11170:	e17ffd15 	stw	r5,-12(fp)
   11174:	e1bffe15 	stw	r6,-8(fp)
   11178:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1117c:	e0800217 	ldw	r2,8(fp)
   11180:	d8800015 	stw	r2,0(sp)
   11184:	e13ffc17 	ldw	r4,-16(fp)
   11188:	e17ffd17 	ldw	r5,-12(fp)
   1118c:	e1bffe17 	ldw	r6,-8(fp)
   11190:	e1ffff17 	ldw	r7,-4(fp)
   11194:	001133c0 	call	1133c <alt_iic_isr_register>
}  
   11198:	e037883a 	mov	sp,fp
   1119c:	dfc00117 	ldw	ra,4(sp)
   111a0:	df000017 	ldw	fp,0(sp)
   111a4:	dec00204 	addi	sp,sp,8
   111a8:	f800283a 	ret

000111ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   111ac:	defff904 	addi	sp,sp,-28
   111b0:	df000615 	stw	fp,24(sp)
   111b4:	df000604 	addi	fp,sp,24
   111b8:	e13ffe15 	stw	r4,-8(fp)
   111bc:	e17fff15 	stw	r5,-4(fp)
   111c0:	e0bfff17 	ldw	r2,-4(fp)
   111c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111c8:	0005303a 	rdctl	r2,status
   111cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111d0:	e0fffb17 	ldw	r3,-20(fp)
   111d4:	00bfff84 	movi	r2,-2
   111d8:	1884703a 	and	r2,r3,r2
   111dc:	1001703a 	wrctl	status,r2
  
  return context;
   111e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   111e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   111e8:	e0bffa17 	ldw	r2,-24(fp)
   111ec:	00c00044 	movi	r3,1
   111f0:	1884983a 	sll	r2,r3,r2
   111f4:	1007883a 	mov	r3,r2
   111f8:	00800074 	movhi	r2,1
   111fc:	109be204 	addi	r2,r2,28552
   11200:	10800017 	ldw	r2,0(r2)
   11204:	1886b03a 	or	r3,r3,r2
   11208:	00800074 	movhi	r2,1
   1120c:	109be204 	addi	r2,r2,28552
   11210:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11214:	00800074 	movhi	r2,1
   11218:	109be204 	addi	r2,r2,28552
   1121c:	10800017 	ldw	r2,0(r2)
   11220:	100170fa 	wrctl	ienable,r2
   11224:	e0bffc17 	ldw	r2,-16(fp)
   11228:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1122c:	e0bffd17 	ldw	r2,-12(fp)
   11230:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11234:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11238:	0001883a 	nop
}
   1123c:	e037883a 	mov	sp,fp
   11240:	df000017 	ldw	fp,0(sp)
   11244:	dec00104 	addi	sp,sp,4
   11248:	f800283a 	ret

0001124c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1124c:	defff904 	addi	sp,sp,-28
   11250:	df000615 	stw	fp,24(sp)
   11254:	df000604 	addi	fp,sp,24
   11258:	e13ffe15 	stw	r4,-8(fp)
   1125c:	e17fff15 	stw	r5,-4(fp)
   11260:	e0bfff17 	ldw	r2,-4(fp)
   11264:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11268:	0005303a 	rdctl	r2,status
   1126c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11270:	e0fffb17 	ldw	r3,-20(fp)
   11274:	00bfff84 	movi	r2,-2
   11278:	1884703a 	and	r2,r3,r2
   1127c:	1001703a 	wrctl	status,r2
  
  return context;
   11280:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11284:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11288:	e0bffa17 	ldw	r2,-24(fp)
   1128c:	00c00044 	movi	r3,1
   11290:	1884983a 	sll	r2,r3,r2
   11294:	0084303a 	nor	r2,zero,r2
   11298:	1007883a 	mov	r3,r2
   1129c:	00800074 	movhi	r2,1
   112a0:	109be204 	addi	r2,r2,28552
   112a4:	10800017 	ldw	r2,0(r2)
   112a8:	1886703a 	and	r3,r3,r2
   112ac:	00800074 	movhi	r2,1
   112b0:	109be204 	addi	r2,r2,28552
   112b4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   112b8:	00800074 	movhi	r2,1
   112bc:	109be204 	addi	r2,r2,28552
   112c0:	10800017 	ldw	r2,0(r2)
   112c4:	100170fa 	wrctl	ienable,r2
   112c8:	e0bffc17 	ldw	r2,-16(fp)
   112cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112d0:	e0bffd17 	ldw	r2,-12(fp)
   112d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   112d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   112dc:	0001883a 	nop
}
   112e0:	e037883a 	mov	sp,fp
   112e4:	df000017 	ldw	fp,0(sp)
   112e8:	dec00104 	addi	sp,sp,4
   112ec:	f800283a 	ret

000112f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   112f0:	defffc04 	addi	sp,sp,-16
   112f4:	df000315 	stw	fp,12(sp)
   112f8:	df000304 	addi	fp,sp,12
   112fc:	e13ffe15 	stw	r4,-8(fp)
   11300:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11304:	000530fa 	rdctl	r2,ienable
   11308:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1130c:	e0bfff17 	ldw	r2,-4(fp)
   11310:	00c00044 	movi	r3,1
   11314:	1884983a 	sll	r2,r3,r2
   11318:	1007883a 	mov	r3,r2
   1131c:	e0bffd17 	ldw	r2,-12(fp)
   11320:	1884703a 	and	r2,r3,r2
   11324:	1004c03a 	cmpne	r2,r2,zero
   11328:	10803fcc 	andi	r2,r2,255
}
   1132c:	e037883a 	mov	sp,fp
   11330:	df000017 	ldw	fp,0(sp)
   11334:	dec00104 	addi	sp,sp,4
   11338:	f800283a 	ret

0001133c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1133c:	defff504 	addi	sp,sp,-44
   11340:	dfc00a15 	stw	ra,40(sp)
   11344:	df000915 	stw	fp,36(sp)
   11348:	df000904 	addi	fp,sp,36
   1134c:	e13ffc15 	stw	r4,-16(fp)
   11350:	e17ffd15 	stw	r5,-12(fp)
   11354:	e1bffe15 	stw	r6,-8(fp)
   11358:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1135c:	00bffa84 	movi	r2,-22
   11360:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11364:	e0bffd17 	ldw	r2,-12(fp)
   11368:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1136c:	e0bff817 	ldw	r2,-32(fp)
   11370:	10800808 	cmpgei	r2,r2,32
   11374:	1000271e 	bne	r2,zero,11414 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11378:	0005303a 	rdctl	r2,status
   1137c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11380:	e0fffa17 	ldw	r3,-24(fp)
   11384:	00bfff84 	movi	r2,-2
   11388:	1884703a 	and	r2,r3,r2
   1138c:	1001703a 	wrctl	status,r2
  
  return context;
   11390:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11394:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   11398:	00800074 	movhi	r2,1
   1139c:	109bf304 	addi	r2,r2,28620
   113a0:	e0fff817 	ldw	r3,-32(fp)
   113a4:	180690fa 	slli	r3,r3,3
   113a8:	10c5883a 	add	r2,r2,r3
   113ac:	e0fffe17 	ldw	r3,-8(fp)
   113b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   113b4:	00800074 	movhi	r2,1
   113b8:	109bf304 	addi	r2,r2,28620
   113bc:	e0fff817 	ldw	r3,-32(fp)
   113c0:	180690fa 	slli	r3,r3,3
   113c4:	18c00104 	addi	r3,r3,4
   113c8:	10c5883a 	add	r2,r2,r3
   113cc:	e0ffff17 	ldw	r3,-4(fp)
   113d0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   113d4:	e0bffe17 	ldw	r2,-8(fp)
   113d8:	10000526 	beq	r2,zero,113f0 <alt_iic_isr_register+0xb4>
   113dc:	e0bff817 	ldw	r2,-32(fp)
   113e0:	e13ffc17 	ldw	r4,-16(fp)
   113e4:	100b883a 	mov	r5,r2
   113e8:	00111ac0 	call	111ac <alt_ic_irq_enable>
   113ec:	00000406 	br	11400 <alt_iic_isr_register+0xc4>
   113f0:	e0bff817 	ldw	r2,-32(fp)
   113f4:	e13ffc17 	ldw	r4,-16(fp)
   113f8:	100b883a 	mov	r5,r2
   113fc:	001124c0 	call	1124c <alt_ic_irq_disable>
   11400:	e0bff715 	stw	r2,-36(fp)
   11404:	e0bff917 	ldw	r2,-28(fp)
   11408:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1140c:	e0bffb17 	ldw	r2,-20(fp)
   11410:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11414:	e0bff717 	ldw	r2,-36(fp)
}
   11418:	e037883a 	mov	sp,fp
   1141c:	dfc00117 	ldw	ra,4(sp)
   11420:	df000017 	ldw	fp,0(sp)
   11424:	dec00204 	addi	sp,sp,8
   11428:	f800283a 	ret

0001142c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1142c:	defff804 	addi	sp,sp,-32
   11430:	dfc00715 	stw	ra,28(sp)
   11434:	df000615 	stw	fp,24(sp)
   11438:	dc000515 	stw	r16,20(sp)
   1143c:	df000604 	addi	fp,sp,24
   11440:	e13ffb15 	stw	r4,-20(fp)
   11444:	e17ffc15 	stw	r5,-16(fp)
   11448:	e1bffd15 	stw	r6,-12(fp)
   1144c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11450:	e13ffc17 	ldw	r4,-16(fp)
   11454:	e17ffd17 	ldw	r5,-12(fp)
   11458:	e1bffe17 	ldw	r6,-8(fp)
   1145c:	00116c80 	call	116c8 <open>
   11460:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   11464:	e0bffa17 	ldw	r2,-24(fp)
   11468:	10002216 	blt	r2,zero,114f4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1146c:	04000074 	movhi	r16,1
   11470:	8416d804 	addi	r16,r16,23392
   11474:	e0bffa17 	ldw	r2,-24(fp)
   11478:	1009883a 	mov	r4,r2
   1147c:	01400304 	movi	r5,12
   11480:	001526c0 	call	1526c <__mulsi3>
   11484:	8085883a 	add	r2,r16,r2
   11488:	10c00017 	ldw	r3,0(r2)
   1148c:	e0bffb17 	ldw	r2,-20(fp)
   11490:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11494:	04000074 	movhi	r16,1
   11498:	8416d804 	addi	r16,r16,23392
   1149c:	e0bffa17 	ldw	r2,-24(fp)
   114a0:	1009883a 	mov	r4,r2
   114a4:	01400304 	movi	r5,12
   114a8:	001526c0 	call	1526c <__mulsi3>
   114ac:	10800104 	addi	r2,r2,4
   114b0:	8085883a 	add	r2,r16,r2
   114b4:	10c00017 	ldw	r3,0(r2)
   114b8:	e0bffb17 	ldw	r2,-20(fp)
   114bc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   114c0:	04000074 	movhi	r16,1
   114c4:	8416d804 	addi	r16,r16,23392
   114c8:	e0bffa17 	ldw	r2,-24(fp)
   114cc:	1009883a 	mov	r4,r2
   114d0:	01400304 	movi	r5,12
   114d4:	001526c0 	call	1526c <__mulsi3>
   114d8:	10800204 	addi	r2,r2,8
   114dc:	8085883a 	add	r2,r16,r2
   114e0:	10c00017 	ldw	r3,0(r2)
   114e4:	e0bffb17 	ldw	r2,-20(fp)
   114e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   114ec:	e13ffa17 	ldw	r4,-24(fp)
   114f0:	00118280 	call	11828 <alt_release_fd>
  }
} 
   114f4:	e6ffff04 	addi	sp,fp,-4
   114f8:	dfc00217 	ldw	ra,8(sp)
   114fc:	df000117 	ldw	fp,4(sp)
   11500:	dc000017 	ldw	r16,0(sp)
   11504:	dec00304 	addi	sp,sp,12
   11508:	f800283a 	ret

0001150c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1150c:	defffb04 	addi	sp,sp,-20
   11510:	dfc00415 	stw	ra,16(sp)
   11514:	df000315 	stw	fp,12(sp)
   11518:	df000304 	addi	fp,sp,12
   1151c:	e13ffd15 	stw	r4,-12(fp)
   11520:	e17ffe15 	stw	r5,-8(fp)
   11524:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11528:	01000074 	movhi	r4,1
   1152c:	2116db04 	addi	r4,r4,23404
   11530:	e17ffd17 	ldw	r5,-12(fp)
   11534:	01800044 	movi	r6,1
   11538:	01c07fc4 	movi	r7,511
   1153c:	001142c0 	call	1142c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11540:	01000074 	movhi	r4,1
   11544:	2116d804 	addi	r4,r4,23392
   11548:	e17ffe17 	ldw	r5,-8(fp)
   1154c:	000d883a 	mov	r6,zero
   11550:	01c07fc4 	movi	r7,511
   11554:	001142c0 	call	1142c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11558:	01000074 	movhi	r4,1
   1155c:	2116de04 	addi	r4,r4,23416
   11560:	e17fff17 	ldw	r5,-4(fp)
   11564:	01800044 	movi	r6,1
   11568:	01c07fc4 	movi	r7,511
   1156c:	001142c0 	call	1142c <alt_open_fd>
}  
   11570:	e037883a 	mov	sp,fp
   11574:	dfc00117 	ldw	ra,4(sp)
   11578:	df000017 	ldw	fp,0(sp)
   1157c:	dec00204 	addi	sp,sp,8
   11580:	f800283a 	ret

00011584 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11584:	defffe04 	addi	sp,sp,-8
   11588:	dfc00115 	stw	ra,4(sp)
   1158c:	df000015 	stw	fp,0(sp)
   11590:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11594:	00800074 	movhi	r2,1
   11598:	10994804 	addi	r2,r2,25888
   1159c:	10800017 	ldw	r2,0(r2)
   115a0:	10000526 	beq	r2,zero,115b8 <alt_get_errno+0x34>
   115a4:	00800074 	movhi	r2,1
   115a8:	10994804 	addi	r2,r2,25888
   115ac:	10800017 	ldw	r2,0(r2)
   115b0:	103ee83a 	callr	r2
   115b4:	00000206 	br	115c0 <alt_get_errno+0x3c>
   115b8:	00800074 	movhi	r2,1
   115bc:	109be504 	addi	r2,r2,28564
}
   115c0:	e037883a 	mov	sp,fp
   115c4:	dfc00117 	ldw	ra,4(sp)
   115c8:	df000017 	ldw	fp,0(sp)
   115cc:	dec00204 	addi	sp,sp,8
   115d0:	f800283a 	ret

000115d4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   115d4:	defffb04 	addi	sp,sp,-20
   115d8:	dfc00415 	stw	ra,16(sp)
   115dc:	df000315 	stw	fp,12(sp)
   115e0:	dc000215 	stw	r16,8(sp)
   115e4:	df000304 	addi	fp,sp,12
   115e8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   115ec:	e0bffe17 	ldw	r2,-8(fp)
   115f0:	10800217 	ldw	r2,8(r2)
   115f4:	10d00034 	orhi	r3,r2,16384
   115f8:	e0bffe17 	ldw	r2,-8(fp)
   115fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11600:	e03ffd15 	stw	zero,-12(fp)
   11604:	00002306 	br	11694 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11608:	04000074 	movhi	r16,1
   1160c:	8416d804 	addi	r16,r16,23392
   11610:	e0bffd17 	ldw	r2,-12(fp)
   11614:	1009883a 	mov	r4,r2
   11618:	01400304 	movi	r5,12
   1161c:	001526c0 	call	1526c <__mulsi3>
   11620:	8085883a 	add	r2,r16,r2
   11624:	10c00017 	ldw	r3,0(r2)
   11628:	e0bffe17 	ldw	r2,-8(fp)
   1162c:	10800017 	ldw	r2,0(r2)
   11630:	1880151e 	bne	r3,r2,11688 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11634:	04000074 	movhi	r16,1
   11638:	8416d804 	addi	r16,r16,23392
   1163c:	e0bffd17 	ldw	r2,-12(fp)
   11640:	1009883a 	mov	r4,r2
   11644:	01400304 	movi	r5,12
   11648:	001526c0 	call	1526c <__mulsi3>
   1164c:	10800204 	addi	r2,r2,8
   11650:	8085883a 	add	r2,r16,r2
   11654:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11658:	10000b0e 	bge	r2,zero,11688 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1165c:	e13ffd17 	ldw	r4,-12(fp)
   11660:	01400304 	movi	r5,12
   11664:	001526c0 	call	1526c <__mulsi3>
   11668:	1007883a 	mov	r3,r2
   1166c:	00800074 	movhi	r2,1
   11670:	1096d804 	addi	r2,r2,23392
   11674:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11678:	e0bffe17 	ldw	r2,-8(fp)
   1167c:	18800226 	beq	r3,r2,11688 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11680:	00bffcc4 	movi	r2,-13
   11684:	00000a06 	br	116b0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11688:	e0bffd17 	ldw	r2,-12(fp)
   1168c:	10800044 	addi	r2,r2,1
   11690:	e0bffd15 	stw	r2,-12(fp)
   11694:	00800074 	movhi	r2,1
   11698:	10994704 	addi	r2,r2,25884
   1169c:	10800017 	ldw	r2,0(r2)
   116a0:	1007883a 	mov	r3,r2
   116a4:	e0bffd17 	ldw	r2,-12(fp)
   116a8:	18bfd72e 	bgeu	r3,r2,11608 <_gp+0xffff30fc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   116ac:	0005883a 	mov	r2,zero
}
   116b0:	e6ffff04 	addi	sp,fp,-4
   116b4:	dfc00217 	ldw	ra,8(sp)
   116b8:	df000117 	ldw	fp,4(sp)
   116bc:	dc000017 	ldw	r16,0(sp)
   116c0:	dec00304 	addi	sp,sp,12
   116c4:	f800283a 	ret

000116c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   116c8:	defff604 	addi	sp,sp,-40
   116cc:	dfc00915 	stw	ra,36(sp)
   116d0:	df000815 	stw	fp,32(sp)
   116d4:	df000804 	addi	fp,sp,32
   116d8:	e13ffd15 	stw	r4,-12(fp)
   116dc:	e17ffe15 	stw	r5,-8(fp)
   116e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   116e4:	00bfffc4 	movi	r2,-1
   116e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   116ec:	00bffb44 	movi	r2,-19
   116f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   116f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   116f8:	e13ffd17 	ldw	r4,-12(fp)
   116fc:	01400074 	movhi	r5,1
   11700:	29594504 	addi	r5,r5,25876
   11704:	0011a640 	call	11a64 <alt_find_dev>
   11708:	e0bff815 	stw	r2,-32(fp)
   1170c:	e0bff817 	ldw	r2,-32(fp)
   11710:	1000051e 	bne	r2,zero,11728 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11714:	e13ffd17 	ldw	r4,-12(fp)
   11718:	0011af40 	call	11af4 <alt_find_file>
   1171c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11720:	00800044 	movi	r2,1
   11724:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11728:	e0bff817 	ldw	r2,-32(fp)
   1172c:	10002b26 	beq	r2,zero,117dc <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11730:	e13ff817 	ldw	r4,-32(fp)
   11734:	0011c080 	call	11c08 <alt_get_fd>
   11738:	e0bff915 	stw	r2,-28(fp)
   1173c:	e0bff917 	ldw	r2,-28(fp)
   11740:	1000030e 	bge	r2,zero,11750 <open+0x88>
    {
      status = index;
   11744:	e0bff917 	ldw	r2,-28(fp)
   11748:	e0bffa15 	stw	r2,-24(fp)
   1174c:	00002506 	br	117e4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   11750:	e13ff917 	ldw	r4,-28(fp)
   11754:	01400304 	movi	r5,12
   11758:	001526c0 	call	1526c <__mulsi3>
   1175c:	1007883a 	mov	r3,r2
   11760:	00800074 	movhi	r2,1
   11764:	1096d804 	addi	r2,r2,23392
   11768:	1885883a 	add	r2,r3,r2
   1176c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11770:	e0fffe17 	ldw	r3,-8(fp)
   11774:	00900034 	movhi	r2,16384
   11778:	10bfffc4 	addi	r2,r2,-1
   1177c:	1886703a 	and	r3,r3,r2
   11780:	e0bffc17 	ldw	r2,-16(fp)
   11784:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11788:	e0bffb17 	ldw	r2,-20(fp)
   1178c:	1000051e 	bne	r2,zero,117a4 <open+0xdc>
   11790:	e13ffc17 	ldw	r4,-16(fp)
   11794:	00115d40 	call	115d4 <alt_file_locked>
   11798:	e0bffa15 	stw	r2,-24(fp)
   1179c:	e0bffa17 	ldw	r2,-24(fp)
   117a0:	10001016 	blt	r2,zero,117e4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   117a4:	e0bff817 	ldw	r2,-32(fp)
   117a8:	10800317 	ldw	r2,12(r2)
   117ac:	10000826 	beq	r2,zero,117d0 <open+0x108>
   117b0:	e0bff817 	ldw	r2,-32(fp)
   117b4:	10800317 	ldw	r2,12(r2)
   117b8:	e13ffc17 	ldw	r4,-16(fp)
   117bc:	e17ffd17 	ldw	r5,-12(fp)
   117c0:	e1bffe17 	ldw	r6,-8(fp)
   117c4:	e1ffff17 	ldw	r7,-4(fp)
   117c8:	103ee83a 	callr	r2
   117cc:	00000106 	br	117d4 <open+0x10c>
   117d0:	0005883a 	mov	r2,zero
   117d4:	e0bffa15 	stw	r2,-24(fp)
   117d8:	00000206 	br	117e4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   117dc:	00bffb44 	movi	r2,-19
   117e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   117e4:	e0bffa17 	ldw	r2,-24(fp)
   117e8:	1000090e 	bge	r2,zero,11810 <open+0x148>
  {
    alt_release_fd (index);  
   117ec:	e13ff917 	ldw	r4,-28(fp)
   117f0:	00118280 	call	11828 <alt_release_fd>
    ALT_ERRNO = -status;
   117f4:	00115840 	call	11584 <alt_get_errno>
   117f8:	1007883a 	mov	r3,r2
   117fc:	e0bffa17 	ldw	r2,-24(fp)
   11800:	0085c83a 	sub	r2,zero,r2
   11804:	18800015 	stw	r2,0(r3)
    return -1;
   11808:	00bfffc4 	movi	r2,-1
   1180c:	00000106 	br	11814 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   11810:	e0bff917 	ldw	r2,-28(fp)
}
   11814:	e037883a 	mov	sp,fp
   11818:	dfc00117 	ldw	ra,4(sp)
   1181c:	df000017 	ldw	fp,0(sp)
   11820:	dec00204 	addi	sp,sp,8
   11824:	f800283a 	ret

00011828 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11828:	defffc04 	addi	sp,sp,-16
   1182c:	dfc00315 	stw	ra,12(sp)
   11830:	df000215 	stw	fp,8(sp)
   11834:	dc000115 	stw	r16,4(sp)
   11838:	df000204 	addi	fp,sp,8
   1183c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   11840:	e0bffe17 	ldw	r2,-8(fp)
   11844:	108000d0 	cmplti	r2,r2,3
   11848:	1000111e 	bne	r2,zero,11890 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1184c:	04000074 	movhi	r16,1
   11850:	8416d804 	addi	r16,r16,23392
   11854:	e0bffe17 	ldw	r2,-8(fp)
   11858:	1009883a 	mov	r4,r2
   1185c:	01400304 	movi	r5,12
   11860:	001526c0 	call	1526c <__mulsi3>
   11864:	10800204 	addi	r2,r2,8
   11868:	8085883a 	add	r2,r16,r2
   1186c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11870:	04000074 	movhi	r16,1
   11874:	8416d804 	addi	r16,r16,23392
   11878:	e0bffe17 	ldw	r2,-8(fp)
   1187c:	1009883a 	mov	r4,r2
   11880:	01400304 	movi	r5,12
   11884:	001526c0 	call	1526c <__mulsi3>
   11888:	8085883a 	add	r2,r16,r2
   1188c:	10000015 	stw	zero,0(r2)
  }
}
   11890:	e6ffff04 	addi	sp,fp,-4
   11894:	dfc00217 	ldw	ra,8(sp)
   11898:	df000117 	ldw	fp,4(sp)
   1189c:	dc000017 	ldw	r16,0(sp)
   118a0:	dec00304 	addi	sp,sp,12
   118a4:	f800283a 	ret

000118a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   118a8:	defffa04 	addi	sp,sp,-24
   118ac:	df000515 	stw	fp,20(sp)
   118b0:	df000504 	addi	fp,sp,20
   118b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118b8:	0005303a 	rdctl	r2,status
   118bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118c0:	e0fffc17 	ldw	r3,-16(fp)
   118c4:	00bfff84 	movi	r2,-2
   118c8:	1884703a 	and	r2,r3,r2
   118cc:	1001703a 	wrctl	status,r2
  
  return context;
   118d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   118d4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   118d8:	e0bfff17 	ldw	r2,-4(fp)
   118dc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   118e0:	e0bffd17 	ldw	r2,-12(fp)
   118e4:	10800017 	ldw	r2,0(r2)
   118e8:	e0fffd17 	ldw	r3,-12(fp)
   118ec:	18c00117 	ldw	r3,4(r3)
   118f0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   118f4:	e0bffd17 	ldw	r2,-12(fp)
   118f8:	10800117 	ldw	r2,4(r2)
   118fc:	e0fffd17 	ldw	r3,-12(fp)
   11900:	18c00017 	ldw	r3,0(r3)
   11904:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11908:	e0bffd17 	ldw	r2,-12(fp)
   1190c:	e0fffd17 	ldw	r3,-12(fp)
   11910:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11914:	e0bffd17 	ldw	r2,-12(fp)
   11918:	e0fffd17 	ldw	r3,-12(fp)
   1191c:	10c00015 	stw	r3,0(r2)
   11920:	e0bffb17 	ldw	r2,-20(fp)
   11924:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11928:	e0bffe17 	ldw	r2,-8(fp)
   1192c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11930:	e037883a 	mov	sp,fp
   11934:	df000017 	ldw	fp,0(sp)
   11938:	dec00104 	addi	sp,sp,4
   1193c:	f800283a 	ret

00011940 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11940:	defffb04 	addi	sp,sp,-20
   11944:	dfc00415 	stw	ra,16(sp)
   11948:	df000315 	stw	fp,12(sp)
   1194c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11950:	d0a00717 	ldw	r2,-32740(gp)
   11954:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11958:	d0a2a117 	ldw	r2,-30076(gp)
   1195c:	10800044 	addi	r2,r2,1
   11960:	d0a2a115 	stw	r2,-30076(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11964:	00002e06 	br	11a20 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11968:	e0bffd17 	ldw	r2,-12(fp)
   1196c:	10800017 	ldw	r2,0(r2)
   11970:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11974:	e0bffd17 	ldw	r2,-12(fp)
   11978:	10800403 	ldbu	r2,16(r2)
   1197c:	10803fcc 	andi	r2,r2,255
   11980:	10000426 	beq	r2,zero,11994 <alt_tick+0x54>
   11984:	d0a2a117 	ldw	r2,-30076(gp)
   11988:	1000021e 	bne	r2,zero,11994 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1198c:	e0bffd17 	ldw	r2,-12(fp)
   11990:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11994:	e0bffd17 	ldw	r2,-12(fp)
   11998:	10800217 	ldw	r2,8(r2)
   1199c:	d0e2a117 	ldw	r3,-30076(gp)
   119a0:	18801d36 	bltu	r3,r2,11a18 <alt_tick+0xd8>
   119a4:	e0bffd17 	ldw	r2,-12(fp)
   119a8:	10800403 	ldbu	r2,16(r2)
   119ac:	10803fcc 	andi	r2,r2,255
   119b0:	1000191e 	bne	r2,zero,11a18 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   119b4:	e0bffd17 	ldw	r2,-12(fp)
   119b8:	10800317 	ldw	r2,12(r2)
   119bc:	e0fffd17 	ldw	r3,-12(fp)
   119c0:	18c00517 	ldw	r3,20(r3)
   119c4:	1809883a 	mov	r4,r3
   119c8:	103ee83a 	callr	r2
   119cc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   119d0:	e0bfff17 	ldw	r2,-4(fp)
   119d4:	1000031e 	bne	r2,zero,119e4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   119d8:	e13ffd17 	ldw	r4,-12(fp)
   119dc:	00118a80 	call	118a8 <alt_alarm_stop>
   119e0:	00000d06 	br	11a18 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   119e4:	e0bffd17 	ldw	r2,-12(fp)
   119e8:	10c00217 	ldw	r3,8(r2)
   119ec:	e0bfff17 	ldw	r2,-4(fp)
   119f0:	1887883a 	add	r3,r3,r2
   119f4:	e0bffd17 	ldw	r2,-12(fp)
   119f8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   119fc:	e0bffd17 	ldw	r2,-12(fp)
   11a00:	10c00217 	ldw	r3,8(r2)
   11a04:	d0a2a117 	ldw	r2,-30076(gp)
   11a08:	1880032e 	bgeu	r3,r2,11a18 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11a0c:	e0bffd17 	ldw	r2,-12(fp)
   11a10:	00c00044 	movi	r3,1
   11a14:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11a18:	e0bffe17 	ldw	r2,-8(fp)
   11a1c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11a20:	e0fffd17 	ldw	r3,-12(fp)
   11a24:	d0a00704 	addi	r2,gp,-32740
   11a28:	18bfcf1e 	bne	r3,r2,11968 <_gp+0xffff345c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11a2c:	0001883a 	nop
}
   11a30:	e037883a 	mov	sp,fp
   11a34:	dfc00117 	ldw	ra,4(sp)
   11a38:	df000017 	ldw	fp,0(sp)
   11a3c:	dec00204 	addi	sp,sp,8
   11a40:	f800283a 	ret

00011a44 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11a44:	deffff04 	addi	sp,sp,-4
   11a48:	df000015 	stw	fp,0(sp)
   11a4c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11a50:	000170fa 	wrctl	ienable,zero
}
   11a54:	e037883a 	mov	sp,fp
   11a58:	df000017 	ldw	fp,0(sp)
   11a5c:	dec00104 	addi	sp,sp,4
   11a60:	f800283a 	ret

00011a64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11a64:	defffa04 	addi	sp,sp,-24
   11a68:	dfc00515 	stw	ra,20(sp)
   11a6c:	df000415 	stw	fp,16(sp)
   11a70:	df000404 	addi	fp,sp,16
   11a74:	e13ffe15 	stw	r4,-8(fp)
   11a78:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11a7c:	e0bfff17 	ldw	r2,-4(fp)
   11a80:	10800017 	ldw	r2,0(r2)
   11a84:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11a88:	e13ffe17 	ldw	r4,-8(fp)
   11a8c:	001376c0 	call	1376c <strlen>
   11a90:	10800044 	addi	r2,r2,1
   11a94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11a98:	00000d06 	br	11ad0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11a9c:	e0bffc17 	ldw	r2,-16(fp)
   11aa0:	10c00217 	ldw	r3,8(r2)
   11aa4:	e0bffd17 	ldw	r2,-12(fp)
   11aa8:	1809883a 	mov	r4,r3
   11aac:	e17ffe17 	ldw	r5,-8(fp)
   11ab0:	100d883a 	mov	r6,r2
   11ab4:	0012cac0 	call	12cac <memcmp>
   11ab8:	1000021e 	bne	r2,zero,11ac4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11abc:	e0bffc17 	ldw	r2,-16(fp)
   11ac0:	00000706 	br	11ae0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11ac4:	e0bffc17 	ldw	r2,-16(fp)
   11ac8:	10800017 	ldw	r2,0(r2)
   11acc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11ad0:	e0fffc17 	ldw	r3,-16(fp)
   11ad4:	e0bfff17 	ldw	r2,-4(fp)
   11ad8:	18bff01e 	bne	r3,r2,11a9c <_gp+0xffff3590>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11adc:	0005883a 	mov	r2,zero
}
   11ae0:	e037883a 	mov	sp,fp
   11ae4:	dfc00117 	ldw	ra,4(sp)
   11ae8:	df000017 	ldw	fp,0(sp)
   11aec:	dec00204 	addi	sp,sp,8
   11af0:	f800283a 	ret

00011af4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11af4:	defffb04 	addi	sp,sp,-20
   11af8:	dfc00415 	stw	ra,16(sp)
   11afc:	df000315 	stw	fp,12(sp)
   11b00:	df000304 	addi	fp,sp,12
   11b04:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11b08:	00800074 	movhi	r2,1
   11b0c:	10994304 	addi	r2,r2,25868
   11b10:	10800017 	ldw	r2,0(r2)
   11b14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11b18:	00003106 	br	11be0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   11b1c:	e0bffd17 	ldw	r2,-12(fp)
   11b20:	10800217 	ldw	r2,8(r2)
   11b24:	1009883a 	mov	r4,r2
   11b28:	001376c0 	call	1376c <strlen>
   11b2c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11b30:	e0bffd17 	ldw	r2,-12(fp)
   11b34:	10c00217 	ldw	r3,8(r2)
   11b38:	e0bffe17 	ldw	r2,-8(fp)
   11b3c:	10bfffc4 	addi	r2,r2,-1
   11b40:	1885883a 	add	r2,r3,r2
   11b44:	10800003 	ldbu	r2,0(r2)
   11b48:	10803fcc 	andi	r2,r2,255
   11b4c:	1080201c 	xori	r2,r2,128
   11b50:	10bfe004 	addi	r2,r2,-128
   11b54:	10800bd8 	cmpnei	r2,r2,47
   11b58:	1000031e 	bne	r2,zero,11b68 <alt_find_file+0x74>
    {
      len -= 1;
   11b5c:	e0bffe17 	ldw	r2,-8(fp)
   11b60:	10bfffc4 	addi	r2,r2,-1
   11b64:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11b68:	e0bffe17 	ldw	r2,-8(fp)
   11b6c:	e0ffff17 	ldw	r3,-4(fp)
   11b70:	1885883a 	add	r2,r3,r2
   11b74:	10800003 	ldbu	r2,0(r2)
   11b78:	10803fcc 	andi	r2,r2,255
   11b7c:	1080201c 	xori	r2,r2,128
   11b80:	10bfe004 	addi	r2,r2,-128
   11b84:	10800be0 	cmpeqi	r2,r2,47
   11b88:	1000081e 	bne	r2,zero,11bac <alt_find_file+0xb8>
   11b8c:	e0bffe17 	ldw	r2,-8(fp)
   11b90:	e0ffff17 	ldw	r3,-4(fp)
   11b94:	1885883a 	add	r2,r3,r2
   11b98:	10800003 	ldbu	r2,0(r2)
   11b9c:	10803fcc 	andi	r2,r2,255
   11ba0:	1080201c 	xori	r2,r2,128
   11ba4:	10bfe004 	addi	r2,r2,-128
   11ba8:	10000a1e 	bne	r2,zero,11bd4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   11bac:	e0bffd17 	ldw	r2,-12(fp)
   11bb0:	10c00217 	ldw	r3,8(r2)
   11bb4:	e0bffe17 	ldw	r2,-8(fp)
   11bb8:	1809883a 	mov	r4,r3
   11bbc:	e17fff17 	ldw	r5,-4(fp)
   11bc0:	100d883a 	mov	r6,r2
   11bc4:	0012cac0 	call	12cac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11bc8:	1000021e 	bne	r2,zero,11bd4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11bcc:	e0bffd17 	ldw	r2,-12(fp)
   11bd0:	00000806 	br	11bf4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   11bd4:	e0bffd17 	ldw	r2,-12(fp)
   11bd8:	10800017 	ldw	r2,0(r2)
   11bdc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11be0:	e0fffd17 	ldw	r3,-12(fp)
   11be4:	00800074 	movhi	r2,1
   11be8:	10994304 	addi	r2,r2,25868
   11bec:	18bfcb1e 	bne	r3,r2,11b1c <_gp+0xffff3610>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11bf0:	0005883a 	mov	r2,zero
}
   11bf4:	e037883a 	mov	sp,fp
   11bf8:	dfc00117 	ldw	ra,4(sp)
   11bfc:	df000017 	ldw	fp,0(sp)
   11c00:	dec00204 	addi	sp,sp,8
   11c04:	f800283a 	ret

00011c08 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11c08:	defffa04 	addi	sp,sp,-24
   11c0c:	dfc00515 	stw	ra,20(sp)
   11c10:	df000415 	stw	fp,16(sp)
   11c14:	dc000315 	stw	r16,12(sp)
   11c18:	df000404 	addi	fp,sp,16
   11c1c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11c20:	00bffa04 	movi	r2,-24
   11c24:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11c28:	e03ffc15 	stw	zero,-16(fp)
   11c2c:	00002106 	br	11cb4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   11c30:	04000074 	movhi	r16,1
   11c34:	8416d804 	addi	r16,r16,23392
   11c38:	e0bffc17 	ldw	r2,-16(fp)
   11c3c:	1009883a 	mov	r4,r2
   11c40:	01400304 	movi	r5,12
   11c44:	001526c0 	call	1526c <__mulsi3>
   11c48:	8085883a 	add	r2,r16,r2
   11c4c:	10800017 	ldw	r2,0(r2)
   11c50:	1000151e 	bne	r2,zero,11ca8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   11c54:	04000074 	movhi	r16,1
   11c58:	8416d804 	addi	r16,r16,23392
   11c5c:	e0bffc17 	ldw	r2,-16(fp)
   11c60:	1009883a 	mov	r4,r2
   11c64:	01400304 	movi	r5,12
   11c68:	001526c0 	call	1526c <__mulsi3>
   11c6c:	8085883a 	add	r2,r16,r2
   11c70:	e0fffe17 	ldw	r3,-8(fp)
   11c74:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11c78:	00800074 	movhi	r2,1
   11c7c:	10994704 	addi	r2,r2,25884
   11c80:	10c00017 	ldw	r3,0(r2)
   11c84:	e0bffc17 	ldw	r2,-16(fp)
   11c88:	1880040e 	bge	r3,r2,11c9c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   11c8c:	00800074 	movhi	r2,1
   11c90:	10994704 	addi	r2,r2,25884
   11c94:	e0fffc17 	ldw	r3,-16(fp)
   11c98:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   11c9c:	e0bffc17 	ldw	r2,-16(fp)
   11ca0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11ca4:	00000606 	br	11cc0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11ca8:	e0bffc17 	ldw	r2,-16(fp)
   11cac:	10800044 	addi	r2,r2,1
   11cb0:	e0bffc15 	stw	r2,-16(fp)
   11cb4:	e0bffc17 	ldw	r2,-16(fp)
   11cb8:	10800810 	cmplti	r2,r2,32
   11cbc:	103fdc1e 	bne	r2,zero,11c30 <_gp+0xffff3724>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11cc0:	e0bffd17 	ldw	r2,-12(fp)
}
   11cc4:	e6ffff04 	addi	sp,fp,-4
   11cc8:	dfc00217 	ldw	ra,8(sp)
   11ccc:	df000117 	ldw	fp,4(sp)
   11cd0:	dc000017 	ldw	r16,0(sp)
   11cd4:	dec00304 	addi	sp,sp,12
   11cd8:	f800283a 	ret

00011cdc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11cdc:	defffb04 	addi	sp,sp,-20
   11ce0:	df000415 	stw	fp,16(sp)
   11ce4:	df000404 	addi	fp,sp,16
   11ce8:	e13ffe15 	stw	r4,-8(fp)
   11cec:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11cf0:	e0bfff17 	ldw	r2,-4(fp)
   11cf4:	10820070 	cmpltui	r2,r2,2049
   11cf8:	1000021e 	bne	r2,zero,11d04 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11cfc:	00820004 	movi	r2,2048
   11d00:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11d04:	e0fffe17 	ldw	r3,-8(fp)
   11d08:	e0bfff17 	ldw	r2,-4(fp)
   11d0c:	1885883a 	add	r2,r3,r2
   11d10:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11d14:	e0bffe17 	ldw	r2,-8(fp)
   11d18:	e0bffc15 	stw	r2,-16(fp)
   11d1c:	00000506 	br	11d34 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11d20:	e0bffc17 	ldw	r2,-16(fp)
   11d24:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11d28:	e0bffc17 	ldw	r2,-16(fp)
   11d2c:	10800804 	addi	r2,r2,32
   11d30:	e0bffc15 	stw	r2,-16(fp)
   11d34:	e0fffc17 	ldw	r3,-16(fp)
   11d38:	e0bffd17 	ldw	r2,-12(fp)
   11d3c:	18bff836 	bltu	r3,r2,11d20 <_gp+0xffff3814>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11d40:	e0bffe17 	ldw	r2,-8(fp)
   11d44:	108007cc 	andi	r2,r2,31
   11d48:	10000226 	beq	r2,zero,11d54 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11d4c:	e0bffc17 	ldw	r2,-16(fp)
   11d50:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11d54:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11d58:	e037883a 	mov	sp,fp
   11d5c:	df000017 	ldw	fp,0(sp)
   11d60:	dec00104 	addi	sp,sp,4
   11d64:	f800283a 	ret

00011d68 <exit>:
   11d68:	defffe04 	addi	sp,sp,-8
   11d6c:	000b883a 	mov	r5,zero
   11d70:	dc000015 	stw	r16,0(sp)
   11d74:	dfc00115 	stw	ra,4(sp)
   11d78:	2021883a 	mov	r16,r4
   11d7c:	0013aac0 	call	13aac <__call_exitprocs>
   11d80:	00800074 	movhi	r2,1
   11d84:	10994c04 	addi	r2,r2,25904
   11d88:	11000017 	ldw	r4,0(r2)
   11d8c:	20800f17 	ldw	r2,60(r4)
   11d90:	10000126 	beq	r2,zero,11d98 <exit+0x30>
   11d94:	103ee83a 	callr	r2
   11d98:	8009883a 	mov	r4,r16
   11d9c:	00152940 	call	15294 <_exit>

00011da0 <_fputs_r>:
   11da0:	defff804 	addi	sp,sp,-32
   11da4:	dc400615 	stw	r17,24(sp)
   11da8:	2023883a 	mov	r17,r4
   11dac:	2809883a 	mov	r4,r5
   11db0:	dc000515 	stw	r16,20(sp)
   11db4:	dfc00715 	stw	ra,28(sp)
   11db8:	3021883a 	mov	r16,r6
   11dbc:	d9400315 	stw	r5,12(sp)
   11dc0:	001376c0 	call	1376c <strlen>
   11dc4:	d8800215 	stw	r2,8(sp)
   11dc8:	d8800415 	stw	r2,16(sp)
   11dcc:	d8800304 	addi	r2,sp,12
   11dd0:	d8800015 	stw	r2,0(sp)
   11dd4:	00800044 	movi	r2,1
   11dd8:	d8800115 	stw	r2,4(sp)
   11ddc:	88000226 	beq	r17,zero,11de8 <_fputs_r+0x48>
   11de0:	88800e17 	ldw	r2,56(r17)
   11de4:	10001226 	beq	r2,zero,11e30 <_fputs_r+0x90>
   11de8:	8080030b 	ldhu	r2,12(r16)
   11dec:	10c8000c 	andi	r3,r2,8192
   11df0:	1800061e 	bne	r3,zero,11e0c <_fputs_r+0x6c>
   11df4:	81001917 	ldw	r4,100(r16)
   11df8:	00f7ffc4 	movi	r3,-8193
   11dfc:	10880014 	ori	r2,r2,8192
   11e00:	20c6703a 	and	r3,r4,r3
   11e04:	8080030d 	sth	r2,12(r16)
   11e08:	80c01915 	stw	r3,100(r16)
   11e0c:	8809883a 	mov	r4,r17
   11e10:	800b883a 	mov	r5,r16
   11e14:	d80d883a 	mov	r6,sp
   11e18:	0011e580 	call	11e58 <__sfvwrite_r>
   11e1c:	dfc00717 	ldw	ra,28(sp)
   11e20:	dc400617 	ldw	r17,24(sp)
   11e24:	dc000517 	ldw	r16,20(sp)
   11e28:	dec00804 	addi	sp,sp,32
   11e2c:	f800283a 	ret
   11e30:	8809883a 	mov	r4,r17
   11e34:	00142340 	call	14234 <__sinit>
   11e38:	003feb06 	br	11de8 <_gp+0xffff38dc>

00011e3c <fputs>:
   11e3c:	00c00074 	movhi	r3,1
   11e40:	18d94d04 	addi	r3,r3,25908
   11e44:	2005883a 	mov	r2,r4
   11e48:	19000017 	ldw	r4,0(r3)
   11e4c:	280d883a 	mov	r6,r5
   11e50:	100b883a 	mov	r5,r2
   11e54:	0011da01 	jmpi	11da0 <_fputs_r>

00011e58 <__sfvwrite_r>:
   11e58:	30800217 	ldw	r2,8(r6)
   11e5c:	10006726 	beq	r2,zero,11ffc <__sfvwrite_r+0x1a4>
   11e60:	defff404 	addi	sp,sp,-48
   11e64:	dd000615 	stw	r20,24(sp)
   11e68:	2029883a 	mov	r20,r4
   11e6c:	2900030b 	ldhu	r4,12(r5)
   11e70:	ddc00915 	stw	r23,36(sp)
   11e74:	dc000215 	stw	r16,8(sp)
   11e78:	dfc00b15 	stw	ra,44(sp)
   11e7c:	df000a15 	stw	fp,40(sp)
   11e80:	dd800815 	stw	r22,32(sp)
   11e84:	dd400715 	stw	r21,28(sp)
   11e88:	dcc00515 	stw	r19,20(sp)
   11e8c:	dc800415 	stw	r18,16(sp)
   11e90:	dc400315 	stw	r17,12(sp)
   11e94:	2080020c 	andi	r2,r4,8
   11e98:	2821883a 	mov	r16,r5
   11e9c:	302f883a 	mov	r23,r6
   11ea0:	10002726 	beq	r2,zero,11f40 <__sfvwrite_r+0xe8>
   11ea4:	28800417 	ldw	r2,16(r5)
   11ea8:	10002526 	beq	r2,zero,11f40 <__sfvwrite_r+0xe8>
   11eac:	2080008c 	andi	r2,r4,2
   11eb0:	bc400017 	ldw	r17,0(r23)
   11eb4:	10002a26 	beq	r2,zero,11f60 <__sfvwrite_r+0x108>
   11eb8:	05600034 	movhi	r21,32768
   11ebc:	0027883a 	mov	r19,zero
   11ec0:	0025883a 	mov	r18,zero
   11ec4:	ad7f0004 	addi	r21,r21,-1024
   11ec8:	980d883a 	mov	r6,r19
   11ecc:	a009883a 	mov	r4,r20
   11ed0:	90004626 	beq	r18,zero,11fec <__sfvwrite_r+0x194>
   11ed4:	900f883a 	mov	r7,r18
   11ed8:	81400717 	ldw	r5,28(r16)
   11edc:	ac80022e 	bgeu	r21,r18,11ee8 <__sfvwrite_r+0x90>
   11ee0:	01e00034 	movhi	r7,32768
   11ee4:	39ff0004 	addi	r7,r7,-1024
   11ee8:	80800917 	ldw	r2,36(r16)
   11eec:	103ee83a 	callr	r2
   11ef0:	0080550e 	bge	zero,r2,12048 <__sfvwrite_r+0x1f0>
   11ef4:	b8c00217 	ldw	r3,8(r23)
   11ef8:	98a7883a 	add	r19,r19,r2
   11efc:	90a5c83a 	sub	r18,r18,r2
   11f00:	1885c83a 	sub	r2,r3,r2
   11f04:	b8800215 	stw	r2,8(r23)
   11f08:	103fef1e 	bne	r2,zero,11ec8 <_gp+0xffff39bc>
   11f0c:	0005883a 	mov	r2,zero
   11f10:	dfc00b17 	ldw	ra,44(sp)
   11f14:	df000a17 	ldw	fp,40(sp)
   11f18:	ddc00917 	ldw	r23,36(sp)
   11f1c:	dd800817 	ldw	r22,32(sp)
   11f20:	dd400717 	ldw	r21,28(sp)
   11f24:	dd000617 	ldw	r20,24(sp)
   11f28:	dcc00517 	ldw	r19,20(sp)
   11f2c:	dc800417 	ldw	r18,16(sp)
   11f30:	dc400317 	ldw	r17,12(sp)
   11f34:	dc000217 	ldw	r16,8(sp)
   11f38:	dec00c04 	addi	sp,sp,48
   11f3c:	f800283a 	ret
   11f40:	a009883a 	mov	r4,r20
   11f44:	800b883a 	mov	r5,r16
   11f48:	00139580 	call	13958 <__swsetup_r>
   11f4c:	1000ef1e 	bne	r2,zero,1230c <__sfvwrite_r+0x4b4>
   11f50:	8100030b 	ldhu	r4,12(r16)
   11f54:	bc400017 	ldw	r17,0(r23)
   11f58:	2080008c 	andi	r2,r4,2
   11f5c:	103fd61e 	bne	r2,zero,11eb8 <_gp+0xffff39ac>
   11f60:	2080004c 	andi	r2,r4,1
   11f64:	10003d1e 	bne	r2,zero,1205c <__sfvwrite_r+0x204>
   11f68:	0039883a 	mov	fp,zero
   11f6c:	0025883a 	mov	r18,zero
   11f70:	90001a26 	beq	r18,zero,11fdc <__sfvwrite_r+0x184>
   11f74:	2080800c 	andi	r2,r4,512
   11f78:	85800217 	ldw	r22,8(r16)
   11f7c:	10007926 	beq	r2,zero,12164 <__sfvwrite_r+0x30c>
   11f80:	b027883a 	mov	r19,r22
   11f84:	95809736 	bltu	r18,r22,121e4 <__sfvwrite_r+0x38c>
   11f88:	2081200c 	andi	r2,r4,1152
   11f8c:	1000a21e 	bne	r2,zero,12218 <__sfvwrite_r+0x3c0>
   11f90:	81000017 	ldw	r4,0(r16)
   11f94:	e00b883a 	mov	r5,fp
   11f98:	980d883a 	mov	r6,r19
   11f9c:	0012e600 	call	12e60 <memmove>
   11fa0:	81000217 	ldw	r4,8(r16)
   11fa4:	81400017 	ldw	r5,0(r16)
   11fa8:	9005883a 	mov	r2,r18
   11fac:	2587c83a 	sub	r3,r4,r22
   11fb0:	2ce7883a 	add	r19,r5,r19
   11fb4:	80c00215 	stw	r3,8(r16)
   11fb8:	84c00015 	stw	r19,0(r16)
   11fbc:	b8c00217 	ldw	r3,8(r23)
   11fc0:	e0b9883a 	add	fp,fp,r2
   11fc4:	90a5c83a 	sub	r18,r18,r2
   11fc8:	1885c83a 	sub	r2,r3,r2
   11fcc:	b8800215 	stw	r2,8(r23)
   11fd0:	103fce26 	beq	r2,zero,11f0c <_gp+0xffff3a00>
   11fd4:	8100030b 	ldhu	r4,12(r16)
   11fd8:	903fe61e 	bne	r18,zero,11f74 <_gp+0xffff3a68>
   11fdc:	8f000017 	ldw	fp,0(r17)
   11fe0:	8c800117 	ldw	r18,4(r17)
   11fe4:	8c400204 	addi	r17,r17,8
   11fe8:	003fe106 	br	11f70 <_gp+0xffff3a64>
   11fec:	8cc00017 	ldw	r19,0(r17)
   11ff0:	8c800117 	ldw	r18,4(r17)
   11ff4:	8c400204 	addi	r17,r17,8
   11ff8:	003fb306 	br	11ec8 <_gp+0xffff39bc>
   11ffc:	0005883a 	mov	r2,zero
   12000:	f800283a 	ret
   12004:	00a00034 	movhi	r2,32768
   12008:	10bfffc4 	addi	r2,r2,-1
   1200c:	9009883a 	mov	r4,r18
   12010:	1480012e 	bgeu	r2,r18,12018 <__sfvwrite_r+0x1c0>
   12014:	1009883a 	mov	r4,r2
   12018:	980b883a 	mov	r5,r19
   1201c:	00151ac0 	call	151ac <__divsi3>
   12020:	9809883a 	mov	r4,r19
   12024:	100b883a 	mov	r5,r2
   12028:	001526c0 	call	1526c <__mulsi3>
   1202c:	81400717 	ldw	r5,28(r16)
   12030:	80c00917 	ldw	r3,36(r16)
   12034:	a009883a 	mov	r4,r20
   12038:	e00d883a 	mov	r6,fp
   1203c:	100f883a 	mov	r7,r2
   12040:	183ee83a 	callr	r3
   12044:	00bfdd16 	blt	zero,r2,11fbc <_gp+0xffff3ab0>
   12048:	8080030b 	ldhu	r2,12(r16)
   1204c:	10801014 	ori	r2,r2,64
   12050:	8080030d 	sth	r2,12(r16)
   12054:	00bfffc4 	movi	r2,-1
   12058:	003fad06 	br	11f10 <_gp+0xffff3a04>
   1205c:	0027883a 	mov	r19,zero
   12060:	0011883a 	mov	r8,zero
   12064:	0039883a 	mov	fp,zero
   12068:	0025883a 	mov	r18,zero
   1206c:	90001f26 	beq	r18,zero,120ec <__sfvwrite_r+0x294>
   12070:	40006026 	beq	r8,zero,121f4 <__sfvwrite_r+0x39c>
   12074:	982b883a 	mov	r21,r19
   12078:	94c0012e 	bgeu	r18,r19,12080 <__sfvwrite_r+0x228>
   1207c:	902b883a 	mov	r21,r18
   12080:	81000017 	ldw	r4,0(r16)
   12084:	80800417 	ldw	r2,16(r16)
   12088:	a82d883a 	mov	r22,r21
   1208c:	81800217 	ldw	r6,8(r16)
   12090:	81c00517 	ldw	r7,20(r16)
   12094:	1100022e 	bgeu	r2,r4,120a0 <__sfvwrite_r+0x248>
   12098:	31c7883a 	add	r3,r6,r7
   1209c:	1d401816 	blt	r3,r21,12100 <__sfvwrite_r+0x2a8>
   120a0:	a9c04416 	blt	r21,r7,121b4 <__sfvwrite_r+0x35c>
   120a4:	80800917 	ldw	r2,36(r16)
   120a8:	81400717 	ldw	r5,28(r16)
   120ac:	a009883a 	mov	r4,r20
   120b0:	da000115 	stw	r8,4(sp)
   120b4:	e00d883a 	mov	r6,fp
   120b8:	103ee83a 	callr	r2
   120bc:	102d883a 	mov	r22,r2
   120c0:	da000117 	ldw	r8,4(sp)
   120c4:	00bfe00e 	bge	zero,r2,12048 <_gp+0xffff3b3c>
   120c8:	9da7c83a 	sub	r19,r19,r22
   120cc:	98001f26 	beq	r19,zero,1214c <__sfvwrite_r+0x2f4>
   120d0:	b8800217 	ldw	r2,8(r23)
   120d4:	e5b9883a 	add	fp,fp,r22
   120d8:	95a5c83a 	sub	r18,r18,r22
   120dc:	15adc83a 	sub	r22,r2,r22
   120e0:	bd800215 	stw	r22,8(r23)
   120e4:	b03f8926 	beq	r22,zero,11f0c <_gp+0xffff3a00>
   120e8:	903fe11e 	bne	r18,zero,12070 <_gp+0xffff3b64>
   120ec:	8f000017 	ldw	fp,0(r17)
   120f0:	8c800117 	ldw	r18,4(r17)
   120f4:	0011883a 	mov	r8,zero
   120f8:	8c400204 	addi	r17,r17,8
   120fc:	003fdb06 	br	1206c <_gp+0xffff3b60>
   12100:	180d883a 	mov	r6,r3
   12104:	e00b883a 	mov	r5,fp
   12108:	da000115 	stw	r8,4(sp)
   1210c:	d8c00015 	stw	r3,0(sp)
   12110:	0012e600 	call	12e60 <memmove>
   12114:	d8c00017 	ldw	r3,0(sp)
   12118:	80800017 	ldw	r2,0(r16)
   1211c:	a009883a 	mov	r4,r20
   12120:	800b883a 	mov	r5,r16
   12124:	10c5883a 	add	r2,r2,r3
   12128:	80800015 	stw	r2,0(r16)
   1212c:	d8c00015 	stw	r3,0(sp)
   12130:	0013e480 	call	13e48 <_fflush_r>
   12134:	d8c00017 	ldw	r3,0(sp)
   12138:	da000117 	ldw	r8,4(sp)
   1213c:	103fc21e 	bne	r2,zero,12048 <_gp+0xffff3b3c>
   12140:	182d883a 	mov	r22,r3
   12144:	9da7c83a 	sub	r19,r19,r22
   12148:	983fe11e 	bne	r19,zero,120d0 <_gp+0xffff3bc4>
   1214c:	a009883a 	mov	r4,r20
   12150:	800b883a 	mov	r5,r16
   12154:	0013e480 	call	13e48 <_fflush_r>
   12158:	103fbb1e 	bne	r2,zero,12048 <_gp+0xffff3b3c>
   1215c:	0011883a 	mov	r8,zero
   12160:	003fdb06 	br	120d0 <_gp+0xffff3bc4>
   12164:	81000017 	ldw	r4,0(r16)
   12168:	80800417 	ldw	r2,16(r16)
   1216c:	11000236 	bltu	r2,r4,12178 <__sfvwrite_r+0x320>
   12170:	84c00517 	ldw	r19,20(r16)
   12174:	94ffa32e 	bgeu	r18,r19,12004 <_gp+0xffff3af8>
   12178:	9027883a 	mov	r19,r18
   1217c:	b480012e 	bgeu	r22,r18,12184 <__sfvwrite_r+0x32c>
   12180:	b027883a 	mov	r19,r22
   12184:	e00b883a 	mov	r5,fp
   12188:	980d883a 	mov	r6,r19
   1218c:	0012e600 	call	12e60 <memmove>
   12190:	80800217 	ldw	r2,8(r16)
   12194:	80c00017 	ldw	r3,0(r16)
   12198:	14c5c83a 	sub	r2,r2,r19
   1219c:	1cc7883a 	add	r3,r3,r19
   121a0:	80800215 	stw	r2,8(r16)
   121a4:	80c00015 	stw	r3,0(r16)
   121a8:	10004326 	beq	r2,zero,122b8 <__sfvwrite_r+0x460>
   121ac:	9805883a 	mov	r2,r19
   121b0:	003f8206 	br	11fbc <_gp+0xffff3ab0>
   121b4:	a80d883a 	mov	r6,r21
   121b8:	e00b883a 	mov	r5,fp
   121bc:	da000115 	stw	r8,4(sp)
   121c0:	0012e600 	call	12e60 <memmove>
   121c4:	80800217 	ldw	r2,8(r16)
   121c8:	80c00017 	ldw	r3,0(r16)
   121cc:	da000117 	ldw	r8,4(sp)
   121d0:	1545c83a 	sub	r2,r2,r21
   121d4:	1d6b883a 	add	r21,r3,r21
   121d8:	80800215 	stw	r2,8(r16)
   121dc:	85400015 	stw	r21,0(r16)
   121e0:	003fb906 	br	120c8 <_gp+0xffff3bbc>
   121e4:	81000017 	ldw	r4,0(r16)
   121e8:	902d883a 	mov	r22,r18
   121ec:	9027883a 	mov	r19,r18
   121f0:	003f6806 	br	11f94 <_gp+0xffff3a88>
   121f4:	e009883a 	mov	r4,fp
   121f8:	01400284 	movi	r5,10
   121fc:	900d883a 	mov	r6,r18
   12200:	0012bc40 	call	12bc4 <memchr>
   12204:	10003e26 	beq	r2,zero,12300 <__sfvwrite_r+0x4a8>
   12208:	10800044 	addi	r2,r2,1
   1220c:	1727c83a 	sub	r19,r2,fp
   12210:	02000044 	movi	r8,1
   12214:	003f9706 	br	12074 <_gp+0xffff3b68>
   12218:	80800517 	ldw	r2,20(r16)
   1221c:	81400417 	ldw	r5,16(r16)
   12220:	80c00017 	ldw	r3,0(r16)
   12224:	10a7883a 	add	r19,r2,r2
   12228:	9885883a 	add	r2,r19,r2
   1222c:	1026d7fa 	srli	r19,r2,31
   12230:	196bc83a 	sub	r21,r3,r5
   12234:	a9800044 	addi	r6,r21,1
   12238:	9885883a 	add	r2,r19,r2
   1223c:	1027d07a 	srai	r19,r2,1
   12240:	3485883a 	add	r2,r6,r18
   12244:	980d883a 	mov	r6,r19
   12248:	9880022e 	bgeu	r19,r2,12254 <__sfvwrite_r+0x3fc>
   1224c:	1027883a 	mov	r19,r2
   12250:	100d883a 	mov	r6,r2
   12254:	2101000c 	andi	r4,r4,1024
   12258:	20001c26 	beq	r4,zero,122cc <__sfvwrite_r+0x474>
   1225c:	a009883a 	mov	r4,r20
   12260:	300b883a 	mov	r5,r6
   12264:	001241c0 	call	1241c <_malloc_r>
   12268:	102d883a 	mov	r22,r2
   1226c:	10002926 	beq	r2,zero,12314 <__sfvwrite_r+0x4bc>
   12270:	81400417 	ldw	r5,16(r16)
   12274:	1009883a 	mov	r4,r2
   12278:	a80d883a 	mov	r6,r21
   1227c:	0012d280 	call	12d28 <memcpy>
   12280:	8080030b 	ldhu	r2,12(r16)
   12284:	00fedfc4 	movi	r3,-1153
   12288:	10c4703a 	and	r2,r2,r3
   1228c:	10802014 	ori	r2,r2,128
   12290:	8080030d 	sth	r2,12(r16)
   12294:	b549883a 	add	r4,r22,r21
   12298:	9d4bc83a 	sub	r5,r19,r21
   1229c:	85800415 	stw	r22,16(r16)
   122a0:	84c00515 	stw	r19,20(r16)
   122a4:	81000015 	stw	r4,0(r16)
   122a8:	902d883a 	mov	r22,r18
   122ac:	81400215 	stw	r5,8(r16)
   122b0:	9027883a 	mov	r19,r18
   122b4:	003f3706 	br	11f94 <_gp+0xffff3a88>
   122b8:	a009883a 	mov	r4,r20
   122bc:	800b883a 	mov	r5,r16
   122c0:	0013e480 	call	13e48 <_fflush_r>
   122c4:	103fb926 	beq	r2,zero,121ac <_gp+0xffff3ca0>
   122c8:	003f5f06 	br	12048 <_gp+0xffff3b3c>
   122cc:	a009883a 	mov	r4,r20
   122d0:	00131280 	call	13128 <_realloc_r>
   122d4:	102d883a 	mov	r22,r2
   122d8:	103fee1e 	bne	r2,zero,12294 <_gp+0xffff3d88>
   122dc:	81400417 	ldw	r5,16(r16)
   122e0:	a009883a 	mov	r4,r20
   122e4:	00143a80 	call	143a8 <_free_r>
   122e8:	8080030b 	ldhu	r2,12(r16)
   122ec:	00ffdfc4 	movi	r3,-129
   122f0:	1884703a 	and	r2,r3,r2
   122f4:	00c00304 	movi	r3,12
   122f8:	a0c00015 	stw	r3,0(r20)
   122fc:	003f5306 	br	1204c <_gp+0xffff3b40>
   12300:	94c00044 	addi	r19,r18,1
   12304:	02000044 	movi	r8,1
   12308:	003f5a06 	br	12074 <_gp+0xffff3b68>
   1230c:	00bfffc4 	movi	r2,-1
   12310:	003eff06 	br	11f10 <_gp+0xffff3a04>
   12314:	00800304 	movi	r2,12
   12318:	a0800015 	stw	r2,0(r20)
   1231c:	8080030b 	ldhu	r2,12(r16)
   12320:	003f4a06 	br	1204c <_gp+0xffff3b40>

00012324 <_getc_r>:
   12324:	defffd04 	addi	sp,sp,-12
   12328:	dc000115 	stw	r16,4(sp)
   1232c:	dfc00215 	stw	ra,8(sp)
   12330:	2021883a 	mov	r16,r4
   12334:	20000226 	beq	r4,zero,12340 <_getc_r+0x1c>
   12338:	20800e17 	ldw	r2,56(r4)
   1233c:	10000c26 	beq	r2,zero,12370 <_getc_r+0x4c>
   12340:	28800117 	ldw	r2,4(r5)
   12344:	10bfffc4 	addi	r2,r2,-1
   12348:	28800115 	stw	r2,4(r5)
   1234c:	10000c16 	blt	r2,zero,12380 <_getc_r+0x5c>
   12350:	28800017 	ldw	r2,0(r5)
   12354:	10c00044 	addi	r3,r2,1
   12358:	28c00015 	stw	r3,0(r5)
   1235c:	10800003 	ldbu	r2,0(r2)
   12360:	dfc00217 	ldw	ra,8(sp)
   12364:	dc000117 	ldw	r16,4(sp)
   12368:	dec00304 	addi	sp,sp,12
   1236c:	f800283a 	ret
   12370:	d9400015 	stw	r5,0(sp)
   12374:	00142340 	call	14234 <__sinit>
   12378:	d9400017 	ldw	r5,0(sp)
   1237c:	003ff006 	br	12340 <_gp+0xffff3e34>
   12380:	8009883a 	mov	r4,r16
   12384:	dfc00217 	ldw	ra,8(sp)
   12388:	dc000117 	ldw	r16,4(sp)
   1238c:	dec00304 	addi	sp,sp,12
   12390:	00136901 	jmpi	13690 <__srget_r>

00012394 <getc>:
   12394:	00800074 	movhi	r2,1
   12398:	defffd04 	addi	sp,sp,-12
   1239c:	10994d04 	addi	r2,r2,25908
   123a0:	dc400115 	stw	r17,4(sp)
   123a4:	14400017 	ldw	r17,0(r2)
   123a8:	dc000015 	stw	r16,0(sp)
   123ac:	dfc00215 	stw	ra,8(sp)
   123b0:	2021883a 	mov	r16,r4
   123b4:	88000226 	beq	r17,zero,123c0 <getc+0x2c>
   123b8:	88800e17 	ldw	r2,56(r17)
   123bc:	10000d26 	beq	r2,zero,123f4 <getc+0x60>
   123c0:	80800117 	ldw	r2,4(r16)
   123c4:	10bfffc4 	addi	r2,r2,-1
   123c8:	80800115 	stw	r2,4(r16)
   123cc:	10000c16 	blt	r2,zero,12400 <getc+0x6c>
   123d0:	80800017 	ldw	r2,0(r16)
   123d4:	10c00044 	addi	r3,r2,1
   123d8:	80c00015 	stw	r3,0(r16)
   123dc:	10800003 	ldbu	r2,0(r2)
   123e0:	dfc00217 	ldw	ra,8(sp)
   123e4:	dc400117 	ldw	r17,4(sp)
   123e8:	dc000017 	ldw	r16,0(sp)
   123ec:	dec00304 	addi	sp,sp,12
   123f0:	f800283a 	ret
   123f4:	8809883a 	mov	r4,r17
   123f8:	00142340 	call	14234 <__sinit>
   123fc:	003ff006 	br	123c0 <_gp+0xffff3eb4>
   12400:	8809883a 	mov	r4,r17
   12404:	800b883a 	mov	r5,r16
   12408:	dfc00217 	ldw	ra,8(sp)
   1240c:	dc400117 	ldw	r17,4(sp)
   12410:	dc000017 	ldw	r16,0(sp)
   12414:	dec00304 	addi	sp,sp,12
   12418:	00136901 	jmpi	13690 <__srget_r>

0001241c <_malloc_r>:
   1241c:	defff504 	addi	sp,sp,-44
   12420:	dc800315 	stw	r18,12(sp)
   12424:	dfc00a15 	stw	ra,40(sp)
   12428:	df000915 	stw	fp,36(sp)
   1242c:	ddc00815 	stw	r23,32(sp)
   12430:	dd800715 	stw	r22,28(sp)
   12434:	dd400615 	stw	r21,24(sp)
   12438:	dd000515 	stw	r20,20(sp)
   1243c:	dcc00415 	stw	r19,16(sp)
   12440:	dc400215 	stw	r17,8(sp)
   12444:	dc000115 	stw	r16,4(sp)
   12448:	288002c4 	addi	r2,r5,11
   1244c:	00c00584 	movi	r3,22
   12450:	2025883a 	mov	r18,r4
   12454:	18802a2e 	bgeu	r3,r2,12500 <_malloc_r+0xe4>
   12458:	047ffe04 	movi	r17,-8
   1245c:	1462703a 	and	r17,r2,r17
   12460:	88009e16 	blt	r17,zero,126dc <_malloc_r+0x2c0>
   12464:	89409d36 	bltu	r17,r5,126dc <_malloc_r+0x2c0>
   12468:	00155f80 	call	155f8 <__malloc_lock>
   1246c:	00807dc4 	movi	r2,503
   12470:	14402736 	bltu	r2,r17,12510 <_malloc_r+0xf4>
   12474:	8806d0fa 	srli	r3,r17,3
   12478:	04c00074 	movhi	r19,1
   1247c:	9cd84104 	addi	r19,r19,24836
   12480:	18c5883a 	add	r2,r3,r3
   12484:	1085883a 	add	r2,r2,r2
   12488:	1085883a 	add	r2,r2,r2
   1248c:	9885883a 	add	r2,r19,r2
   12490:	14000317 	ldw	r16,12(r2)
   12494:	80814a26 	beq	r16,r2,129c0 <_malloc_r+0x5a4>
   12498:	80c00117 	ldw	r3,4(r16)
   1249c:	81000317 	ldw	r4,12(r16)
   124a0:	00bfff04 	movi	r2,-4
   124a4:	1884703a 	and	r2,r3,r2
   124a8:	81400217 	ldw	r5,8(r16)
   124ac:	8085883a 	add	r2,r16,r2
   124b0:	10c00117 	ldw	r3,4(r2)
   124b4:	29000315 	stw	r4,12(r5)
   124b8:	21400215 	stw	r5,8(r4)
   124bc:	18c00054 	ori	r3,r3,1
   124c0:	10c00115 	stw	r3,4(r2)
   124c4:	9009883a 	mov	r4,r18
   124c8:	00156180 	call	15618 <__malloc_unlock>
   124cc:	80800204 	addi	r2,r16,8
   124d0:	dfc00a17 	ldw	ra,40(sp)
   124d4:	df000917 	ldw	fp,36(sp)
   124d8:	ddc00817 	ldw	r23,32(sp)
   124dc:	dd800717 	ldw	r22,28(sp)
   124e0:	dd400617 	ldw	r21,24(sp)
   124e4:	dd000517 	ldw	r20,20(sp)
   124e8:	dcc00417 	ldw	r19,16(sp)
   124ec:	dc800317 	ldw	r18,12(sp)
   124f0:	dc400217 	ldw	r17,8(sp)
   124f4:	dc000117 	ldw	r16,4(sp)
   124f8:	dec00b04 	addi	sp,sp,44
   124fc:	f800283a 	ret
   12500:	04400404 	movi	r17,16
   12504:	89407536 	bltu	r17,r5,126dc <_malloc_r+0x2c0>
   12508:	00155f80 	call	155f8 <__malloc_lock>
   1250c:	003fd906 	br	12474 <_gp+0xffff3f68>
   12510:	8806d27a 	srli	r3,r17,9
   12514:	18007526 	beq	r3,zero,126ec <_malloc_r+0x2d0>
   12518:	00800104 	movi	r2,4
   1251c:	10c0ef36 	bltu	r2,r3,128dc <_malloc_r+0x4c0>
   12520:	8806d1ba 	srli	r3,r17,6
   12524:	19c00e04 	addi	r7,r3,56
   12528:	39cb883a 	add	r5,r7,r7
   1252c:	04c00074 	movhi	r19,1
   12530:	294b883a 	add	r5,r5,r5
   12534:	9cd84104 	addi	r19,r19,24836
   12538:	294b883a 	add	r5,r5,r5
   1253c:	994b883a 	add	r5,r19,r5
   12540:	2c000317 	ldw	r16,12(r5)
   12544:	2c000e26 	beq	r5,r16,12580 <_malloc_r+0x164>
   12548:	80800117 	ldw	r2,4(r16)
   1254c:	01bfff04 	movi	r6,-4
   12550:	010003c4 	movi	r4,15
   12554:	1184703a 	and	r2,r2,r6
   12558:	1447c83a 	sub	r3,r2,r17
   1255c:	20c00716 	blt	r4,r3,1257c <_malloc_r+0x160>
   12560:	1800650e 	bge	r3,zero,126f8 <_malloc_r+0x2dc>
   12564:	84000317 	ldw	r16,12(r16)
   12568:	2c000526 	beq	r5,r16,12580 <_malloc_r+0x164>
   1256c:	80800117 	ldw	r2,4(r16)
   12570:	1184703a 	and	r2,r2,r6
   12574:	1447c83a 	sub	r3,r2,r17
   12578:	20fff90e 	bge	r4,r3,12560 <_gp+0xffff4054>
   1257c:	39ffffc4 	addi	r7,r7,-1
   12580:	38c00044 	addi	r3,r7,1
   12584:	01800074 	movhi	r6,1
   12588:	9c000417 	ldw	r16,16(r19)
   1258c:	31984104 	addi	r6,r6,24836
   12590:	32400204 	addi	r9,r6,8
   12594:	82410326 	beq	r16,r9,129a4 <_malloc_r+0x588>
   12598:	81000117 	ldw	r4,4(r16)
   1259c:	00bfff04 	movi	r2,-4
   125a0:	208e703a 	and	r7,r4,r2
   125a4:	3c45c83a 	sub	r2,r7,r17
   125a8:	010003c4 	movi	r4,15
   125ac:	2080ee16 	blt	r4,r2,12968 <_malloc_r+0x54c>
   125b0:	32400515 	stw	r9,20(r6)
   125b4:	32400415 	stw	r9,16(r6)
   125b8:	1000510e 	bge	r2,zero,12700 <_malloc_r+0x2e4>
   125bc:	00807fc4 	movi	r2,511
   125c0:	11c0ce36 	bltu	r2,r7,128fc <_malloc_r+0x4e0>
   125c4:	3808d0fa 	srli	r4,r7,3
   125c8:	01c00044 	movi	r7,1
   125cc:	30800117 	ldw	r2,4(r6)
   125d0:	210b883a 	add	r5,r4,r4
   125d4:	294b883a 	add	r5,r5,r5
   125d8:	2009d0ba 	srai	r4,r4,2
   125dc:	294b883a 	add	r5,r5,r5
   125e0:	298b883a 	add	r5,r5,r6
   125e4:	2a000217 	ldw	r8,8(r5)
   125e8:	3908983a 	sll	r4,r7,r4
   125ec:	81400315 	stw	r5,12(r16)
   125f0:	82000215 	stw	r8,8(r16)
   125f4:	2088b03a 	or	r4,r4,r2
   125f8:	2c000215 	stw	r16,8(r5)
   125fc:	31000115 	stw	r4,4(r6)
   12600:	44000315 	stw	r16,12(r8)
   12604:	1805d0ba 	srai	r2,r3,2
   12608:	01400044 	movi	r5,1
   1260c:	288a983a 	sll	r5,r5,r2
   12610:	21404336 	bltu	r4,r5,12720 <_malloc_r+0x304>
   12614:	2144703a 	and	r2,r4,r5
   12618:	10000a1e 	bne	r2,zero,12644 <_malloc_r+0x228>
   1261c:	00bfff04 	movi	r2,-4
   12620:	294b883a 	add	r5,r5,r5
   12624:	1886703a 	and	r3,r3,r2
   12628:	2144703a 	and	r2,r4,r5
   1262c:	18c00104 	addi	r3,r3,4
   12630:	1000041e 	bne	r2,zero,12644 <_malloc_r+0x228>
   12634:	294b883a 	add	r5,r5,r5
   12638:	2144703a 	and	r2,r4,r5
   1263c:	18c00104 	addi	r3,r3,4
   12640:	103ffc26 	beq	r2,zero,12634 <_gp+0xffff4128>
   12644:	023fff04 	movi	r8,-4
   12648:	01c003c4 	movi	r7,15
   1264c:	18c5883a 	add	r2,r3,r3
   12650:	1085883a 	add	r2,r2,r2
   12654:	1085883a 	add	r2,r2,r2
   12658:	9895883a 	add	r10,r19,r2
   1265c:	52c00304 	addi	r11,r10,12
   12660:	1819883a 	mov	r12,r3
   12664:	5c000017 	ldw	r16,0(r11)
   12668:	59bffd04 	addi	r6,r11,-12
   1266c:	8180041e 	bne	r16,r6,12680 <_malloc_r+0x264>
   12670:	0000ce06 	br	129ac <_malloc_r+0x590>
   12674:	2000d70e 	bge	r4,zero,129d4 <_malloc_r+0x5b8>
   12678:	84000317 	ldw	r16,12(r16)
   1267c:	8180cb26 	beq	r16,r6,129ac <_malloc_r+0x590>
   12680:	80800117 	ldw	r2,4(r16)
   12684:	1204703a 	and	r2,r2,r8
   12688:	1449c83a 	sub	r4,r2,r17
   1268c:	393ff90e 	bge	r7,r4,12674 <_gp+0xffff4168>
   12690:	80800317 	ldw	r2,12(r16)
   12694:	80c00217 	ldw	r3,8(r16)
   12698:	89400054 	ori	r5,r17,1
   1269c:	81400115 	stw	r5,4(r16)
   126a0:	18800315 	stw	r2,12(r3)
   126a4:	10c00215 	stw	r3,8(r2)
   126a8:	8463883a 	add	r17,r16,r17
   126ac:	9c400515 	stw	r17,20(r19)
   126b0:	9c400415 	stw	r17,16(r19)
   126b4:	20800054 	ori	r2,r4,1
   126b8:	88800115 	stw	r2,4(r17)
   126bc:	8a400315 	stw	r9,12(r17)
   126c0:	8a400215 	stw	r9,8(r17)
   126c4:	8923883a 	add	r17,r17,r4
   126c8:	89000015 	stw	r4,0(r17)
   126cc:	9009883a 	mov	r4,r18
   126d0:	00156180 	call	15618 <__malloc_unlock>
   126d4:	80800204 	addi	r2,r16,8
   126d8:	003f7d06 	br	124d0 <_gp+0xffff3fc4>
   126dc:	00800304 	movi	r2,12
   126e0:	90800015 	stw	r2,0(r18)
   126e4:	0005883a 	mov	r2,zero
   126e8:	003f7906 	br	124d0 <_gp+0xffff3fc4>
   126ec:	01401f84 	movi	r5,126
   126f0:	01c00fc4 	movi	r7,63
   126f4:	003f8d06 	br	1252c <_gp+0xffff4020>
   126f8:	81000317 	ldw	r4,12(r16)
   126fc:	003f6a06 	br	124a8 <_gp+0xffff3f9c>
   12700:	81c5883a 	add	r2,r16,r7
   12704:	10c00117 	ldw	r3,4(r2)
   12708:	9009883a 	mov	r4,r18
   1270c:	18c00054 	ori	r3,r3,1
   12710:	10c00115 	stw	r3,4(r2)
   12714:	00156180 	call	15618 <__malloc_unlock>
   12718:	80800204 	addi	r2,r16,8
   1271c:	003f6c06 	br	124d0 <_gp+0xffff3fc4>
   12720:	9c000217 	ldw	r16,8(r19)
   12724:	00bfff04 	movi	r2,-4
   12728:	85800117 	ldw	r22,4(r16)
   1272c:	b0ac703a 	and	r22,r22,r2
   12730:	b4400336 	bltu	r22,r17,12740 <_malloc_r+0x324>
   12734:	b445c83a 	sub	r2,r22,r17
   12738:	00c003c4 	movi	r3,15
   1273c:	18805d16 	blt	r3,r2,128b4 <_malloc_r+0x498>
   12740:	05c00074 	movhi	r23,1
   12744:	00800074 	movhi	r2,1
   12748:	bdd94e04 	addi	r23,r23,25912
   1274c:	109be804 	addi	r2,r2,28576
   12750:	15400017 	ldw	r21,0(r2)
   12754:	b9000017 	ldw	r4,0(r23)
   12758:	00ffffc4 	movi	r3,-1
   1275c:	858d883a 	add	r6,r16,r22
   12760:	8d6b883a 	add	r21,r17,r21
   12764:	20c0e426 	beq	r4,r3,12af8 <_malloc_r+0x6dc>
   12768:	ad4403c4 	addi	r21,r21,4111
   1276c:	00fc0004 	movi	r3,-4096
   12770:	a8ea703a 	and	r21,r21,r3
   12774:	9009883a 	mov	r4,r18
   12778:	a80b883a 	mov	r5,r21
   1277c:	d9800015 	stw	r6,0(sp)
   12780:	00137180 	call	13718 <_sbrk_r>
   12784:	00ffffc4 	movi	r3,-1
   12788:	1029883a 	mov	r20,r2
   1278c:	d9800017 	ldw	r6,0(sp)
   12790:	10c0a426 	beq	r2,r3,12a24 <_malloc_r+0x608>
   12794:	1180a236 	bltu	r2,r6,12a20 <_malloc_r+0x604>
   12798:	07000074 	movhi	fp,1
   1279c:	e71be904 	addi	fp,fp,28580
   127a0:	e0c00017 	ldw	r3,0(fp)
   127a4:	a8c7883a 	add	r3,r21,r3
   127a8:	e0c00015 	stw	r3,0(fp)
   127ac:	3500da26 	beq	r6,r20,12b18 <_malloc_r+0x6fc>
   127b0:	b9000017 	ldw	r4,0(r23)
   127b4:	00bfffc4 	movi	r2,-1
   127b8:	2080e426 	beq	r4,r2,12b4c <_malloc_r+0x730>
   127bc:	a185c83a 	sub	r2,r20,r6
   127c0:	1885883a 	add	r2,r3,r2
   127c4:	e0800015 	stw	r2,0(fp)
   127c8:	a0c001cc 	andi	r3,r20,7
   127cc:	1800b526 	beq	r3,zero,12aa4 <_malloc_r+0x688>
   127d0:	a0e9c83a 	sub	r20,r20,r3
   127d4:	00840204 	movi	r2,4104
   127d8:	a5000204 	addi	r20,r20,8
   127dc:	10c7c83a 	sub	r3,r2,r3
   127e0:	a545883a 	add	r2,r20,r21
   127e4:	1083ffcc 	andi	r2,r2,4095
   127e8:	18abc83a 	sub	r21,r3,r2
   127ec:	9009883a 	mov	r4,r18
   127f0:	a80b883a 	mov	r5,r21
   127f4:	00137180 	call	13718 <_sbrk_r>
   127f8:	00ffffc4 	movi	r3,-1
   127fc:	10c0d026 	beq	r2,r3,12b40 <_malloc_r+0x724>
   12800:	1507c83a 	sub	r3,r2,r20
   12804:	a8c7883a 	add	r3,r21,r3
   12808:	18c00054 	ori	r3,r3,1
   1280c:	e0800017 	ldw	r2,0(fp)
   12810:	9d000215 	stw	r20,8(r19)
   12814:	a0c00115 	stw	r3,4(r20)
   12818:	a887883a 	add	r3,r21,r2
   1281c:	e0c00015 	stw	r3,0(fp)
   12820:	84c00e26 	beq	r16,r19,1285c <_malloc_r+0x440>
   12824:	018003c4 	movi	r6,15
   12828:	3580a02e 	bgeu	r6,r22,12aac <_malloc_r+0x690>
   1282c:	81400117 	ldw	r5,4(r16)
   12830:	013ffe04 	movi	r4,-8
   12834:	b0bffd04 	addi	r2,r22,-12
   12838:	1104703a 	and	r2,r2,r4
   1283c:	2900004c 	andi	r4,r5,1
   12840:	1108b03a 	or	r4,r2,r4
   12844:	81000115 	stw	r4,4(r16)
   12848:	01400144 	movi	r5,5
   1284c:	8089883a 	add	r4,r16,r2
   12850:	21400115 	stw	r5,4(r4)
   12854:	21400215 	stw	r5,8(r4)
   12858:	3080c036 	bltu	r6,r2,12b5c <_malloc_r+0x740>
   1285c:	00800074 	movhi	r2,1
   12860:	109be704 	addi	r2,r2,28572
   12864:	11000017 	ldw	r4,0(r2)
   12868:	20c0012e 	bgeu	r4,r3,12870 <_malloc_r+0x454>
   1286c:	10c00015 	stw	r3,0(r2)
   12870:	00800074 	movhi	r2,1
   12874:	109be604 	addi	r2,r2,28568
   12878:	11000017 	ldw	r4,0(r2)
   1287c:	9c000217 	ldw	r16,8(r19)
   12880:	20c0012e 	bgeu	r4,r3,12888 <_malloc_r+0x46c>
   12884:	10c00015 	stw	r3,0(r2)
   12888:	80c00117 	ldw	r3,4(r16)
   1288c:	00bfff04 	movi	r2,-4
   12890:	1886703a 	and	r3,r3,r2
   12894:	1c45c83a 	sub	r2,r3,r17
   12898:	1c400236 	bltu	r3,r17,128a4 <_malloc_r+0x488>
   1289c:	00c003c4 	movi	r3,15
   128a0:	18800416 	blt	r3,r2,128b4 <_malloc_r+0x498>
   128a4:	9009883a 	mov	r4,r18
   128a8:	00156180 	call	15618 <__malloc_unlock>
   128ac:	0005883a 	mov	r2,zero
   128b0:	003f0706 	br	124d0 <_gp+0xffff3fc4>
   128b4:	88c00054 	ori	r3,r17,1
   128b8:	80c00115 	stw	r3,4(r16)
   128bc:	8463883a 	add	r17,r16,r17
   128c0:	10800054 	ori	r2,r2,1
   128c4:	9c400215 	stw	r17,8(r19)
   128c8:	88800115 	stw	r2,4(r17)
   128cc:	9009883a 	mov	r4,r18
   128d0:	00156180 	call	15618 <__malloc_unlock>
   128d4:	80800204 	addi	r2,r16,8
   128d8:	003efd06 	br	124d0 <_gp+0xffff3fc4>
   128dc:	00800504 	movi	r2,20
   128e0:	10c0482e 	bgeu	r2,r3,12a04 <_malloc_r+0x5e8>
   128e4:	00801504 	movi	r2,84
   128e8:	10c06836 	bltu	r2,r3,12a8c <_malloc_r+0x670>
   128ec:	8806d33a 	srli	r3,r17,12
   128f0:	19c01b84 	addi	r7,r3,110
   128f4:	39cb883a 	add	r5,r7,r7
   128f8:	003f0c06 	br	1252c <_gp+0xffff4020>
   128fc:	3804d27a 	srli	r2,r7,9
   12900:	01000104 	movi	r4,4
   12904:	2080422e 	bgeu	r4,r2,12a10 <_malloc_r+0x5f4>
   12908:	01000504 	movi	r4,20
   1290c:	20807c36 	bltu	r4,r2,12b00 <_malloc_r+0x6e4>
   12910:	110016c4 	addi	r4,r2,91
   12914:	210b883a 	add	r5,r4,r4
   12918:	294b883a 	add	r5,r5,r5
   1291c:	294b883a 	add	r5,r5,r5
   12920:	994b883a 	add	r5,r19,r5
   12924:	28800217 	ldw	r2,8(r5)
   12928:	02000074 	movhi	r8,1
   1292c:	42184104 	addi	r8,r8,24836
   12930:	11406326 	beq	r2,r5,12ac0 <_malloc_r+0x6a4>
   12934:	01bfff04 	movi	r6,-4
   12938:	11000117 	ldw	r4,4(r2)
   1293c:	2188703a 	and	r4,r4,r6
   12940:	3900022e 	bgeu	r7,r4,1294c <_malloc_r+0x530>
   12944:	10800217 	ldw	r2,8(r2)
   12948:	28bffb1e 	bne	r5,r2,12938 <_gp+0xffff442c>
   1294c:	11800317 	ldw	r6,12(r2)
   12950:	99000117 	ldw	r4,4(r19)
   12954:	81800315 	stw	r6,12(r16)
   12958:	80800215 	stw	r2,8(r16)
   1295c:	34000215 	stw	r16,8(r6)
   12960:	14000315 	stw	r16,12(r2)
   12964:	003f2706 	br	12604 <_gp+0xffff40f8>
   12968:	88c00054 	ori	r3,r17,1
   1296c:	80c00115 	stw	r3,4(r16)
   12970:	8463883a 	add	r17,r16,r17
   12974:	34400515 	stw	r17,20(r6)
   12978:	34400415 	stw	r17,16(r6)
   1297c:	10c00054 	ori	r3,r2,1
   12980:	8a400315 	stw	r9,12(r17)
   12984:	8a400215 	stw	r9,8(r17)
   12988:	88c00115 	stw	r3,4(r17)
   1298c:	88a3883a 	add	r17,r17,r2
   12990:	88800015 	stw	r2,0(r17)
   12994:	9009883a 	mov	r4,r18
   12998:	00156180 	call	15618 <__malloc_unlock>
   1299c:	80800204 	addi	r2,r16,8
   129a0:	003ecb06 	br	124d0 <_gp+0xffff3fc4>
   129a4:	31000117 	ldw	r4,4(r6)
   129a8:	003f1606 	br	12604 <_gp+0xffff40f8>
   129ac:	63000044 	addi	r12,r12,1
   129b0:	608000cc 	andi	r2,r12,3
   129b4:	5ac00204 	addi	r11,r11,8
   129b8:	103f2a1e 	bne	r2,zero,12664 <_gp+0xffff4158>
   129bc:	00002106 	br	12a44 <_malloc_r+0x628>
   129c0:	80800204 	addi	r2,r16,8
   129c4:	84000517 	ldw	r16,20(r16)
   129c8:	143eb31e 	bne	r2,r16,12498 <_gp+0xffff3f8c>
   129cc:	18c00084 	addi	r3,r3,2
   129d0:	003eec06 	br	12584 <_gp+0xffff4078>
   129d4:	8085883a 	add	r2,r16,r2
   129d8:	10c00117 	ldw	r3,4(r2)
   129dc:	81000317 	ldw	r4,12(r16)
   129e0:	81400217 	ldw	r5,8(r16)
   129e4:	18c00054 	ori	r3,r3,1
   129e8:	10c00115 	stw	r3,4(r2)
   129ec:	29000315 	stw	r4,12(r5)
   129f0:	21400215 	stw	r5,8(r4)
   129f4:	9009883a 	mov	r4,r18
   129f8:	00156180 	call	15618 <__malloc_unlock>
   129fc:	80800204 	addi	r2,r16,8
   12a00:	003eb306 	br	124d0 <_gp+0xffff3fc4>
   12a04:	19c016c4 	addi	r7,r3,91
   12a08:	39cb883a 	add	r5,r7,r7
   12a0c:	003ec706 	br	1252c <_gp+0xffff4020>
   12a10:	3804d1ba 	srli	r2,r7,6
   12a14:	11000e04 	addi	r4,r2,56
   12a18:	210b883a 	add	r5,r4,r4
   12a1c:	003fbe06 	br	12918 <_gp+0xffff440c>
   12a20:	84ff5d26 	beq	r16,r19,12798 <_gp+0xffff428c>
   12a24:	9c000217 	ldw	r16,8(r19)
   12a28:	00bfff04 	movi	r2,-4
   12a2c:	80c00117 	ldw	r3,4(r16)
   12a30:	1886703a 	and	r3,r3,r2
   12a34:	003f9706 	br	12894 <_gp+0xffff4388>
   12a38:	52800017 	ldw	r10,0(r10)
   12a3c:	18ffffc4 	addi	r3,r3,-1
   12a40:	50805c1e 	bne	r10,r2,12bb4 <_malloc_r+0x798>
   12a44:	190000cc 	andi	r4,r3,3
   12a48:	50bffe04 	addi	r2,r10,-8
   12a4c:	203ffa1e 	bne	r4,zero,12a38 <_gp+0xffff452c>
   12a50:	98800117 	ldw	r2,4(r19)
   12a54:	0146303a 	nor	r3,zero,r5
   12a58:	1884703a 	and	r2,r3,r2
   12a5c:	98800115 	stw	r2,4(r19)
   12a60:	294b883a 	add	r5,r5,r5
   12a64:	117f2e36 	bltu	r2,r5,12720 <_gp+0xffff4214>
   12a68:	283f2d26 	beq	r5,zero,12720 <_gp+0xffff4214>
   12a6c:	1146703a 	and	r3,r2,r5
   12a70:	1800521e 	bne	r3,zero,12bbc <_malloc_r+0x7a0>
   12a74:	6007883a 	mov	r3,r12
   12a78:	294b883a 	add	r5,r5,r5
   12a7c:	1148703a 	and	r4,r2,r5
   12a80:	18c00104 	addi	r3,r3,4
   12a84:	203ffc26 	beq	r4,zero,12a78 <_gp+0xffff456c>
   12a88:	003ef006 	br	1264c <_gp+0xffff4140>
   12a8c:	00805504 	movi	r2,340
   12a90:	10c01336 	bltu	r2,r3,12ae0 <_malloc_r+0x6c4>
   12a94:	8806d3fa 	srli	r3,r17,15
   12a98:	19c01dc4 	addi	r7,r3,119
   12a9c:	39cb883a 	add	r5,r7,r7
   12aa0:	003ea206 	br	1252c <_gp+0xffff4020>
   12aa4:	00c40004 	movi	r3,4096
   12aa8:	003f4d06 	br	127e0 <_gp+0xffff42d4>
   12aac:	00800044 	movi	r2,1
   12ab0:	a0800115 	stw	r2,4(r20)
   12ab4:	a021883a 	mov	r16,r20
   12ab8:	0007883a 	mov	r3,zero
   12abc:	003f7506 	br	12894 <_gp+0xffff4388>
   12ac0:	200bd0ba 	srai	r5,r4,2
   12ac4:	01800044 	movi	r6,1
   12ac8:	41000117 	ldw	r4,4(r8)
   12acc:	314a983a 	sll	r5,r6,r5
   12ad0:	100d883a 	mov	r6,r2
   12ad4:	2908b03a 	or	r4,r5,r4
   12ad8:	41000115 	stw	r4,4(r8)
   12adc:	003f9d06 	br	12954 <_gp+0xffff4448>
   12ae0:	00815504 	movi	r2,1364
   12ae4:	10c01336 	bltu	r2,r3,12b34 <_malloc_r+0x718>
   12ae8:	8806d4ba 	srli	r3,r17,18
   12aec:	19c01f04 	addi	r7,r3,124
   12af0:	39cb883a 	add	r5,r7,r7
   12af4:	003e8d06 	br	1252c <_gp+0xffff4020>
   12af8:	ad400404 	addi	r21,r21,16
   12afc:	003f1d06 	br	12774 <_gp+0xffff4268>
   12b00:	01001504 	movi	r4,84
   12b04:	20801c36 	bltu	r4,r2,12b78 <_malloc_r+0x75c>
   12b08:	3804d33a 	srli	r2,r7,12
   12b0c:	11001b84 	addi	r4,r2,110
   12b10:	210b883a 	add	r5,r4,r4
   12b14:	003f8006 	br	12918 <_gp+0xffff440c>
   12b18:	3083ffcc 	andi	r2,r6,4095
   12b1c:	103f241e 	bne	r2,zero,127b0 <_gp+0xffff42a4>
   12b20:	99000217 	ldw	r4,8(r19)
   12b24:	ad85883a 	add	r2,r21,r22
   12b28:	10800054 	ori	r2,r2,1
   12b2c:	20800115 	stw	r2,4(r4)
   12b30:	003f4a06 	br	1285c <_gp+0xffff4350>
   12b34:	01403f04 	movi	r5,252
   12b38:	01c01f84 	movi	r7,126
   12b3c:	003e7b06 	br	1252c <_gp+0xffff4020>
   12b40:	00c00044 	movi	r3,1
   12b44:	002b883a 	mov	r21,zero
   12b48:	003f3006 	br	1280c <_gp+0xffff4300>
   12b4c:	00800074 	movhi	r2,1
   12b50:	10994e04 	addi	r2,r2,25912
   12b54:	15000015 	stw	r20,0(r2)
   12b58:	003f1b06 	br	127c8 <_gp+0xffff42bc>
   12b5c:	9009883a 	mov	r4,r18
   12b60:	81400204 	addi	r5,r16,8
   12b64:	00143a80 	call	143a8 <_free_r>
   12b68:	00800074 	movhi	r2,1
   12b6c:	109be904 	addi	r2,r2,28580
   12b70:	10c00017 	ldw	r3,0(r2)
   12b74:	003f3906 	br	1285c <_gp+0xffff4350>
   12b78:	01005504 	movi	r4,340
   12b7c:	20800436 	bltu	r4,r2,12b90 <_malloc_r+0x774>
   12b80:	3804d3fa 	srli	r2,r7,15
   12b84:	11001dc4 	addi	r4,r2,119
   12b88:	210b883a 	add	r5,r4,r4
   12b8c:	003f6206 	br	12918 <_gp+0xffff440c>
   12b90:	01015504 	movi	r4,1364
   12b94:	20800436 	bltu	r4,r2,12ba8 <_malloc_r+0x78c>
   12b98:	3804d4ba 	srli	r2,r7,18
   12b9c:	11001f04 	addi	r4,r2,124
   12ba0:	210b883a 	add	r5,r4,r4
   12ba4:	003f5c06 	br	12918 <_gp+0xffff440c>
   12ba8:	01403f04 	movi	r5,252
   12bac:	01001f84 	movi	r4,126
   12bb0:	003f5906 	br	12918 <_gp+0xffff440c>
   12bb4:	98800117 	ldw	r2,4(r19)
   12bb8:	003fa906 	br	12a60 <_gp+0xffff4554>
   12bbc:	6007883a 	mov	r3,r12
   12bc0:	003ea206 	br	1264c <_gp+0xffff4140>

00012bc4 <memchr>:
   12bc4:	208000cc 	andi	r2,r4,3
   12bc8:	280f883a 	mov	r7,r5
   12bcc:	10003526 	beq	r2,zero,12ca4 <memchr+0xe0>
   12bd0:	30bfffc4 	addi	r2,r6,-1
   12bd4:	30001b26 	beq	r6,zero,12c44 <memchr+0x80>
   12bd8:	21800003 	ldbu	r6,0(r4)
   12bdc:	28c03fcc 	andi	r3,r5,255
   12be0:	30c01a26 	beq	r6,r3,12c4c <memchr+0x88>
   12be4:	180d883a 	mov	r6,r3
   12be8:	00000406 	br	12bfc <memchr+0x38>
   12bec:	10001526 	beq	r2,zero,12c44 <memchr+0x80>
   12bf0:	20c00003 	ldbu	r3,0(r4)
   12bf4:	10bfffc4 	addi	r2,r2,-1
   12bf8:	19801426 	beq	r3,r6,12c4c <memchr+0x88>
   12bfc:	21000044 	addi	r4,r4,1
   12c00:	20c000cc 	andi	r3,r4,3
   12c04:	183ff91e 	bne	r3,zero,12bec <_gp+0xffff46e0>
   12c08:	024000c4 	movi	r9,3
   12c0c:	48801136 	bltu	r9,r2,12c54 <memchr+0x90>
   12c10:	10000c26 	beq	r2,zero,12c44 <memchr+0x80>
   12c14:	20c00003 	ldbu	r3,0(r4)
   12c18:	29403fcc 	andi	r5,r5,255
   12c1c:	19400b26 	beq	r3,r5,12c4c <memchr+0x88>
   12c20:	20c00044 	addi	r3,r4,1
   12c24:	2085883a 	add	r2,r4,r2
   12c28:	39803fcc 	andi	r6,r7,255
   12c2c:	00000306 	br	12c3c <memchr+0x78>
   12c30:	18c00044 	addi	r3,r3,1
   12c34:	197fffc3 	ldbu	r5,-1(r3)
   12c38:	29800426 	beq	r5,r6,12c4c <memchr+0x88>
   12c3c:	1809883a 	mov	r4,r3
   12c40:	18bffb1e 	bne	r3,r2,12c30 <_gp+0xffff4724>
   12c44:	0005883a 	mov	r2,zero
   12c48:	f800283a 	ret
   12c4c:	2005883a 	mov	r2,r4
   12c50:	f800283a 	ret
   12c54:	28c03fcc 	andi	r3,r5,255
   12c58:	1810923a 	slli	r8,r3,8
   12c5c:	02ffbff4 	movhi	r11,65279
   12c60:	02a02074 	movhi	r10,32897
   12c64:	40c6b03a 	or	r3,r8,r3
   12c68:	1810943a 	slli	r8,r3,16
   12c6c:	5affbfc4 	addi	r11,r11,-257
   12c70:	52a02004 	addi	r10,r10,-32640
   12c74:	40d0b03a 	or	r8,r8,r3
   12c78:	20c00017 	ldw	r3,0(r4)
   12c7c:	40c6f03a 	xor	r3,r8,r3
   12c80:	1acd883a 	add	r6,r3,r11
   12c84:	00c6303a 	nor	r3,zero,r3
   12c88:	30c6703a 	and	r3,r6,r3
   12c8c:	1a86703a 	and	r3,r3,r10
   12c90:	183fdf1e 	bne	r3,zero,12c10 <_gp+0xffff4704>
   12c94:	10bfff04 	addi	r2,r2,-4
   12c98:	21000104 	addi	r4,r4,4
   12c9c:	48bff636 	bltu	r9,r2,12c78 <_gp+0xffff476c>
   12ca0:	003fdb06 	br	12c10 <_gp+0xffff4704>
   12ca4:	3005883a 	mov	r2,r6
   12ca8:	003fd706 	br	12c08 <_gp+0xffff46fc>

00012cac <memcmp>:
   12cac:	01c000c4 	movi	r7,3
   12cb0:	3980192e 	bgeu	r7,r6,12d18 <memcmp+0x6c>
   12cb4:	2144b03a 	or	r2,r4,r5
   12cb8:	11c4703a 	and	r2,r2,r7
   12cbc:	10000f26 	beq	r2,zero,12cfc <memcmp+0x50>
   12cc0:	20800003 	ldbu	r2,0(r4)
   12cc4:	28c00003 	ldbu	r3,0(r5)
   12cc8:	10c0151e 	bne	r2,r3,12d20 <memcmp+0x74>
   12ccc:	31bfff84 	addi	r6,r6,-2
   12cd0:	01ffffc4 	movi	r7,-1
   12cd4:	00000406 	br	12ce8 <memcmp+0x3c>
   12cd8:	20800003 	ldbu	r2,0(r4)
   12cdc:	28c00003 	ldbu	r3,0(r5)
   12ce0:	31bfffc4 	addi	r6,r6,-1
   12ce4:	10c00e1e 	bne	r2,r3,12d20 <memcmp+0x74>
   12ce8:	21000044 	addi	r4,r4,1
   12cec:	29400044 	addi	r5,r5,1
   12cf0:	31fff91e 	bne	r6,r7,12cd8 <_gp+0xffff47cc>
   12cf4:	0005883a 	mov	r2,zero
   12cf8:	f800283a 	ret
   12cfc:	20c00017 	ldw	r3,0(r4)
   12d00:	28800017 	ldw	r2,0(r5)
   12d04:	1880041e 	bne	r3,r2,12d18 <memcmp+0x6c>
   12d08:	31bfff04 	addi	r6,r6,-4
   12d0c:	21000104 	addi	r4,r4,4
   12d10:	29400104 	addi	r5,r5,4
   12d14:	39bff936 	bltu	r7,r6,12cfc <_gp+0xffff47f0>
   12d18:	303fe91e 	bne	r6,zero,12cc0 <_gp+0xffff47b4>
   12d1c:	003ff506 	br	12cf4 <_gp+0xffff47e8>
   12d20:	10c5c83a 	sub	r2,r2,r3
   12d24:	f800283a 	ret

00012d28 <memcpy>:
   12d28:	deffff04 	addi	sp,sp,-4
   12d2c:	dc000015 	stw	r16,0(sp)
   12d30:	00c003c4 	movi	r3,15
   12d34:	2005883a 	mov	r2,r4
   12d38:	1980432e 	bgeu	r3,r6,12e48 <memcpy+0x120>
   12d3c:	2146b03a 	or	r3,r4,r5
   12d40:	18c000cc 	andi	r3,r3,3
   12d44:	1800421e 	bne	r3,zero,12e50 <memcpy+0x128>
   12d48:	343ffc04 	addi	r16,r6,-16
   12d4c:	8020d13a 	srli	r16,r16,4
   12d50:	28c00104 	addi	r3,r5,4
   12d54:	23400104 	addi	r13,r4,4
   12d58:	801e913a 	slli	r15,r16,4
   12d5c:	2b000204 	addi	r12,r5,8
   12d60:	22c00204 	addi	r11,r4,8
   12d64:	7bc00504 	addi	r15,r15,20
   12d68:	2a800304 	addi	r10,r5,12
   12d6c:	22400304 	addi	r9,r4,12
   12d70:	2bdf883a 	add	r15,r5,r15
   12d74:	2811883a 	mov	r8,r5
   12d78:	200f883a 	mov	r7,r4
   12d7c:	41000017 	ldw	r4,0(r8)
   12d80:	39c00404 	addi	r7,r7,16
   12d84:	18c00404 	addi	r3,r3,16
   12d88:	393ffc15 	stw	r4,-16(r7)
   12d8c:	1bbffc17 	ldw	r14,-16(r3)
   12d90:	6b400404 	addi	r13,r13,16
   12d94:	5ac00404 	addi	r11,r11,16
   12d98:	6bbffc15 	stw	r14,-16(r13)
   12d9c:	63800017 	ldw	r14,0(r12)
   12da0:	4a400404 	addi	r9,r9,16
   12da4:	42000404 	addi	r8,r8,16
   12da8:	5bbffc15 	stw	r14,-16(r11)
   12dac:	53800017 	ldw	r14,0(r10)
   12db0:	63000404 	addi	r12,r12,16
   12db4:	52800404 	addi	r10,r10,16
   12db8:	4bbffc15 	stw	r14,-16(r9)
   12dbc:	1bffef1e 	bne	r3,r15,12d7c <_gp+0xffff4870>
   12dc0:	81c00044 	addi	r7,r16,1
   12dc4:	380e913a 	slli	r7,r7,4
   12dc8:	310003cc 	andi	r4,r6,15
   12dcc:	02c000c4 	movi	r11,3
   12dd0:	11c7883a 	add	r3,r2,r7
   12dd4:	29cb883a 	add	r5,r5,r7
   12dd8:	59001f2e 	bgeu	r11,r4,12e58 <memcpy+0x130>
   12ddc:	1813883a 	mov	r9,r3
   12de0:	2811883a 	mov	r8,r5
   12de4:	200f883a 	mov	r7,r4
   12de8:	42800017 	ldw	r10,0(r8)
   12dec:	4a400104 	addi	r9,r9,4
   12df0:	39ffff04 	addi	r7,r7,-4
   12df4:	4abfff15 	stw	r10,-4(r9)
   12df8:	42000104 	addi	r8,r8,4
   12dfc:	59fffa36 	bltu	r11,r7,12de8 <_gp+0xffff48dc>
   12e00:	213fff04 	addi	r4,r4,-4
   12e04:	2008d0ba 	srli	r4,r4,2
   12e08:	318000cc 	andi	r6,r6,3
   12e0c:	21000044 	addi	r4,r4,1
   12e10:	2109883a 	add	r4,r4,r4
   12e14:	2109883a 	add	r4,r4,r4
   12e18:	1907883a 	add	r3,r3,r4
   12e1c:	290b883a 	add	r5,r5,r4
   12e20:	30000626 	beq	r6,zero,12e3c <memcpy+0x114>
   12e24:	198d883a 	add	r6,r3,r6
   12e28:	29c00003 	ldbu	r7,0(r5)
   12e2c:	18c00044 	addi	r3,r3,1
   12e30:	29400044 	addi	r5,r5,1
   12e34:	19ffffc5 	stb	r7,-1(r3)
   12e38:	19bffb1e 	bne	r3,r6,12e28 <_gp+0xffff491c>
   12e3c:	dc000017 	ldw	r16,0(sp)
   12e40:	dec00104 	addi	sp,sp,4
   12e44:	f800283a 	ret
   12e48:	2007883a 	mov	r3,r4
   12e4c:	003ff406 	br	12e20 <_gp+0xffff4914>
   12e50:	2007883a 	mov	r3,r4
   12e54:	003ff306 	br	12e24 <_gp+0xffff4918>
   12e58:	200d883a 	mov	r6,r4
   12e5c:	003ff006 	br	12e20 <_gp+0xffff4914>

00012e60 <memmove>:
   12e60:	2005883a 	mov	r2,r4
   12e64:	29000b2e 	bgeu	r5,r4,12e94 <memmove+0x34>
   12e68:	298f883a 	add	r7,r5,r6
   12e6c:	21c0092e 	bgeu	r4,r7,12e94 <memmove+0x34>
   12e70:	2187883a 	add	r3,r4,r6
   12e74:	198bc83a 	sub	r5,r3,r6
   12e78:	30004b26 	beq	r6,zero,12fa8 <memmove+0x148>
   12e7c:	39ffffc4 	addi	r7,r7,-1
   12e80:	39000003 	ldbu	r4,0(r7)
   12e84:	18ffffc4 	addi	r3,r3,-1
   12e88:	19000005 	stb	r4,0(r3)
   12e8c:	197ffb1e 	bne	r3,r5,12e7c <_gp+0xffff4970>
   12e90:	f800283a 	ret
   12e94:	00c003c4 	movi	r3,15
   12e98:	1980412e 	bgeu	r3,r6,12fa0 <memmove+0x140>
   12e9c:	1146b03a 	or	r3,r2,r5
   12ea0:	18c000cc 	andi	r3,r3,3
   12ea4:	1800411e 	bne	r3,zero,12fac <memmove+0x14c>
   12ea8:	33fffc04 	addi	r15,r6,-16
   12eac:	781ed13a 	srli	r15,r15,4
   12eb0:	28c00104 	addi	r3,r5,4
   12eb4:	13400104 	addi	r13,r2,4
   12eb8:	781c913a 	slli	r14,r15,4
   12ebc:	2b000204 	addi	r12,r5,8
   12ec0:	12c00204 	addi	r11,r2,8
   12ec4:	73800504 	addi	r14,r14,20
   12ec8:	2a800304 	addi	r10,r5,12
   12ecc:	12400304 	addi	r9,r2,12
   12ed0:	2b9d883a 	add	r14,r5,r14
   12ed4:	2811883a 	mov	r8,r5
   12ed8:	100f883a 	mov	r7,r2
   12edc:	41000017 	ldw	r4,0(r8)
   12ee0:	39c00404 	addi	r7,r7,16
   12ee4:	18c00404 	addi	r3,r3,16
   12ee8:	393ffc15 	stw	r4,-16(r7)
   12eec:	193ffc17 	ldw	r4,-16(r3)
   12ef0:	6b400404 	addi	r13,r13,16
   12ef4:	5ac00404 	addi	r11,r11,16
   12ef8:	693ffc15 	stw	r4,-16(r13)
   12efc:	61000017 	ldw	r4,0(r12)
   12f00:	4a400404 	addi	r9,r9,16
   12f04:	42000404 	addi	r8,r8,16
   12f08:	593ffc15 	stw	r4,-16(r11)
   12f0c:	51000017 	ldw	r4,0(r10)
   12f10:	63000404 	addi	r12,r12,16
   12f14:	52800404 	addi	r10,r10,16
   12f18:	493ffc15 	stw	r4,-16(r9)
   12f1c:	1bbfef1e 	bne	r3,r14,12edc <_gp+0xffff49d0>
   12f20:	79000044 	addi	r4,r15,1
   12f24:	2008913a 	slli	r4,r4,4
   12f28:	328003cc 	andi	r10,r6,15
   12f2c:	02c000c4 	movi	r11,3
   12f30:	1107883a 	add	r3,r2,r4
   12f34:	290b883a 	add	r5,r5,r4
   12f38:	5a801e2e 	bgeu	r11,r10,12fb4 <memmove+0x154>
   12f3c:	1813883a 	mov	r9,r3
   12f40:	2811883a 	mov	r8,r5
   12f44:	500f883a 	mov	r7,r10
   12f48:	41000017 	ldw	r4,0(r8)
   12f4c:	4a400104 	addi	r9,r9,4
   12f50:	39ffff04 	addi	r7,r7,-4
   12f54:	493fff15 	stw	r4,-4(r9)
   12f58:	42000104 	addi	r8,r8,4
   12f5c:	59fffa36 	bltu	r11,r7,12f48 <_gp+0xffff4a3c>
   12f60:	513fff04 	addi	r4,r10,-4
   12f64:	2008d0ba 	srli	r4,r4,2
   12f68:	318000cc 	andi	r6,r6,3
   12f6c:	21000044 	addi	r4,r4,1
   12f70:	2109883a 	add	r4,r4,r4
   12f74:	2109883a 	add	r4,r4,r4
   12f78:	1907883a 	add	r3,r3,r4
   12f7c:	290b883a 	add	r5,r5,r4
   12f80:	30000926 	beq	r6,zero,12fa8 <memmove+0x148>
   12f84:	198d883a 	add	r6,r3,r6
   12f88:	29c00003 	ldbu	r7,0(r5)
   12f8c:	18c00044 	addi	r3,r3,1
   12f90:	29400044 	addi	r5,r5,1
   12f94:	19ffffc5 	stb	r7,-1(r3)
   12f98:	19bffb1e 	bne	r3,r6,12f88 <_gp+0xffff4a7c>
   12f9c:	f800283a 	ret
   12fa0:	1007883a 	mov	r3,r2
   12fa4:	003ff606 	br	12f80 <_gp+0xffff4a74>
   12fa8:	f800283a 	ret
   12fac:	1007883a 	mov	r3,r2
   12fb0:	003ff406 	br	12f84 <_gp+0xffff4a78>
   12fb4:	500d883a 	mov	r6,r10
   12fb8:	003ff106 	br	12f80 <_gp+0xffff4a74>

00012fbc <_putc_r>:
   12fbc:	defffc04 	addi	sp,sp,-16
   12fc0:	dc000215 	stw	r16,8(sp)
   12fc4:	dfc00315 	stw	ra,12(sp)
   12fc8:	2021883a 	mov	r16,r4
   12fcc:	20000226 	beq	r4,zero,12fd8 <_putc_r+0x1c>
   12fd0:	20800e17 	ldw	r2,56(r4)
   12fd4:	10001b26 	beq	r2,zero,13044 <_putc_r+0x88>
   12fd8:	30800217 	ldw	r2,8(r6)
   12fdc:	10bfffc4 	addi	r2,r2,-1
   12fe0:	30800215 	stw	r2,8(r6)
   12fe4:	10000a16 	blt	r2,zero,13010 <_putc_r+0x54>
   12fe8:	30800017 	ldw	r2,0(r6)
   12fec:	11400005 	stb	r5,0(r2)
   12ff0:	30800017 	ldw	r2,0(r6)
   12ff4:	10c00044 	addi	r3,r2,1
   12ff8:	30c00015 	stw	r3,0(r6)
   12ffc:	10800003 	ldbu	r2,0(r2)
   13000:	dfc00317 	ldw	ra,12(sp)
   13004:	dc000217 	ldw	r16,8(sp)
   13008:	dec00404 	addi	sp,sp,16
   1300c:	f800283a 	ret
   13010:	30c00617 	ldw	r3,24(r6)
   13014:	10c00616 	blt	r2,r3,13030 <_putc_r+0x74>
   13018:	30800017 	ldw	r2,0(r6)
   1301c:	00c00284 	movi	r3,10
   13020:	11400005 	stb	r5,0(r2)
   13024:	30800017 	ldw	r2,0(r6)
   13028:	11400003 	ldbu	r5,0(r2)
   1302c:	28fff11e 	bne	r5,r3,12ff4 <_gp+0xffff4ae8>
   13030:	8009883a 	mov	r4,r16
   13034:	dfc00317 	ldw	ra,12(sp)
   13038:	dc000217 	ldw	r16,8(sp)
   1303c:	dec00404 	addi	sp,sp,16
   13040:	00138041 	jmpi	13804 <__swbuf_r>
   13044:	d9400015 	stw	r5,0(sp)
   13048:	d9800115 	stw	r6,4(sp)
   1304c:	00142340 	call	14234 <__sinit>
   13050:	d9800117 	ldw	r6,4(sp)
   13054:	d9400017 	ldw	r5,0(sp)
   13058:	003fdf06 	br	12fd8 <_gp+0xffff4acc>

0001305c <putc>:
   1305c:	00800074 	movhi	r2,1
   13060:	defffc04 	addi	sp,sp,-16
   13064:	10994d04 	addi	r2,r2,25908
   13068:	dc400115 	stw	r17,4(sp)
   1306c:	14400017 	ldw	r17,0(r2)
   13070:	dc800215 	stw	r18,8(sp)
   13074:	dc000015 	stw	r16,0(sp)
   13078:	dfc00315 	stw	ra,12(sp)
   1307c:	2025883a 	mov	r18,r4
   13080:	2821883a 	mov	r16,r5
   13084:	88000226 	beq	r17,zero,13090 <putc+0x34>
   13088:	88800e17 	ldw	r2,56(r17)
   1308c:	10001a26 	beq	r2,zero,130f8 <putc+0x9c>
   13090:	80800217 	ldw	r2,8(r16)
   13094:	10bfffc4 	addi	r2,r2,-1
   13098:	80800215 	stw	r2,8(r16)
   1309c:	10000c16 	blt	r2,zero,130d0 <putc+0x74>
   130a0:	80800017 	ldw	r2,0(r16)
   130a4:	14800005 	stb	r18,0(r2)
   130a8:	80800017 	ldw	r2,0(r16)
   130ac:	10c00044 	addi	r3,r2,1
   130b0:	80c00015 	stw	r3,0(r16)
   130b4:	10800003 	ldbu	r2,0(r2)
   130b8:	dfc00317 	ldw	ra,12(sp)
   130bc:	dc800217 	ldw	r18,8(sp)
   130c0:	dc400117 	ldw	r17,4(sp)
   130c4:	dc000017 	ldw	r16,0(sp)
   130c8:	dec00404 	addi	sp,sp,16
   130cc:	f800283a 	ret
   130d0:	80c00617 	ldw	r3,24(r16)
   130d4:	10c00b16 	blt	r2,r3,13104 <putc+0xa8>
   130d8:	80800017 	ldw	r2,0(r16)
   130dc:	00c00284 	movi	r3,10
   130e0:	14800005 	stb	r18,0(r2)
   130e4:	80800017 	ldw	r2,0(r16)
   130e8:	11400003 	ldbu	r5,0(r2)
   130ec:	28ffef1e 	bne	r5,r3,130ac <_gp+0xffff4ba0>
   130f0:	8809883a 	mov	r4,r17
   130f4:	00000506 	br	1310c <putc+0xb0>
   130f8:	8809883a 	mov	r4,r17
   130fc:	00142340 	call	14234 <__sinit>
   13100:	003fe306 	br	13090 <_gp+0xffff4b84>
   13104:	8809883a 	mov	r4,r17
   13108:	900b883a 	mov	r5,r18
   1310c:	800d883a 	mov	r6,r16
   13110:	dfc00317 	ldw	ra,12(sp)
   13114:	dc800217 	ldw	r18,8(sp)
   13118:	dc400117 	ldw	r17,4(sp)
   1311c:	dc000017 	ldw	r16,0(sp)
   13120:	dec00404 	addi	sp,sp,16
   13124:	00138041 	jmpi	13804 <__swbuf_r>

00013128 <_realloc_r>:
   13128:	defff604 	addi	sp,sp,-40
   1312c:	dd000415 	stw	r20,16(sp)
   13130:	dc400115 	stw	r17,4(sp)
   13134:	dfc00915 	stw	ra,36(sp)
   13138:	df000815 	stw	fp,32(sp)
   1313c:	ddc00715 	stw	r23,28(sp)
   13140:	dd800615 	stw	r22,24(sp)
   13144:	dd400515 	stw	r21,20(sp)
   13148:	dcc00315 	stw	r19,12(sp)
   1314c:	dc800215 	stw	r18,8(sp)
   13150:	dc000015 	stw	r16,0(sp)
   13154:	2829883a 	mov	r20,r5
   13158:	3023883a 	mov	r17,r6
   1315c:	2800ad26 	beq	r5,zero,13414 <_realloc_r+0x2ec>
   13160:	2025883a 	mov	r18,r4
   13164:	00155f80 	call	155f8 <__malloc_lock>
   13168:	a0ffff17 	ldw	r3,-4(r20)
   1316c:	043fff04 	movi	r16,-4
   13170:	890002c4 	addi	r4,r17,11
   13174:	01c00584 	movi	r7,22
   13178:	a57ffe04 	addi	r21,r20,-8
   1317c:	1c20703a 	and	r16,r3,r16
   13180:	39001d2e 	bgeu	r7,r4,131f8 <_realloc_r+0xd0>
   13184:	05bffe04 	movi	r22,-8
   13188:	25ac703a 	and	r22,r4,r22
   1318c:	b00f883a 	mov	r7,r22
   13190:	b0006516 	blt	r22,zero,13328 <_realloc_r+0x200>
   13194:	b4406436 	bltu	r22,r17,13328 <_realloc_r+0x200>
   13198:	81c01a0e 	bge	r16,r7,13204 <_realloc_r+0xdc>
   1319c:	07000074 	movhi	fp,1
   131a0:	e7184104 	addi	fp,fp,24836
   131a4:	e1400217 	ldw	r5,8(fp)
   131a8:	ac11883a 	add	r8,r21,r16
   131ac:	2a006226 	beq	r5,r8,13338 <_realloc_r+0x210>
   131b0:	41800117 	ldw	r6,4(r8)
   131b4:	027fff84 	movi	r9,-2
   131b8:	3252703a 	and	r9,r6,r9
   131bc:	4253883a 	add	r9,r8,r9
   131c0:	49000117 	ldw	r4,4(r9)
   131c4:	2100004c 	andi	r4,r4,1
   131c8:	2000281e 	bne	r4,zero,1326c <_realloc_r+0x144>
   131cc:	00bfff04 	movi	r2,-4
   131d0:	3084703a 	and	r2,r6,r2
   131d4:	1409883a 	add	r4,r2,r16
   131d8:	21c05e16 	blt	r4,r7,13354 <_realloc_r+0x22c>
   131dc:	40800317 	ldw	r2,12(r8)
   131e0:	41400217 	ldw	r5,8(r8)
   131e4:	a023883a 	mov	r17,r20
   131e8:	2021883a 	mov	r16,r4
   131ec:	28800315 	stw	r2,12(r5)
   131f0:	11400215 	stw	r5,8(r2)
   131f4:	00000406 	br	13208 <_realloc_r+0xe0>
   131f8:	01c00404 	movi	r7,16
   131fc:	382d883a 	mov	r22,r7
   13200:	003fe406 	br	13194 <_gp+0xffff4c88>
   13204:	a023883a 	mov	r17,r20
   13208:	858fc83a 	sub	r7,r16,r22
   1320c:	008003c4 	movi	r2,15
   13210:	18c0004c 	andi	r3,r3,1
   13214:	11c07236 	bltu	r2,r7,133e0 <_realloc_r+0x2b8>
   13218:	1c06b03a 	or	r3,r3,r16
   1321c:	a8c00115 	stw	r3,4(r21)
   13220:	ac21883a 	add	r16,r21,r16
   13224:	80800117 	ldw	r2,4(r16)
   13228:	10800054 	ori	r2,r2,1
   1322c:	80800115 	stw	r2,4(r16)
   13230:	9009883a 	mov	r4,r18
   13234:	00156180 	call	15618 <__malloc_unlock>
   13238:	8805883a 	mov	r2,r17
   1323c:	dfc00917 	ldw	ra,36(sp)
   13240:	df000817 	ldw	fp,32(sp)
   13244:	ddc00717 	ldw	r23,28(sp)
   13248:	dd800617 	ldw	r22,24(sp)
   1324c:	dd400517 	ldw	r21,20(sp)
   13250:	dd000417 	ldw	r20,16(sp)
   13254:	dcc00317 	ldw	r19,12(sp)
   13258:	dc800217 	ldw	r18,8(sp)
   1325c:	dc400117 	ldw	r17,4(sp)
   13260:	dc000017 	ldw	r16,0(sp)
   13264:	dec00a04 	addi	sp,sp,40
   13268:	f800283a 	ret
   1326c:	18c0004c 	andi	r3,r3,1
   13270:	1800081e 	bne	r3,zero,13294 <_realloc_r+0x16c>
   13274:	a4fffe17 	ldw	r19,-8(r20)
   13278:	00bfff04 	movi	r2,-4
   1327c:	ace7c83a 	sub	r19,r21,r19
   13280:	98c00117 	ldw	r3,4(r19)
   13284:	1886703a 	and	r3,r3,r2
   13288:	98000226 	beq	r19,zero,13294 <_realloc_r+0x16c>
   1328c:	1c2f883a 	add	r23,r3,r16
   13290:	b9c06d0e 	bge	r23,r7,13448 <_realloc_r+0x320>
   13294:	880b883a 	mov	r5,r17
   13298:	9009883a 	mov	r4,r18
   1329c:	001241c0 	call	1241c <_malloc_r>
   132a0:	1023883a 	mov	r17,r2
   132a4:	1000ef26 	beq	r2,zero,13664 <_realloc_r+0x53c>
   132a8:	a0ffff17 	ldw	r3,-4(r20)
   132ac:	113ffe04 	addi	r4,r2,-8
   132b0:	00bfff84 	movi	r2,-2
   132b4:	1884703a 	and	r2,r3,r2
   132b8:	a885883a 	add	r2,r21,r2
   132bc:	2080bf26 	beq	r4,r2,135bc <_realloc_r+0x494>
   132c0:	81bfff04 	addi	r6,r16,-4
   132c4:	00800904 	movi	r2,36
   132c8:	11808936 	bltu	r2,r6,134f0 <_realloc_r+0x3c8>
   132cc:	00c004c4 	movi	r3,19
   132d0:	19806c2e 	bgeu	r3,r6,13484 <_realloc_r+0x35c>
   132d4:	a0c00017 	ldw	r3,0(r20)
   132d8:	88c00015 	stw	r3,0(r17)
   132dc:	a0c00117 	ldw	r3,4(r20)
   132e0:	88c00115 	stw	r3,4(r17)
   132e4:	00c006c4 	movi	r3,27
   132e8:	1980ac36 	bltu	r3,r6,1359c <_realloc_r+0x474>
   132ec:	88800204 	addi	r2,r17,8
   132f0:	a0c00204 	addi	r3,r20,8
   132f4:	19000017 	ldw	r4,0(r3)
   132f8:	11000015 	stw	r4,0(r2)
   132fc:	19000117 	ldw	r4,4(r3)
   13300:	11000115 	stw	r4,4(r2)
   13304:	18c00217 	ldw	r3,8(r3)
   13308:	10c00215 	stw	r3,8(r2)
   1330c:	a00b883a 	mov	r5,r20
   13310:	9009883a 	mov	r4,r18
   13314:	00143a80 	call	143a8 <_free_r>
   13318:	9009883a 	mov	r4,r18
   1331c:	00156180 	call	15618 <__malloc_unlock>
   13320:	8805883a 	mov	r2,r17
   13324:	003fc506 	br	1323c <_gp+0xffff4d30>
   13328:	00800304 	movi	r2,12
   1332c:	90800015 	stw	r2,0(r18)
   13330:	0005883a 	mov	r2,zero
   13334:	003fc106 	br	1323c <_gp+0xffff4d30>
   13338:	29800117 	ldw	r6,4(r5)
   1333c:	00bfff04 	movi	r2,-4
   13340:	b1000404 	addi	r4,r22,16
   13344:	3084703a 	and	r2,r6,r2
   13348:	140d883a 	add	r6,r2,r16
   1334c:	31005b0e 	bge	r6,r4,134bc <_realloc_r+0x394>
   13350:	2811883a 	mov	r8,r5
   13354:	18c0004c 	andi	r3,r3,1
   13358:	183fce1e 	bne	r3,zero,13294 <_gp+0xffff4d88>
   1335c:	a4fffe17 	ldw	r19,-8(r20)
   13360:	00ffff04 	movi	r3,-4
   13364:	ace7c83a 	sub	r19,r21,r19
   13368:	99000117 	ldw	r4,4(r19)
   1336c:	20c6703a 	and	r3,r4,r3
   13370:	403fc526 	beq	r8,zero,13288 <_gp+0xffff4d7c>
   13374:	1c2f883a 	add	r23,r3,r16
   13378:	b8af883a 	add	r23,r23,r2
   1337c:	41406026 	beq	r8,r5,13500 <_realloc_r+0x3d8>
   13380:	b9ffc116 	blt	r23,r7,13288 <_gp+0xffff4d7c>
   13384:	40c00217 	ldw	r3,8(r8)
   13388:	40800317 	ldw	r2,12(r8)
   1338c:	81bfff04 	addi	r6,r16,-4
   13390:	01000904 	movi	r4,36
   13394:	18800315 	stw	r2,12(r3)
   13398:	10c00215 	stw	r3,8(r2)
   1339c:	99400217 	ldw	r5,8(r19)
   133a0:	98c00317 	ldw	r3,12(r19)
   133a4:	9c400204 	addi	r17,r19,8
   133a8:	28c00315 	stw	r3,12(r5)
   133ac:	19400215 	stw	r5,8(r3)
   133b0:	21802d36 	bltu	r4,r6,13468 <_realloc_r+0x340>
   133b4:	008004c4 	movi	r2,19
   133b8:	1180352e 	bgeu	r2,r6,13490 <_realloc_r+0x368>
   133bc:	a0800017 	ldw	r2,0(r20)
   133c0:	98800215 	stw	r2,8(r19)
   133c4:	a0800117 	ldw	r2,4(r20)
   133c8:	98800315 	stw	r2,12(r19)
   133cc:	008006c4 	movi	r2,27
   133d0:	11808036 	bltu	r2,r6,135d4 <_realloc_r+0x4ac>
   133d4:	98c00404 	addi	r3,r19,16
   133d8:	a5000204 	addi	r20,r20,8
   133dc:	00002d06 	br	13494 <_realloc_r+0x36c>
   133e0:	1d86b03a 	or	r3,r3,r22
   133e4:	ad8b883a 	add	r5,r21,r22
   133e8:	a8c00115 	stw	r3,4(r21)
   133ec:	38800054 	ori	r2,r7,1
   133f0:	28800115 	stw	r2,4(r5)
   133f4:	29cf883a 	add	r7,r5,r7
   133f8:	38800117 	ldw	r2,4(r7)
   133fc:	9009883a 	mov	r4,r18
   13400:	29400204 	addi	r5,r5,8
   13404:	10800054 	ori	r2,r2,1
   13408:	38800115 	stw	r2,4(r7)
   1340c:	00143a80 	call	143a8 <_free_r>
   13410:	003f8706 	br	13230 <_gp+0xffff4d24>
   13414:	300b883a 	mov	r5,r6
   13418:	dfc00917 	ldw	ra,36(sp)
   1341c:	df000817 	ldw	fp,32(sp)
   13420:	ddc00717 	ldw	r23,28(sp)
   13424:	dd800617 	ldw	r22,24(sp)
   13428:	dd400517 	ldw	r21,20(sp)
   1342c:	dd000417 	ldw	r20,16(sp)
   13430:	dcc00317 	ldw	r19,12(sp)
   13434:	dc800217 	ldw	r18,8(sp)
   13438:	dc400117 	ldw	r17,4(sp)
   1343c:	dc000017 	ldw	r16,0(sp)
   13440:	dec00a04 	addi	sp,sp,40
   13444:	001241c1 	jmpi	1241c <_malloc_r>
   13448:	98800317 	ldw	r2,12(r19)
   1344c:	98c00217 	ldw	r3,8(r19)
   13450:	81bfff04 	addi	r6,r16,-4
   13454:	01000904 	movi	r4,36
   13458:	18800315 	stw	r2,12(r3)
   1345c:	10c00215 	stw	r3,8(r2)
   13460:	9c400204 	addi	r17,r19,8
   13464:	21bfd32e 	bgeu	r4,r6,133b4 <_gp+0xffff4ea8>
   13468:	8809883a 	mov	r4,r17
   1346c:	a00b883a 	mov	r5,r20
   13470:	0012e600 	call	12e60 <memmove>
   13474:	98c00117 	ldw	r3,4(r19)
   13478:	b821883a 	mov	r16,r23
   1347c:	982b883a 	mov	r21,r19
   13480:	003f6106 	br	13208 <_gp+0xffff4cfc>
   13484:	8805883a 	mov	r2,r17
   13488:	a007883a 	mov	r3,r20
   1348c:	003f9906 	br	132f4 <_gp+0xffff4de8>
   13490:	8807883a 	mov	r3,r17
   13494:	a0800017 	ldw	r2,0(r20)
   13498:	b821883a 	mov	r16,r23
   1349c:	982b883a 	mov	r21,r19
   134a0:	18800015 	stw	r2,0(r3)
   134a4:	a0800117 	ldw	r2,4(r20)
   134a8:	18800115 	stw	r2,4(r3)
   134ac:	a0800217 	ldw	r2,8(r20)
   134b0:	18800215 	stw	r2,8(r3)
   134b4:	98c00117 	ldw	r3,4(r19)
   134b8:	003f5306 	br	13208 <_gp+0xffff4cfc>
   134bc:	adab883a 	add	r21,r21,r22
   134c0:	3585c83a 	sub	r2,r6,r22
   134c4:	e5400215 	stw	r21,8(fp)
   134c8:	10800054 	ori	r2,r2,1
   134cc:	a8800115 	stw	r2,4(r21)
   134d0:	a0bfff17 	ldw	r2,-4(r20)
   134d4:	9009883a 	mov	r4,r18
   134d8:	1080004c 	andi	r2,r2,1
   134dc:	b0acb03a 	or	r22,r22,r2
   134e0:	a5bfff15 	stw	r22,-4(r20)
   134e4:	00156180 	call	15618 <__malloc_unlock>
   134e8:	a005883a 	mov	r2,r20
   134ec:	003f5306 	br	1323c <_gp+0xffff4d30>
   134f0:	8809883a 	mov	r4,r17
   134f4:	a00b883a 	mov	r5,r20
   134f8:	0012e600 	call	12e60 <memmove>
   134fc:	003f8306 	br	1330c <_gp+0xffff4e00>
   13500:	b0800404 	addi	r2,r22,16
   13504:	b8bf6016 	blt	r23,r2,13288 <_gp+0xffff4d7c>
   13508:	98800317 	ldw	r2,12(r19)
   1350c:	98c00217 	ldw	r3,8(r19)
   13510:	81bfff04 	addi	r6,r16,-4
   13514:	01000904 	movi	r4,36
   13518:	18800315 	stw	r2,12(r3)
   1351c:	10c00215 	stw	r3,8(r2)
   13520:	9c400204 	addi	r17,r19,8
   13524:	21804336 	bltu	r4,r6,13634 <_realloc_r+0x50c>
   13528:	008004c4 	movi	r2,19
   1352c:	11803f2e 	bgeu	r2,r6,1362c <_realloc_r+0x504>
   13530:	a0800017 	ldw	r2,0(r20)
   13534:	98800215 	stw	r2,8(r19)
   13538:	a0800117 	ldw	r2,4(r20)
   1353c:	98800315 	stw	r2,12(r19)
   13540:	008006c4 	movi	r2,27
   13544:	11803f36 	bltu	r2,r6,13644 <_realloc_r+0x51c>
   13548:	98800404 	addi	r2,r19,16
   1354c:	a5000204 	addi	r20,r20,8
   13550:	a0c00017 	ldw	r3,0(r20)
   13554:	10c00015 	stw	r3,0(r2)
   13558:	a0c00117 	ldw	r3,4(r20)
   1355c:	10c00115 	stw	r3,4(r2)
   13560:	a0c00217 	ldw	r3,8(r20)
   13564:	10c00215 	stw	r3,8(r2)
   13568:	9d87883a 	add	r3,r19,r22
   1356c:	bd85c83a 	sub	r2,r23,r22
   13570:	e0c00215 	stw	r3,8(fp)
   13574:	10800054 	ori	r2,r2,1
   13578:	18800115 	stw	r2,4(r3)
   1357c:	98800117 	ldw	r2,4(r19)
   13580:	9009883a 	mov	r4,r18
   13584:	1080004c 	andi	r2,r2,1
   13588:	b0acb03a 	or	r22,r22,r2
   1358c:	9d800115 	stw	r22,4(r19)
   13590:	00156180 	call	15618 <__malloc_unlock>
   13594:	8805883a 	mov	r2,r17
   13598:	003f2806 	br	1323c <_gp+0xffff4d30>
   1359c:	a0c00217 	ldw	r3,8(r20)
   135a0:	88c00215 	stw	r3,8(r17)
   135a4:	a0c00317 	ldw	r3,12(r20)
   135a8:	88c00315 	stw	r3,12(r17)
   135ac:	30801126 	beq	r6,r2,135f4 <_realloc_r+0x4cc>
   135b0:	88800404 	addi	r2,r17,16
   135b4:	a0c00404 	addi	r3,r20,16
   135b8:	003f4e06 	br	132f4 <_gp+0xffff4de8>
   135bc:	893fff17 	ldw	r4,-4(r17)
   135c0:	00bfff04 	movi	r2,-4
   135c4:	a023883a 	mov	r17,r20
   135c8:	2084703a 	and	r2,r4,r2
   135cc:	80a1883a 	add	r16,r16,r2
   135d0:	003f0d06 	br	13208 <_gp+0xffff4cfc>
   135d4:	a0800217 	ldw	r2,8(r20)
   135d8:	98800415 	stw	r2,16(r19)
   135dc:	a0800317 	ldw	r2,12(r20)
   135e0:	98800515 	stw	r2,20(r19)
   135e4:	31000a26 	beq	r6,r4,13610 <_realloc_r+0x4e8>
   135e8:	98c00604 	addi	r3,r19,24
   135ec:	a5000404 	addi	r20,r20,16
   135f0:	003fa806 	br	13494 <_gp+0xffff4f88>
   135f4:	a1000417 	ldw	r4,16(r20)
   135f8:	88800604 	addi	r2,r17,24
   135fc:	a0c00604 	addi	r3,r20,24
   13600:	89000415 	stw	r4,16(r17)
   13604:	a1000517 	ldw	r4,20(r20)
   13608:	89000515 	stw	r4,20(r17)
   1360c:	003f3906 	br	132f4 <_gp+0xffff4de8>
   13610:	a0800417 	ldw	r2,16(r20)
   13614:	a5000604 	addi	r20,r20,24
   13618:	98c00804 	addi	r3,r19,32
   1361c:	98800615 	stw	r2,24(r19)
   13620:	a0bfff17 	ldw	r2,-4(r20)
   13624:	98800715 	stw	r2,28(r19)
   13628:	003f9a06 	br	13494 <_gp+0xffff4f88>
   1362c:	8805883a 	mov	r2,r17
   13630:	003fc706 	br	13550 <_gp+0xffff5044>
   13634:	8809883a 	mov	r4,r17
   13638:	a00b883a 	mov	r5,r20
   1363c:	0012e600 	call	12e60 <memmove>
   13640:	003fc906 	br	13568 <_gp+0xffff505c>
   13644:	a0800217 	ldw	r2,8(r20)
   13648:	98800415 	stw	r2,16(r19)
   1364c:	a0800317 	ldw	r2,12(r20)
   13650:	98800515 	stw	r2,20(r19)
   13654:	31000726 	beq	r6,r4,13674 <_realloc_r+0x54c>
   13658:	98800604 	addi	r2,r19,24
   1365c:	a5000404 	addi	r20,r20,16
   13660:	003fbb06 	br	13550 <_gp+0xffff5044>
   13664:	9009883a 	mov	r4,r18
   13668:	00156180 	call	15618 <__malloc_unlock>
   1366c:	0005883a 	mov	r2,zero
   13670:	003ef206 	br	1323c <_gp+0xffff4d30>
   13674:	a0c00417 	ldw	r3,16(r20)
   13678:	a5000604 	addi	r20,r20,24
   1367c:	98800804 	addi	r2,r19,32
   13680:	98c00615 	stw	r3,24(r19)
   13684:	a0ffff17 	ldw	r3,-4(r20)
   13688:	98c00715 	stw	r3,28(r19)
   1368c:	003fb006 	br	13550 <_gp+0xffff5044>

00013690 <__srget_r>:
   13690:	defffd04 	addi	sp,sp,-12
   13694:	dc400115 	stw	r17,4(sp)
   13698:	dc000015 	stw	r16,0(sp)
   1369c:	dfc00215 	stw	ra,8(sp)
   136a0:	2023883a 	mov	r17,r4
   136a4:	2821883a 	mov	r16,r5
   136a8:	20000226 	beq	r4,zero,136b4 <__srget_r+0x24>
   136ac:	20800e17 	ldw	r2,56(r4)
   136b0:	10001026 	beq	r2,zero,136f4 <__srget_r+0x64>
   136b4:	8809883a 	mov	r4,r17
   136b8:	800b883a 	mov	r5,r16
   136bc:	0014b180 	call	14b18 <__srefill_r>
   136c0:	10000e1e 	bne	r2,zero,136fc <__srget_r+0x6c>
   136c4:	80c00017 	ldw	r3,0(r16)
   136c8:	80800117 	ldw	r2,4(r16)
   136cc:	19000044 	addi	r4,r3,1
   136d0:	10bfffc4 	addi	r2,r2,-1
   136d4:	80800115 	stw	r2,4(r16)
   136d8:	81000015 	stw	r4,0(r16)
   136dc:	18800003 	ldbu	r2,0(r3)
   136e0:	dfc00217 	ldw	ra,8(sp)
   136e4:	dc400117 	ldw	r17,4(sp)
   136e8:	dc000017 	ldw	r16,0(sp)
   136ec:	dec00304 	addi	sp,sp,12
   136f0:	f800283a 	ret
   136f4:	00142340 	call	14234 <__sinit>
   136f8:	003fee06 	br	136b4 <_gp+0xffff51a8>
   136fc:	00bfffc4 	movi	r2,-1
   13700:	003ff706 	br	136e0 <_gp+0xffff51d4>

00013704 <__srget>:
   13704:	00800074 	movhi	r2,1
   13708:	10994d04 	addi	r2,r2,25908
   1370c:	200b883a 	mov	r5,r4
   13710:	11000017 	ldw	r4,0(r2)
   13714:	00136901 	jmpi	13690 <__srget_r>

00013718 <_sbrk_r>:
   13718:	defffd04 	addi	sp,sp,-12
   1371c:	dc000015 	stw	r16,0(sp)
   13720:	04000074 	movhi	r16,1
   13724:	dc400115 	stw	r17,4(sp)
   13728:	841be504 	addi	r16,r16,28564
   1372c:	2023883a 	mov	r17,r4
   13730:	2809883a 	mov	r4,r5
   13734:	dfc00215 	stw	ra,8(sp)
   13738:	80000015 	stw	zero,0(r16)
   1373c:	001578c0 	call	1578c <sbrk>
   13740:	00ffffc4 	movi	r3,-1
   13744:	10c00526 	beq	r2,r3,1375c <_sbrk_r+0x44>
   13748:	dfc00217 	ldw	ra,8(sp)
   1374c:	dc400117 	ldw	r17,4(sp)
   13750:	dc000017 	ldw	r16,0(sp)
   13754:	dec00304 	addi	sp,sp,12
   13758:	f800283a 	ret
   1375c:	80c00017 	ldw	r3,0(r16)
   13760:	183ff926 	beq	r3,zero,13748 <_gp+0xffff523c>
   13764:	88c00015 	stw	r3,0(r17)
   13768:	003ff706 	br	13748 <_gp+0xffff523c>

0001376c <strlen>:
   1376c:	208000cc 	andi	r2,r4,3
   13770:	10002026 	beq	r2,zero,137f4 <strlen+0x88>
   13774:	20800007 	ldb	r2,0(r4)
   13778:	10002026 	beq	r2,zero,137fc <strlen+0x90>
   1377c:	2005883a 	mov	r2,r4
   13780:	00000206 	br	1378c <strlen+0x20>
   13784:	10c00007 	ldb	r3,0(r2)
   13788:	18001826 	beq	r3,zero,137ec <strlen+0x80>
   1378c:	10800044 	addi	r2,r2,1
   13790:	10c000cc 	andi	r3,r2,3
   13794:	183ffb1e 	bne	r3,zero,13784 <_gp+0xffff5278>
   13798:	10c00017 	ldw	r3,0(r2)
   1379c:	01ffbff4 	movhi	r7,65279
   137a0:	39ffbfc4 	addi	r7,r7,-257
   137a4:	00ca303a 	nor	r5,zero,r3
   137a8:	01a02074 	movhi	r6,32897
   137ac:	19c7883a 	add	r3,r3,r7
   137b0:	31a02004 	addi	r6,r6,-32640
   137b4:	1946703a 	and	r3,r3,r5
   137b8:	1986703a 	and	r3,r3,r6
   137bc:	1800091e 	bne	r3,zero,137e4 <strlen+0x78>
   137c0:	10800104 	addi	r2,r2,4
   137c4:	10c00017 	ldw	r3,0(r2)
   137c8:	19cb883a 	add	r5,r3,r7
   137cc:	00c6303a 	nor	r3,zero,r3
   137d0:	28c6703a 	and	r3,r5,r3
   137d4:	1986703a 	and	r3,r3,r6
   137d8:	183ff926 	beq	r3,zero,137c0 <_gp+0xffff52b4>
   137dc:	00000106 	br	137e4 <strlen+0x78>
   137e0:	10800044 	addi	r2,r2,1
   137e4:	10c00007 	ldb	r3,0(r2)
   137e8:	183ffd1e 	bne	r3,zero,137e0 <_gp+0xffff52d4>
   137ec:	1105c83a 	sub	r2,r2,r4
   137f0:	f800283a 	ret
   137f4:	2005883a 	mov	r2,r4
   137f8:	003fe706 	br	13798 <_gp+0xffff528c>
   137fc:	0005883a 	mov	r2,zero
   13800:	f800283a 	ret

00013804 <__swbuf_r>:
   13804:	defffc04 	addi	sp,sp,-16
   13808:	dc800215 	stw	r18,8(sp)
   1380c:	dc400115 	stw	r17,4(sp)
   13810:	dc000015 	stw	r16,0(sp)
   13814:	dfc00315 	stw	ra,12(sp)
   13818:	2025883a 	mov	r18,r4
   1381c:	2823883a 	mov	r17,r5
   13820:	3021883a 	mov	r16,r6
   13824:	20000226 	beq	r4,zero,13830 <__swbuf_r+0x2c>
   13828:	20800e17 	ldw	r2,56(r4)
   1382c:	10004126 	beq	r2,zero,13934 <__swbuf_r+0x130>
   13830:	80c00617 	ldw	r3,24(r16)
   13834:	8180030b 	ldhu	r6,12(r16)
   13838:	80c00215 	stw	r3,8(r16)
   1383c:	30c0020c 	andi	r3,r6,8
   13840:	18003526 	beq	r3,zero,13918 <__swbuf_r+0x114>
   13844:	80c00417 	ldw	r3,16(r16)
   13848:	18003326 	beq	r3,zero,13918 <__swbuf_r+0x114>
   1384c:	3088000c 	andi	r2,r6,8192
   13850:	8c403fcc 	andi	r17,r17,255
   13854:	10001726 	beq	r2,zero,138b4 <__swbuf_r+0xb0>
   13858:	80800017 	ldw	r2,0(r16)
   1385c:	81000517 	ldw	r4,20(r16)
   13860:	10c7c83a 	sub	r3,r2,r3
   13864:	19001d0e 	bge	r3,r4,138dc <__swbuf_r+0xd8>
   13868:	18c00044 	addi	r3,r3,1
   1386c:	81400217 	ldw	r5,8(r16)
   13870:	11000044 	addi	r4,r2,1
   13874:	81000015 	stw	r4,0(r16)
   13878:	297fffc4 	addi	r5,r5,-1
   1387c:	81400215 	stw	r5,8(r16)
   13880:	14400005 	stb	r17,0(r2)
   13884:	80800517 	ldw	r2,20(r16)
   13888:	10c01d26 	beq	r2,r3,13900 <__swbuf_r+0xfc>
   1388c:	8080030b 	ldhu	r2,12(r16)
   13890:	1080004c 	andi	r2,r2,1
   13894:	1000181e 	bne	r2,zero,138f8 <__swbuf_r+0xf4>
   13898:	8805883a 	mov	r2,r17
   1389c:	dfc00317 	ldw	ra,12(sp)
   138a0:	dc800217 	ldw	r18,8(sp)
   138a4:	dc400117 	ldw	r17,4(sp)
   138a8:	dc000017 	ldw	r16,0(sp)
   138ac:	dec00404 	addi	sp,sp,16
   138b0:	f800283a 	ret
   138b4:	81001917 	ldw	r4,100(r16)
   138b8:	00b7ffc4 	movi	r2,-8193
   138bc:	31880014 	ori	r6,r6,8192
   138c0:	2084703a 	and	r2,r4,r2
   138c4:	80801915 	stw	r2,100(r16)
   138c8:	80800017 	ldw	r2,0(r16)
   138cc:	81000517 	ldw	r4,20(r16)
   138d0:	8180030d 	sth	r6,12(r16)
   138d4:	10c7c83a 	sub	r3,r2,r3
   138d8:	193fe316 	blt	r3,r4,13868 <_gp+0xffff535c>
   138dc:	9009883a 	mov	r4,r18
   138e0:	800b883a 	mov	r5,r16
   138e4:	0013e480 	call	13e48 <_fflush_r>
   138e8:	1000091e 	bne	r2,zero,13910 <__swbuf_r+0x10c>
   138ec:	80800017 	ldw	r2,0(r16)
   138f0:	00c00044 	movi	r3,1
   138f4:	003fdd06 	br	1386c <_gp+0xffff5360>
   138f8:	00800284 	movi	r2,10
   138fc:	88bfe61e 	bne	r17,r2,13898 <_gp+0xffff538c>
   13900:	9009883a 	mov	r4,r18
   13904:	800b883a 	mov	r5,r16
   13908:	0013e480 	call	13e48 <_fflush_r>
   1390c:	103fe226 	beq	r2,zero,13898 <_gp+0xffff538c>
   13910:	00bfffc4 	movi	r2,-1
   13914:	003fe106 	br	1389c <_gp+0xffff5390>
   13918:	9009883a 	mov	r4,r18
   1391c:	800b883a 	mov	r5,r16
   13920:	00139580 	call	13958 <__swsetup_r>
   13924:	103ffa1e 	bne	r2,zero,13910 <_gp+0xffff5404>
   13928:	8180030b 	ldhu	r6,12(r16)
   1392c:	80c00417 	ldw	r3,16(r16)
   13930:	003fc606 	br	1384c <_gp+0xffff5340>
   13934:	00142340 	call	14234 <__sinit>
   13938:	003fbd06 	br	13830 <_gp+0xffff5324>

0001393c <__swbuf>:
   1393c:	00c00074 	movhi	r3,1
   13940:	18d94d04 	addi	r3,r3,25908
   13944:	2005883a 	mov	r2,r4
   13948:	19000017 	ldw	r4,0(r3)
   1394c:	280d883a 	mov	r6,r5
   13950:	100b883a 	mov	r5,r2
   13954:	00138041 	jmpi	13804 <__swbuf_r>

00013958 <__swsetup_r>:
   13958:	00800074 	movhi	r2,1
   1395c:	defffd04 	addi	sp,sp,-12
   13960:	10994d04 	addi	r2,r2,25908
   13964:	dc400115 	stw	r17,4(sp)
   13968:	2023883a 	mov	r17,r4
   1396c:	11000017 	ldw	r4,0(r2)
   13970:	dc000015 	stw	r16,0(sp)
   13974:	dfc00215 	stw	ra,8(sp)
   13978:	2821883a 	mov	r16,r5
   1397c:	20000226 	beq	r4,zero,13988 <__swsetup_r+0x30>
   13980:	20c00e17 	ldw	r3,56(r4)
   13984:	18003126 	beq	r3,zero,13a4c <__swsetup_r+0xf4>
   13988:	8080030b 	ldhu	r2,12(r16)
   1398c:	10c0020c 	andi	r3,r2,8
   13990:	100d883a 	mov	r6,r2
   13994:	18000f26 	beq	r3,zero,139d4 <__swsetup_r+0x7c>
   13998:	80c00417 	ldw	r3,16(r16)
   1399c:	18001526 	beq	r3,zero,139f4 <__swsetup_r+0x9c>
   139a0:	1100004c 	andi	r4,r2,1
   139a4:	20001c1e 	bne	r4,zero,13a18 <__swsetup_r+0xc0>
   139a8:	1080008c 	andi	r2,r2,2
   139ac:	1000291e 	bne	r2,zero,13a54 <__swsetup_r+0xfc>
   139b0:	80800517 	ldw	r2,20(r16)
   139b4:	80800215 	stw	r2,8(r16)
   139b8:	18001c26 	beq	r3,zero,13a2c <__swsetup_r+0xd4>
   139bc:	0005883a 	mov	r2,zero
   139c0:	dfc00217 	ldw	ra,8(sp)
   139c4:	dc400117 	ldw	r17,4(sp)
   139c8:	dc000017 	ldw	r16,0(sp)
   139cc:	dec00304 	addi	sp,sp,12
   139d0:	f800283a 	ret
   139d4:	3080040c 	andi	r2,r6,16
   139d8:	10002e26 	beq	r2,zero,13a94 <__swsetup_r+0x13c>
   139dc:	3080010c 	andi	r2,r6,4
   139e0:	10001e1e 	bne	r2,zero,13a5c <__swsetup_r+0x104>
   139e4:	80c00417 	ldw	r3,16(r16)
   139e8:	30800214 	ori	r2,r6,8
   139ec:	8080030d 	sth	r2,12(r16)
   139f0:	183feb1e 	bne	r3,zero,139a0 <_gp+0xffff5494>
   139f4:	1140a00c 	andi	r5,r2,640
   139f8:	01008004 	movi	r4,512
   139fc:	293fe826 	beq	r5,r4,139a0 <_gp+0xffff5494>
   13a00:	8809883a 	mov	r4,r17
   13a04:	800b883a 	mov	r5,r16
   13a08:	00148200 	call	14820 <__smakebuf_r>
   13a0c:	8080030b 	ldhu	r2,12(r16)
   13a10:	80c00417 	ldw	r3,16(r16)
   13a14:	003fe206 	br	139a0 <_gp+0xffff5494>
   13a18:	80800517 	ldw	r2,20(r16)
   13a1c:	80000215 	stw	zero,8(r16)
   13a20:	0085c83a 	sub	r2,zero,r2
   13a24:	80800615 	stw	r2,24(r16)
   13a28:	183fe41e 	bne	r3,zero,139bc <_gp+0xffff54b0>
   13a2c:	80c0030b 	ldhu	r3,12(r16)
   13a30:	0005883a 	mov	r2,zero
   13a34:	1900200c 	andi	r4,r3,128
   13a38:	203fe126 	beq	r4,zero,139c0 <_gp+0xffff54b4>
   13a3c:	18c01014 	ori	r3,r3,64
   13a40:	80c0030d 	sth	r3,12(r16)
   13a44:	00bfffc4 	movi	r2,-1
   13a48:	003fdd06 	br	139c0 <_gp+0xffff54b4>
   13a4c:	00142340 	call	14234 <__sinit>
   13a50:	003fcd06 	br	13988 <_gp+0xffff547c>
   13a54:	0005883a 	mov	r2,zero
   13a58:	003fd606 	br	139b4 <_gp+0xffff54a8>
   13a5c:	81400c17 	ldw	r5,48(r16)
   13a60:	28000626 	beq	r5,zero,13a7c <__swsetup_r+0x124>
   13a64:	80801004 	addi	r2,r16,64
   13a68:	28800326 	beq	r5,r2,13a78 <__swsetup_r+0x120>
   13a6c:	8809883a 	mov	r4,r17
   13a70:	00143a80 	call	143a8 <_free_r>
   13a74:	8180030b 	ldhu	r6,12(r16)
   13a78:	80000c15 	stw	zero,48(r16)
   13a7c:	80c00417 	ldw	r3,16(r16)
   13a80:	00bff6c4 	movi	r2,-37
   13a84:	118c703a 	and	r6,r2,r6
   13a88:	80000115 	stw	zero,4(r16)
   13a8c:	80c00015 	stw	r3,0(r16)
   13a90:	003fd506 	br	139e8 <_gp+0xffff54dc>
   13a94:	00800244 	movi	r2,9
   13a98:	88800015 	stw	r2,0(r17)
   13a9c:	30801014 	ori	r2,r6,64
   13aa0:	8080030d 	sth	r2,12(r16)
   13aa4:	00bfffc4 	movi	r2,-1
   13aa8:	003fc506 	br	139c0 <_gp+0xffff54b4>

00013aac <__call_exitprocs>:
   13aac:	00800074 	movhi	r2,1
   13ab0:	10994c04 	addi	r2,r2,25904
   13ab4:	10800017 	ldw	r2,0(r2)
   13ab8:	defff404 	addi	sp,sp,-48
   13abc:	dd800815 	stw	r22,32(sp)
   13ac0:	d8800015 	stw	r2,0(sp)
   13ac4:	10805204 	addi	r2,r2,328
   13ac8:	dd000615 	stw	r20,24(sp)
   13acc:	dc800415 	stw	r18,16(sp)
   13ad0:	dfc00b15 	stw	ra,44(sp)
   13ad4:	df000a15 	stw	fp,40(sp)
   13ad8:	ddc00915 	stw	r23,36(sp)
   13adc:	dd400715 	stw	r21,28(sp)
   13ae0:	dcc00515 	stw	r19,20(sp)
   13ae4:	dc400315 	stw	r17,12(sp)
   13ae8:	dc000215 	stw	r16,8(sp)
   13aec:	2025883a 	mov	r18,r4
   13af0:	2829883a 	mov	r20,r5
   13af4:	d8800115 	stw	r2,4(sp)
   13af8:	05bfffc4 	movi	r22,-1
   13afc:	d8800017 	ldw	r2,0(sp)
   13b00:	14c05217 	ldw	r19,328(r2)
   13b04:	98001d26 	beq	r19,zero,13b7c <__call_exitprocs+0xd0>
   13b08:	dd400117 	ldw	r21,4(sp)
   13b0c:	98800117 	ldw	r2,4(r19)
   13b10:	173fffc4 	addi	fp,r2,-1
   13b14:	e0000d16 	blt	fp,zero,13b4c <__call_exitprocs+0xa0>
   13b18:	14000044 	addi	r16,r2,1
   13b1c:	8421883a 	add	r16,r16,r16
   13b20:	8421883a 	add	r16,r16,r16
   13b24:	84402004 	addi	r17,r16,128
   13b28:	9c63883a 	add	r17,r19,r17
   13b2c:	9c21883a 	add	r16,r19,r16
   13b30:	a0001e26 	beq	r20,zero,13bac <__call_exitprocs+0x100>
   13b34:	80804017 	ldw	r2,256(r16)
   13b38:	15001c26 	beq	r2,r20,13bac <__call_exitprocs+0x100>
   13b3c:	e73fffc4 	addi	fp,fp,-1
   13b40:	843fff04 	addi	r16,r16,-4
   13b44:	8c7fff04 	addi	r17,r17,-4
   13b48:	e5bff91e 	bne	fp,r22,13b30 <_gp+0xffff5624>
   13b4c:	00800034 	movhi	r2,0
   13b50:	10800004 	addi	r2,r2,0
   13b54:	10000926 	beq	r2,zero,13b7c <__call_exitprocs+0xd0>
   13b58:	98800117 	ldw	r2,4(r19)
   13b5c:	1000311e 	bne	r2,zero,13c24 <__call_exitprocs+0x178>
   13b60:	98800017 	ldw	r2,0(r19)
   13b64:	10003426 	beq	r2,zero,13c38 <__call_exitprocs+0x18c>
   13b68:	9809883a 	mov	r4,r19
   13b6c:	a8800015 	stw	r2,0(r21)
   13b70:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>
   13b74:	acc00017 	ldw	r19,0(r21)
   13b78:	983fe41e 	bne	r19,zero,13b0c <_gp+0xffff5600>
   13b7c:	dfc00b17 	ldw	ra,44(sp)
   13b80:	df000a17 	ldw	fp,40(sp)
   13b84:	ddc00917 	ldw	r23,36(sp)
   13b88:	dd800817 	ldw	r22,32(sp)
   13b8c:	dd400717 	ldw	r21,28(sp)
   13b90:	dd000617 	ldw	r20,24(sp)
   13b94:	dcc00517 	ldw	r19,20(sp)
   13b98:	dc800417 	ldw	r18,16(sp)
   13b9c:	dc400317 	ldw	r17,12(sp)
   13ba0:	dc000217 	ldw	r16,8(sp)
   13ba4:	dec00c04 	addi	sp,sp,48
   13ba8:	f800283a 	ret
   13bac:	98800117 	ldw	r2,4(r19)
   13bb0:	80c00017 	ldw	r3,0(r16)
   13bb4:	10bfffc4 	addi	r2,r2,-1
   13bb8:	17001526 	beq	r2,fp,13c10 <__call_exitprocs+0x164>
   13bbc:	80000015 	stw	zero,0(r16)
   13bc0:	183fde26 	beq	r3,zero,13b3c <_gp+0xffff5630>
   13bc4:	00800044 	movi	r2,1
   13bc8:	1708983a 	sll	r4,r2,fp
   13bcc:	98806217 	ldw	r2,392(r19)
   13bd0:	9dc00117 	ldw	r23,4(r19)
   13bd4:	2084703a 	and	r2,r4,r2
   13bd8:	1000061e 	bne	r2,zero,13bf4 <__call_exitprocs+0x148>
   13bdc:	183ee83a 	callr	r3
   13be0:	98800117 	ldw	r2,4(r19)
   13be4:	15ffc51e 	bne	r2,r23,13afc <_gp+0xffff55f0>
   13be8:	a8800017 	ldw	r2,0(r21)
   13bec:	14ffd326 	beq	r2,r19,13b3c <_gp+0xffff5630>
   13bf0:	003fc206 	br	13afc <_gp+0xffff55f0>
   13bf4:	98806317 	ldw	r2,396(r19)
   13bf8:	2084703a 	and	r2,r4,r2
   13bfc:	1000061e 	bne	r2,zero,13c18 <__call_exitprocs+0x16c>
   13c00:	89400017 	ldw	r5,0(r17)
   13c04:	9009883a 	mov	r4,r18
   13c08:	183ee83a 	callr	r3
   13c0c:	003ff406 	br	13be0 <_gp+0xffff56d4>
   13c10:	9f000115 	stw	fp,4(r19)
   13c14:	003fea06 	br	13bc0 <_gp+0xffff56b4>
   13c18:	89000017 	ldw	r4,0(r17)
   13c1c:	183ee83a 	callr	r3
   13c20:	003fef06 	br	13be0 <_gp+0xffff56d4>
   13c24:	98800017 	ldw	r2,0(r19)
   13c28:	982b883a 	mov	r21,r19
   13c2c:	1027883a 	mov	r19,r2
   13c30:	983fb61e 	bne	r19,zero,13b0c <_gp+0xffff5600>
   13c34:	003fd106 	br	13b7c <_gp+0xffff5670>
   13c38:	0005883a 	mov	r2,zero
   13c3c:	003ffa06 	br	13c28 <_gp+0xffff571c>

00013c40 <__sflush_r>:
   13c40:	2880030b 	ldhu	r2,12(r5)
   13c44:	defffb04 	addi	sp,sp,-20
   13c48:	dcc00315 	stw	r19,12(sp)
   13c4c:	dc400115 	stw	r17,4(sp)
   13c50:	dfc00415 	stw	ra,16(sp)
   13c54:	dc800215 	stw	r18,8(sp)
   13c58:	dc000015 	stw	r16,0(sp)
   13c5c:	10c0020c 	andi	r3,r2,8
   13c60:	2823883a 	mov	r17,r5
   13c64:	2027883a 	mov	r19,r4
   13c68:	1800311e 	bne	r3,zero,13d30 <__sflush_r+0xf0>
   13c6c:	28c00117 	ldw	r3,4(r5)
   13c70:	10820014 	ori	r2,r2,2048
   13c74:	2880030d 	sth	r2,12(r5)
   13c78:	00c04b0e 	bge	zero,r3,13da8 <__sflush_r+0x168>
   13c7c:	8a000a17 	ldw	r8,40(r17)
   13c80:	40002326 	beq	r8,zero,13d10 <__sflush_r+0xd0>
   13c84:	9c000017 	ldw	r16,0(r19)
   13c88:	10c4000c 	andi	r3,r2,4096
   13c8c:	98000015 	stw	zero,0(r19)
   13c90:	18004826 	beq	r3,zero,13db4 <__sflush_r+0x174>
   13c94:	89801417 	ldw	r6,80(r17)
   13c98:	10c0010c 	andi	r3,r2,4
   13c9c:	18000626 	beq	r3,zero,13cb8 <__sflush_r+0x78>
   13ca0:	88c00117 	ldw	r3,4(r17)
   13ca4:	88800c17 	ldw	r2,48(r17)
   13ca8:	30cdc83a 	sub	r6,r6,r3
   13cac:	10000226 	beq	r2,zero,13cb8 <__sflush_r+0x78>
   13cb0:	88800f17 	ldw	r2,60(r17)
   13cb4:	308dc83a 	sub	r6,r6,r2
   13cb8:	89400717 	ldw	r5,28(r17)
   13cbc:	9809883a 	mov	r4,r19
   13cc0:	000f883a 	mov	r7,zero
   13cc4:	403ee83a 	callr	r8
   13cc8:	00ffffc4 	movi	r3,-1
   13ccc:	10c04426 	beq	r2,r3,13de0 <__sflush_r+0x1a0>
   13cd0:	88c0030b 	ldhu	r3,12(r17)
   13cd4:	89000417 	ldw	r4,16(r17)
   13cd8:	88000115 	stw	zero,4(r17)
   13cdc:	197dffcc 	andi	r5,r3,63487
   13ce0:	8940030d 	sth	r5,12(r17)
   13ce4:	89000015 	stw	r4,0(r17)
   13ce8:	18c4000c 	andi	r3,r3,4096
   13cec:	18002c1e 	bne	r3,zero,13da0 <__sflush_r+0x160>
   13cf0:	89400c17 	ldw	r5,48(r17)
   13cf4:	9c000015 	stw	r16,0(r19)
   13cf8:	28000526 	beq	r5,zero,13d10 <__sflush_r+0xd0>
   13cfc:	88801004 	addi	r2,r17,64
   13d00:	28800226 	beq	r5,r2,13d0c <__sflush_r+0xcc>
   13d04:	9809883a 	mov	r4,r19
   13d08:	00143a80 	call	143a8 <_free_r>
   13d0c:	88000c15 	stw	zero,48(r17)
   13d10:	0005883a 	mov	r2,zero
   13d14:	dfc00417 	ldw	ra,16(sp)
   13d18:	dcc00317 	ldw	r19,12(sp)
   13d1c:	dc800217 	ldw	r18,8(sp)
   13d20:	dc400117 	ldw	r17,4(sp)
   13d24:	dc000017 	ldw	r16,0(sp)
   13d28:	dec00504 	addi	sp,sp,20
   13d2c:	f800283a 	ret
   13d30:	2c800417 	ldw	r18,16(r5)
   13d34:	903ff626 	beq	r18,zero,13d10 <_gp+0xffff5804>
   13d38:	2c000017 	ldw	r16,0(r5)
   13d3c:	108000cc 	andi	r2,r2,3
   13d40:	2c800015 	stw	r18,0(r5)
   13d44:	84a1c83a 	sub	r16,r16,r18
   13d48:	1000131e 	bne	r2,zero,13d98 <__sflush_r+0x158>
   13d4c:	28800517 	ldw	r2,20(r5)
   13d50:	88800215 	stw	r2,8(r17)
   13d54:	04000316 	blt	zero,r16,13d64 <__sflush_r+0x124>
   13d58:	003fed06 	br	13d10 <_gp+0xffff5804>
   13d5c:	90a5883a 	add	r18,r18,r2
   13d60:	043feb0e 	bge	zero,r16,13d10 <_gp+0xffff5804>
   13d64:	88800917 	ldw	r2,36(r17)
   13d68:	89400717 	ldw	r5,28(r17)
   13d6c:	800f883a 	mov	r7,r16
   13d70:	900d883a 	mov	r6,r18
   13d74:	9809883a 	mov	r4,r19
   13d78:	103ee83a 	callr	r2
   13d7c:	80a1c83a 	sub	r16,r16,r2
   13d80:	00bff616 	blt	zero,r2,13d5c <_gp+0xffff5850>
   13d84:	88c0030b 	ldhu	r3,12(r17)
   13d88:	00bfffc4 	movi	r2,-1
   13d8c:	18c01014 	ori	r3,r3,64
   13d90:	88c0030d 	sth	r3,12(r17)
   13d94:	003fdf06 	br	13d14 <_gp+0xffff5808>
   13d98:	0005883a 	mov	r2,zero
   13d9c:	003fec06 	br	13d50 <_gp+0xffff5844>
   13da0:	88801415 	stw	r2,80(r17)
   13da4:	003fd206 	br	13cf0 <_gp+0xffff57e4>
   13da8:	28c00f17 	ldw	r3,60(r5)
   13dac:	00ffb316 	blt	zero,r3,13c7c <_gp+0xffff5770>
   13db0:	003fd706 	br	13d10 <_gp+0xffff5804>
   13db4:	89400717 	ldw	r5,28(r17)
   13db8:	000d883a 	mov	r6,zero
   13dbc:	9809883a 	mov	r4,r19
   13dc0:	01c00044 	movi	r7,1
   13dc4:	403ee83a 	callr	r8
   13dc8:	100d883a 	mov	r6,r2
   13dcc:	00bfffc4 	movi	r2,-1
   13dd0:	30801426 	beq	r6,r2,13e24 <__sflush_r+0x1e4>
   13dd4:	8880030b 	ldhu	r2,12(r17)
   13dd8:	8a000a17 	ldw	r8,40(r17)
   13ddc:	003fae06 	br	13c98 <_gp+0xffff578c>
   13de0:	98c00017 	ldw	r3,0(r19)
   13de4:	183fba26 	beq	r3,zero,13cd0 <_gp+0xffff57c4>
   13de8:	01000744 	movi	r4,29
   13dec:	19000626 	beq	r3,r4,13e08 <__sflush_r+0x1c8>
   13df0:	01000584 	movi	r4,22
   13df4:	19000426 	beq	r3,r4,13e08 <__sflush_r+0x1c8>
   13df8:	88c0030b 	ldhu	r3,12(r17)
   13dfc:	18c01014 	ori	r3,r3,64
   13e00:	88c0030d 	sth	r3,12(r17)
   13e04:	003fc306 	br	13d14 <_gp+0xffff5808>
   13e08:	8880030b 	ldhu	r2,12(r17)
   13e0c:	88c00417 	ldw	r3,16(r17)
   13e10:	88000115 	stw	zero,4(r17)
   13e14:	10bdffcc 	andi	r2,r2,63487
   13e18:	8880030d 	sth	r2,12(r17)
   13e1c:	88c00015 	stw	r3,0(r17)
   13e20:	003fb306 	br	13cf0 <_gp+0xffff57e4>
   13e24:	98800017 	ldw	r2,0(r19)
   13e28:	103fea26 	beq	r2,zero,13dd4 <_gp+0xffff58c8>
   13e2c:	00c00744 	movi	r3,29
   13e30:	10c00226 	beq	r2,r3,13e3c <__sflush_r+0x1fc>
   13e34:	00c00584 	movi	r3,22
   13e38:	10ffd21e 	bne	r2,r3,13d84 <_gp+0xffff5878>
   13e3c:	9c000015 	stw	r16,0(r19)
   13e40:	0005883a 	mov	r2,zero
   13e44:	003fb306 	br	13d14 <_gp+0xffff5808>

00013e48 <_fflush_r>:
   13e48:	defffd04 	addi	sp,sp,-12
   13e4c:	dc000115 	stw	r16,4(sp)
   13e50:	dfc00215 	stw	ra,8(sp)
   13e54:	2021883a 	mov	r16,r4
   13e58:	20000226 	beq	r4,zero,13e64 <_fflush_r+0x1c>
   13e5c:	20800e17 	ldw	r2,56(r4)
   13e60:	10000c26 	beq	r2,zero,13e94 <_fflush_r+0x4c>
   13e64:	2880030f 	ldh	r2,12(r5)
   13e68:	1000051e 	bne	r2,zero,13e80 <_fflush_r+0x38>
   13e6c:	0005883a 	mov	r2,zero
   13e70:	dfc00217 	ldw	ra,8(sp)
   13e74:	dc000117 	ldw	r16,4(sp)
   13e78:	dec00304 	addi	sp,sp,12
   13e7c:	f800283a 	ret
   13e80:	8009883a 	mov	r4,r16
   13e84:	dfc00217 	ldw	ra,8(sp)
   13e88:	dc000117 	ldw	r16,4(sp)
   13e8c:	dec00304 	addi	sp,sp,12
   13e90:	0013c401 	jmpi	13c40 <__sflush_r>
   13e94:	d9400015 	stw	r5,0(sp)
   13e98:	00142340 	call	14234 <__sinit>
   13e9c:	d9400017 	ldw	r5,0(sp)
   13ea0:	003ff006 	br	13e64 <_gp+0xffff5958>

00013ea4 <fflush>:
   13ea4:	20000526 	beq	r4,zero,13ebc <fflush+0x18>
   13ea8:	00800074 	movhi	r2,1
   13eac:	10994d04 	addi	r2,r2,25908
   13eb0:	200b883a 	mov	r5,r4
   13eb4:	11000017 	ldw	r4,0(r2)
   13eb8:	0013e481 	jmpi	13e48 <_fflush_r>
   13ebc:	00800074 	movhi	r2,1
   13ec0:	10994c04 	addi	r2,r2,25904
   13ec4:	11000017 	ldw	r4,0(r2)
   13ec8:	01400074 	movhi	r5,1
   13ecc:	294f9204 	addi	r5,r5,15944
   13ed0:	001475c1 	jmpi	1475c <_fwalk_reent>

00013ed4 <__fp_lock>:
   13ed4:	0005883a 	mov	r2,zero
   13ed8:	f800283a 	ret

00013edc <__fp_unlock>:
   13edc:	0005883a 	mov	r2,zero
   13ee0:	f800283a 	ret

00013ee4 <_cleanup_r>:
   13ee4:	01400074 	movhi	r5,1
   13ee8:	2953b604 	addi	r5,r5,20184
   13eec:	001475c1 	jmpi	1475c <_fwalk_reent>

00013ef0 <__sinit.part.1>:
   13ef0:	defff704 	addi	sp,sp,-36
   13ef4:	00c00074 	movhi	r3,1
   13ef8:	dfc00815 	stw	ra,32(sp)
   13efc:	ddc00715 	stw	r23,28(sp)
   13f00:	dd800615 	stw	r22,24(sp)
   13f04:	dd400515 	stw	r21,20(sp)
   13f08:	dd000415 	stw	r20,16(sp)
   13f0c:	dcc00315 	stw	r19,12(sp)
   13f10:	dc800215 	stw	r18,8(sp)
   13f14:	dc400115 	stw	r17,4(sp)
   13f18:	dc000015 	stw	r16,0(sp)
   13f1c:	18cfb904 	addi	r3,r3,16100
   13f20:	24000117 	ldw	r16,4(r4)
   13f24:	20c00f15 	stw	r3,60(r4)
   13f28:	2080bb04 	addi	r2,r4,748
   13f2c:	00c000c4 	movi	r3,3
   13f30:	20c0b915 	stw	r3,740(r4)
   13f34:	2080ba15 	stw	r2,744(r4)
   13f38:	2000b815 	stw	zero,736(r4)
   13f3c:	05c00204 	movi	r23,8
   13f40:	00800104 	movi	r2,4
   13f44:	2025883a 	mov	r18,r4
   13f48:	b80d883a 	mov	r6,r23
   13f4c:	81001704 	addi	r4,r16,92
   13f50:	000b883a 	mov	r5,zero
   13f54:	80000015 	stw	zero,0(r16)
   13f58:	80000115 	stw	zero,4(r16)
   13f5c:	80000215 	stw	zero,8(r16)
   13f60:	8080030d 	sth	r2,12(r16)
   13f64:	80001915 	stw	zero,100(r16)
   13f68:	8000038d 	sth	zero,14(r16)
   13f6c:	80000415 	stw	zero,16(r16)
   13f70:	80000515 	stw	zero,20(r16)
   13f74:	80000615 	stw	zero,24(r16)
   13f78:	00149d80 	call	149d8 <memset>
   13f7c:	05800074 	movhi	r22,1
   13f80:	94400217 	ldw	r17,8(r18)
   13f84:	05400074 	movhi	r21,1
   13f88:	05000074 	movhi	r20,1
   13f8c:	04c00074 	movhi	r19,1
   13f90:	b5933b04 	addi	r22,r22,19692
   13f94:	ad535204 	addi	r21,r21,19784
   13f98:	a5137104 	addi	r20,r20,19908
   13f9c:	9cd38804 	addi	r19,r19,20000
   13fa0:	85800815 	stw	r22,32(r16)
   13fa4:	85400915 	stw	r21,36(r16)
   13fa8:	85000a15 	stw	r20,40(r16)
   13fac:	84c00b15 	stw	r19,44(r16)
   13fb0:	84000715 	stw	r16,28(r16)
   13fb4:	00800284 	movi	r2,10
   13fb8:	8880030d 	sth	r2,12(r17)
   13fbc:	00800044 	movi	r2,1
   13fc0:	89001704 	addi	r4,r17,92
   13fc4:	b80d883a 	mov	r6,r23
   13fc8:	000b883a 	mov	r5,zero
   13fcc:	88000015 	stw	zero,0(r17)
   13fd0:	88000115 	stw	zero,4(r17)
   13fd4:	88000215 	stw	zero,8(r17)
   13fd8:	88001915 	stw	zero,100(r17)
   13fdc:	8880038d 	sth	r2,14(r17)
   13fe0:	88000415 	stw	zero,16(r17)
   13fe4:	88000515 	stw	zero,20(r17)
   13fe8:	88000615 	stw	zero,24(r17)
   13fec:	00149d80 	call	149d8 <memset>
   13ff0:	94000317 	ldw	r16,12(r18)
   13ff4:	00800484 	movi	r2,18
   13ff8:	8c400715 	stw	r17,28(r17)
   13ffc:	8d800815 	stw	r22,32(r17)
   14000:	8d400915 	stw	r21,36(r17)
   14004:	8d000a15 	stw	r20,40(r17)
   14008:	8cc00b15 	stw	r19,44(r17)
   1400c:	8080030d 	sth	r2,12(r16)
   14010:	00800084 	movi	r2,2
   14014:	80000015 	stw	zero,0(r16)
   14018:	80000115 	stw	zero,4(r16)
   1401c:	80000215 	stw	zero,8(r16)
   14020:	80001915 	stw	zero,100(r16)
   14024:	8080038d 	sth	r2,14(r16)
   14028:	80000415 	stw	zero,16(r16)
   1402c:	80000515 	stw	zero,20(r16)
   14030:	80000615 	stw	zero,24(r16)
   14034:	81001704 	addi	r4,r16,92
   14038:	000b883a 	mov	r5,zero
   1403c:	b80d883a 	mov	r6,r23
   14040:	00149d80 	call	149d8 <memset>
   14044:	00800044 	movi	r2,1
   14048:	84000715 	stw	r16,28(r16)
   1404c:	85800815 	stw	r22,32(r16)
   14050:	85400915 	stw	r21,36(r16)
   14054:	85000a15 	stw	r20,40(r16)
   14058:	84c00b15 	stw	r19,44(r16)
   1405c:	90800e15 	stw	r2,56(r18)
   14060:	dfc00817 	ldw	ra,32(sp)
   14064:	ddc00717 	ldw	r23,28(sp)
   14068:	dd800617 	ldw	r22,24(sp)
   1406c:	dd400517 	ldw	r21,20(sp)
   14070:	dd000417 	ldw	r20,16(sp)
   14074:	dcc00317 	ldw	r19,12(sp)
   14078:	dc800217 	ldw	r18,8(sp)
   1407c:	dc400117 	ldw	r17,4(sp)
   14080:	dc000017 	ldw	r16,0(sp)
   14084:	dec00904 	addi	sp,sp,36
   14088:	f800283a 	ret

0001408c <__sfmoreglue>:
   1408c:	defffc04 	addi	sp,sp,-16
   14090:	dc800215 	stw	r18,8(sp)
   14094:	2825883a 	mov	r18,r5
   14098:	dc000015 	stw	r16,0(sp)
   1409c:	01401a04 	movi	r5,104
   140a0:	2021883a 	mov	r16,r4
   140a4:	913fffc4 	addi	r4,r18,-1
   140a8:	dfc00315 	stw	ra,12(sp)
   140ac:	dc400115 	stw	r17,4(sp)
   140b0:	001526c0 	call	1526c <__mulsi3>
   140b4:	8009883a 	mov	r4,r16
   140b8:	11401d04 	addi	r5,r2,116
   140bc:	1023883a 	mov	r17,r2
   140c0:	001241c0 	call	1241c <_malloc_r>
   140c4:	1021883a 	mov	r16,r2
   140c8:	10000726 	beq	r2,zero,140e8 <__sfmoreglue+0x5c>
   140cc:	11000304 	addi	r4,r2,12
   140d0:	10000015 	stw	zero,0(r2)
   140d4:	14800115 	stw	r18,4(r2)
   140d8:	11000215 	stw	r4,8(r2)
   140dc:	000b883a 	mov	r5,zero
   140e0:	89801a04 	addi	r6,r17,104
   140e4:	00149d80 	call	149d8 <memset>
   140e8:	8005883a 	mov	r2,r16
   140ec:	dfc00317 	ldw	ra,12(sp)
   140f0:	dc800217 	ldw	r18,8(sp)
   140f4:	dc400117 	ldw	r17,4(sp)
   140f8:	dc000017 	ldw	r16,0(sp)
   140fc:	dec00404 	addi	sp,sp,16
   14100:	f800283a 	ret

00014104 <__sfp>:
   14104:	00800074 	movhi	r2,1
   14108:	defffb04 	addi	sp,sp,-20
   1410c:	10994c04 	addi	r2,r2,25904
   14110:	dc800215 	stw	r18,8(sp)
   14114:	14800017 	ldw	r18,0(r2)
   14118:	dcc00315 	stw	r19,12(sp)
   1411c:	dfc00415 	stw	ra,16(sp)
   14120:	90800e17 	ldw	r2,56(r18)
   14124:	dc400115 	stw	r17,4(sp)
   14128:	dc000015 	stw	r16,0(sp)
   1412c:	2027883a 	mov	r19,r4
   14130:	1000021e 	bne	r2,zero,1413c <__sfp+0x38>
   14134:	9009883a 	mov	r4,r18
   14138:	0013ef00 	call	13ef0 <__sinit.part.1>
   1413c:	9480b804 	addi	r18,r18,736
   14140:	047fffc4 	movi	r17,-1
   14144:	91400117 	ldw	r5,4(r18)
   14148:	94000217 	ldw	r16,8(r18)
   1414c:	297fffc4 	addi	r5,r5,-1
   14150:	28000a16 	blt	r5,zero,1417c <__sfp+0x78>
   14154:	8080030f 	ldh	r2,12(r16)
   14158:	10000c26 	beq	r2,zero,1418c <__sfp+0x88>
   1415c:	80c01d04 	addi	r3,r16,116
   14160:	00000206 	br	1416c <__sfp+0x68>
   14164:	18bfe60f 	ldh	r2,-104(r3)
   14168:	10000826 	beq	r2,zero,1418c <__sfp+0x88>
   1416c:	297fffc4 	addi	r5,r5,-1
   14170:	1c3ffd04 	addi	r16,r3,-12
   14174:	18c01a04 	addi	r3,r3,104
   14178:	2c7ffa1e 	bne	r5,r17,14164 <_gp+0xffff5c58>
   1417c:	90800017 	ldw	r2,0(r18)
   14180:	10001d26 	beq	r2,zero,141f8 <__sfp+0xf4>
   14184:	1025883a 	mov	r18,r2
   14188:	003fee06 	br	14144 <_gp+0xffff5c38>
   1418c:	00bfffc4 	movi	r2,-1
   14190:	8080038d 	sth	r2,14(r16)
   14194:	00800044 	movi	r2,1
   14198:	8080030d 	sth	r2,12(r16)
   1419c:	80001915 	stw	zero,100(r16)
   141a0:	80000015 	stw	zero,0(r16)
   141a4:	80000215 	stw	zero,8(r16)
   141a8:	80000115 	stw	zero,4(r16)
   141ac:	80000415 	stw	zero,16(r16)
   141b0:	80000515 	stw	zero,20(r16)
   141b4:	80000615 	stw	zero,24(r16)
   141b8:	81001704 	addi	r4,r16,92
   141bc:	000b883a 	mov	r5,zero
   141c0:	01800204 	movi	r6,8
   141c4:	00149d80 	call	149d8 <memset>
   141c8:	8005883a 	mov	r2,r16
   141cc:	80000c15 	stw	zero,48(r16)
   141d0:	80000d15 	stw	zero,52(r16)
   141d4:	80001115 	stw	zero,68(r16)
   141d8:	80001215 	stw	zero,72(r16)
   141dc:	dfc00417 	ldw	ra,16(sp)
   141e0:	dcc00317 	ldw	r19,12(sp)
   141e4:	dc800217 	ldw	r18,8(sp)
   141e8:	dc400117 	ldw	r17,4(sp)
   141ec:	dc000017 	ldw	r16,0(sp)
   141f0:	dec00504 	addi	sp,sp,20
   141f4:	f800283a 	ret
   141f8:	9809883a 	mov	r4,r19
   141fc:	01400104 	movi	r5,4
   14200:	001408c0 	call	1408c <__sfmoreglue>
   14204:	90800015 	stw	r2,0(r18)
   14208:	103fde1e 	bne	r2,zero,14184 <_gp+0xffff5c78>
   1420c:	00800304 	movi	r2,12
   14210:	98800015 	stw	r2,0(r19)
   14214:	0005883a 	mov	r2,zero
   14218:	003ff006 	br	141dc <_gp+0xffff5cd0>

0001421c <_cleanup>:
   1421c:	00800074 	movhi	r2,1
   14220:	10994c04 	addi	r2,r2,25904
   14224:	11000017 	ldw	r4,0(r2)
   14228:	01400074 	movhi	r5,1
   1422c:	2953b604 	addi	r5,r5,20184
   14230:	001475c1 	jmpi	1475c <_fwalk_reent>

00014234 <__sinit>:
   14234:	20800e17 	ldw	r2,56(r4)
   14238:	10000126 	beq	r2,zero,14240 <__sinit+0xc>
   1423c:	f800283a 	ret
   14240:	0013ef01 	jmpi	13ef0 <__sinit.part.1>

00014244 <__sfp_lock_acquire>:
   14244:	f800283a 	ret

00014248 <__sfp_lock_release>:
   14248:	f800283a 	ret

0001424c <__sinit_lock_acquire>:
   1424c:	f800283a 	ret

00014250 <__sinit_lock_release>:
   14250:	f800283a 	ret

00014254 <__fp_lock_all>:
   14254:	00800074 	movhi	r2,1
   14258:	10994d04 	addi	r2,r2,25908
   1425c:	11000017 	ldw	r4,0(r2)
   14260:	01400074 	movhi	r5,1
   14264:	294fb504 	addi	r5,r5,16084
   14268:	00146981 	jmpi	14698 <_fwalk>

0001426c <__fp_unlock_all>:
   1426c:	00800074 	movhi	r2,1
   14270:	10994d04 	addi	r2,r2,25908
   14274:	11000017 	ldw	r4,0(r2)
   14278:	01400074 	movhi	r5,1
   1427c:	294fb704 	addi	r5,r5,16092
   14280:	00146981 	jmpi	14698 <_fwalk>

00014284 <_malloc_trim_r>:
   14284:	defffb04 	addi	sp,sp,-20
   14288:	dcc00315 	stw	r19,12(sp)
   1428c:	04c00074 	movhi	r19,1
   14290:	dc800215 	stw	r18,8(sp)
   14294:	dc400115 	stw	r17,4(sp)
   14298:	dc000015 	stw	r16,0(sp)
   1429c:	dfc00415 	stw	ra,16(sp)
   142a0:	2821883a 	mov	r16,r5
   142a4:	9cd84104 	addi	r19,r19,24836
   142a8:	2025883a 	mov	r18,r4
   142ac:	00155f80 	call	155f8 <__malloc_lock>
   142b0:	98800217 	ldw	r2,8(r19)
   142b4:	14400117 	ldw	r17,4(r2)
   142b8:	00bfff04 	movi	r2,-4
   142bc:	88a2703a 	and	r17,r17,r2
   142c0:	8c21c83a 	sub	r16,r17,r16
   142c4:	8403fbc4 	addi	r16,r16,4079
   142c8:	8020d33a 	srli	r16,r16,12
   142cc:	0083ffc4 	movi	r2,4095
   142d0:	843fffc4 	addi	r16,r16,-1
   142d4:	8020933a 	slli	r16,r16,12
   142d8:	1400060e 	bge	r2,r16,142f4 <_malloc_trim_r+0x70>
   142dc:	9009883a 	mov	r4,r18
   142e0:	000b883a 	mov	r5,zero
   142e4:	00137180 	call	13718 <_sbrk_r>
   142e8:	98c00217 	ldw	r3,8(r19)
   142ec:	1c47883a 	add	r3,r3,r17
   142f0:	10c00a26 	beq	r2,r3,1431c <_malloc_trim_r+0x98>
   142f4:	9009883a 	mov	r4,r18
   142f8:	00156180 	call	15618 <__malloc_unlock>
   142fc:	0005883a 	mov	r2,zero
   14300:	dfc00417 	ldw	ra,16(sp)
   14304:	dcc00317 	ldw	r19,12(sp)
   14308:	dc800217 	ldw	r18,8(sp)
   1430c:	dc400117 	ldw	r17,4(sp)
   14310:	dc000017 	ldw	r16,0(sp)
   14314:	dec00504 	addi	sp,sp,20
   14318:	f800283a 	ret
   1431c:	9009883a 	mov	r4,r18
   14320:	040bc83a 	sub	r5,zero,r16
   14324:	00137180 	call	13718 <_sbrk_r>
   14328:	00ffffc4 	movi	r3,-1
   1432c:	10c00d26 	beq	r2,r3,14364 <_malloc_trim_r+0xe0>
   14330:	00c00074 	movhi	r3,1
   14334:	18dbe904 	addi	r3,r3,28580
   14338:	18800017 	ldw	r2,0(r3)
   1433c:	99000217 	ldw	r4,8(r19)
   14340:	8c23c83a 	sub	r17,r17,r16
   14344:	8c400054 	ori	r17,r17,1
   14348:	1421c83a 	sub	r16,r2,r16
   1434c:	24400115 	stw	r17,4(r4)
   14350:	9009883a 	mov	r4,r18
   14354:	1c000015 	stw	r16,0(r3)
   14358:	00156180 	call	15618 <__malloc_unlock>
   1435c:	00800044 	movi	r2,1
   14360:	003fe706 	br	14300 <_gp+0xffff5df4>
   14364:	9009883a 	mov	r4,r18
   14368:	000b883a 	mov	r5,zero
   1436c:	00137180 	call	13718 <_sbrk_r>
   14370:	99000217 	ldw	r4,8(r19)
   14374:	014003c4 	movi	r5,15
   14378:	1107c83a 	sub	r3,r2,r4
   1437c:	28ffdd0e 	bge	r5,r3,142f4 <_gp+0xffff5de8>
   14380:	01400074 	movhi	r5,1
   14384:	29594e04 	addi	r5,r5,25912
   14388:	29400017 	ldw	r5,0(r5)
   1438c:	18c00054 	ori	r3,r3,1
   14390:	20c00115 	stw	r3,4(r4)
   14394:	00c00074 	movhi	r3,1
   14398:	1145c83a 	sub	r2,r2,r5
   1439c:	18dbe904 	addi	r3,r3,28580
   143a0:	18800015 	stw	r2,0(r3)
   143a4:	003fd306 	br	142f4 <_gp+0xffff5de8>

000143a8 <_free_r>:
   143a8:	28004c26 	beq	r5,zero,144dc <_free_r+0x134>
   143ac:	defffd04 	addi	sp,sp,-12
   143b0:	dc400115 	stw	r17,4(sp)
   143b4:	dc000015 	stw	r16,0(sp)
   143b8:	2023883a 	mov	r17,r4
   143bc:	2821883a 	mov	r16,r5
   143c0:	dfc00215 	stw	ra,8(sp)
   143c4:	00155f80 	call	155f8 <__malloc_lock>
   143c8:	813fff17 	ldw	r4,-4(r16)
   143cc:	00bfff84 	movi	r2,-2
   143d0:	02400074 	movhi	r9,1
   143d4:	81bffe04 	addi	r6,r16,-8
   143d8:	2084703a 	and	r2,r4,r2
   143dc:	4a584104 	addi	r9,r9,24836
   143e0:	308b883a 	add	r5,r6,r2
   143e4:	2a000117 	ldw	r8,4(r5)
   143e8:	49c00217 	ldw	r7,8(r9)
   143ec:	00ffff04 	movi	r3,-4
   143f0:	40c6703a 	and	r3,r8,r3
   143f4:	39405326 	beq	r7,r5,14544 <_free_r+0x19c>
   143f8:	28c00115 	stw	r3,4(r5)
   143fc:	2100004c 	andi	r4,r4,1
   14400:	2000091e 	bne	r4,zero,14428 <_free_r+0x80>
   14404:	81fffe17 	ldw	r7,-8(r16)
   14408:	4a000204 	addi	r8,r9,8
   1440c:	31cdc83a 	sub	r6,r6,r7
   14410:	31000217 	ldw	r4,8(r6)
   14414:	11c5883a 	add	r2,r2,r7
   14418:	22006126 	beq	r4,r8,145a0 <_free_r+0x1f8>
   1441c:	31c00317 	ldw	r7,12(r6)
   14420:	21c00315 	stw	r7,12(r4)
   14424:	39000215 	stw	r4,8(r7)
   14428:	28c9883a 	add	r4,r5,r3
   1442c:	21c00117 	ldw	r7,4(r4)
   14430:	39c0004c 	andi	r7,r7,1
   14434:	38000d1e 	bne	r7,zero,1446c <_free_r+0xc4>
   14438:	29000217 	ldw	r4,8(r5)
   1443c:	10c5883a 	add	r2,r2,r3
   14440:	00c00074 	movhi	r3,1
   14444:	18d84304 	addi	r3,r3,24844
   14448:	20c07526 	beq	r4,r3,14620 <_free_r+0x278>
   1444c:	29c00317 	ldw	r7,12(r5)
   14450:	11400054 	ori	r5,r2,1
   14454:	3087883a 	add	r3,r6,r2
   14458:	21c00315 	stw	r7,12(r4)
   1445c:	39000215 	stw	r4,8(r7)
   14460:	31400115 	stw	r5,4(r6)
   14464:	18800015 	stw	r2,0(r3)
   14468:	00000406 	br	1447c <_free_r+0xd4>
   1446c:	10c00054 	ori	r3,r2,1
   14470:	30c00115 	stw	r3,4(r6)
   14474:	3087883a 	add	r3,r6,r2
   14478:	18800015 	stw	r2,0(r3)
   1447c:	00c07fc4 	movi	r3,511
   14480:	18801736 	bltu	r3,r2,144e0 <_free_r+0x138>
   14484:	1004d0fa 	srli	r2,r2,3
   14488:	01400044 	movi	r5,1
   1448c:	49000117 	ldw	r4,4(r9)
   14490:	1087883a 	add	r3,r2,r2
   14494:	18c7883a 	add	r3,r3,r3
   14498:	1005d0ba 	srai	r2,r2,2
   1449c:	18c7883a 	add	r3,r3,r3
   144a0:	1a47883a 	add	r3,r3,r9
   144a4:	19c00217 	ldw	r7,8(r3)
   144a8:	2884983a 	sll	r2,r5,r2
   144ac:	30c00315 	stw	r3,12(r6)
   144b0:	31c00215 	stw	r7,8(r6)
   144b4:	1104b03a 	or	r2,r2,r4
   144b8:	19800215 	stw	r6,8(r3)
   144bc:	48800115 	stw	r2,4(r9)
   144c0:	39800315 	stw	r6,12(r7)
   144c4:	8809883a 	mov	r4,r17
   144c8:	dfc00217 	ldw	ra,8(sp)
   144cc:	dc400117 	ldw	r17,4(sp)
   144d0:	dc000017 	ldw	r16,0(sp)
   144d4:	dec00304 	addi	sp,sp,12
   144d8:	00156181 	jmpi	15618 <__malloc_unlock>
   144dc:	f800283a 	ret
   144e0:	1006d27a 	srli	r3,r2,9
   144e4:	01000104 	movi	r4,4
   144e8:	20c04036 	bltu	r4,r3,145ec <_free_r+0x244>
   144ec:	1006d1ba 	srli	r3,r2,6
   144f0:	19400e04 	addi	r5,r3,56
   144f4:	2947883a 	add	r3,r5,r5
   144f8:	18c7883a 	add	r3,r3,r3
   144fc:	18c7883a 	add	r3,r3,r3
   14500:	1a49883a 	add	r4,r3,r9
   14504:	20c00217 	ldw	r3,8(r4)
   14508:	01c00074 	movhi	r7,1
   1450c:	39d84104 	addi	r7,r7,24836
   14510:	19003b26 	beq	r3,r4,14600 <_free_r+0x258>
   14514:	01ffff04 	movi	r7,-4
   14518:	19400117 	ldw	r5,4(r3)
   1451c:	29ca703a 	and	r5,r5,r7
   14520:	1140022e 	bgeu	r2,r5,1452c <_free_r+0x184>
   14524:	18c00217 	ldw	r3,8(r3)
   14528:	20fffb1e 	bne	r4,r3,14518 <_gp+0xffff600c>
   1452c:	18800317 	ldw	r2,12(r3)
   14530:	30800315 	stw	r2,12(r6)
   14534:	30c00215 	stw	r3,8(r6)
   14538:	11800215 	stw	r6,8(r2)
   1453c:	19800315 	stw	r6,12(r3)
   14540:	003fe006 	br	144c4 <_gp+0xffff5fb8>
   14544:	2100004c 	andi	r4,r4,1
   14548:	1885883a 	add	r2,r3,r2
   1454c:	2000071e 	bne	r4,zero,1456c <_free_r+0x1c4>
   14550:	817ffe17 	ldw	r5,-8(r16)
   14554:	314dc83a 	sub	r6,r6,r5
   14558:	30c00317 	ldw	r3,12(r6)
   1455c:	31000217 	ldw	r4,8(r6)
   14560:	1145883a 	add	r2,r2,r5
   14564:	20c00315 	stw	r3,12(r4)
   14568:	19000215 	stw	r4,8(r3)
   1456c:	10c00054 	ori	r3,r2,1
   14570:	30c00115 	stw	r3,4(r6)
   14574:	00c00074 	movhi	r3,1
   14578:	18d94f04 	addi	r3,r3,25916
   1457c:	18c00017 	ldw	r3,0(r3)
   14580:	49800215 	stw	r6,8(r9)
   14584:	10ffcf36 	bltu	r2,r3,144c4 <_gp+0xffff5fb8>
   14588:	00800074 	movhi	r2,1
   1458c:	109be804 	addi	r2,r2,28576
   14590:	11400017 	ldw	r5,0(r2)
   14594:	8809883a 	mov	r4,r17
   14598:	00142840 	call	14284 <_malloc_trim_r>
   1459c:	003fc906 	br	144c4 <_gp+0xffff5fb8>
   145a0:	28c9883a 	add	r4,r5,r3
   145a4:	21000117 	ldw	r4,4(r4)
   145a8:	2100004c 	andi	r4,r4,1
   145ac:	20000a1e 	bne	r4,zero,145d8 <_free_r+0x230>
   145b0:	29000317 	ldw	r4,12(r5)
   145b4:	29400217 	ldw	r5,8(r5)
   145b8:	10c5883a 	add	r2,r2,r3
   145bc:	10c00054 	ori	r3,r2,1
   145c0:	29000315 	stw	r4,12(r5)
   145c4:	21400215 	stw	r5,8(r4)
   145c8:	30c00115 	stw	r3,4(r6)
   145cc:	308d883a 	add	r6,r6,r2
   145d0:	30800015 	stw	r2,0(r6)
   145d4:	003fbb06 	br	144c4 <_gp+0xffff5fb8>
   145d8:	10c00054 	ori	r3,r2,1
   145dc:	30c00115 	stw	r3,4(r6)
   145e0:	308d883a 	add	r6,r6,r2
   145e4:	30800015 	stw	r2,0(r6)
   145e8:	003fb606 	br	144c4 <_gp+0xffff5fb8>
   145ec:	01000504 	movi	r4,20
   145f0:	20c01436 	bltu	r4,r3,14644 <_free_r+0x29c>
   145f4:	194016c4 	addi	r5,r3,91
   145f8:	2947883a 	add	r3,r5,r5
   145fc:	003fbe06 	br	144f8 <_gp+0xffff5fec>
   14600:	280bd0ba 	srai	r5,r5,2
   14604:	00800044 	movi	r2,1
   14608:	39000117 	ldw	r4,4(r7)
   1460c:	114a983a 	sll	r5,r2,r5
   14610:	1805883a 	mov	r2,r3
   14614:	2908b03a 	or	r4,r5,r4
   14618:	39000115 	stw	r4,4(r7)
   1461c:	003fc406 	br	14530 <_gp+0xffff6024>
   14620:	49800515 	stw	r6,20(r9)
   14624:	49800415 	stw	r6,16(r9)
   14628:	10c00054 	ori	r3,r2,1
   1462c:	31000315 	stw	r4,12(r6)
   14630:	31000215 	stw	r4,8(r6)
   14634:	30c00115 	stw	r3,4(r6)
   14638:	308d883a 	add	r6,r6,r2
   1463c:	30800015 	stw	r2,0(r6)
   14640:	003fa006 	br	144c4 <_gp+0xffff5fb8>
   14644:	01001504 	movi	r4,84
   14648:	20c00436 	bltu	r4,r3,1465c <_free_r+0x2b4>
   1464c:	1006d33a 	srli	r3,r2,12
   14650:	19401b84 	addi	r5,r3,110
   14654:	2947883a 	add	r3,r5,r5
   14658:	003fa706 	br	144f8 <_gp+0xffff5fec>
   1465c:	01005504 	movi	r4,340
   14660:	20c00436 	bltu	r4,r3,14674 <_free_r+0x2cc>
   14664:	1006d3fa 	srli	r3,r2,15
   14668:	19401dc4 	addi	r5,r3,119
   1466c:	2947883a 	add	r3,r5,r5
   14670:	003fa106 	br	144f8 <_gp+0xffff5fec>
   14674:	01015504 	movi	r4,1364
   14678:	20c00436 	bltu	r4,r3,1468c <_free_r+0x2e4>
   1467c:	1006d4ba 	srli	r3,r2,18
   14680:	19401f04 	addi	r5,r3,124
   14684:	2947883a 	add	r3,r5,r5
   14688:	003f9b06 	br	144f8 <_gp+0xffff5fec>
   1468c:	00c03f04 	movi	r3,252
   14690:	01401f84 	movi	r5,126
   14694:	003f9806 	br	144f8 <_gp+0xffff5fec>

00014698 <_fwalk>:
   14698:	defff704 	addi	sp,sp,-36
   1469c:	dd000415 	stw	r20,16(sp)
   146a0:	dfc00815 	stw	ra,32(sp)
   146a4:	ddc00715 	stw	r23,28(sp)
   146a8:	dd800615 	stw	r22,24(sp)
   146ac:	dd400515 	stw	r21,20(sp)
   146b0:	dcc00315 	stw	r19,12(sp)
   146b4:	dc800215 	stw	r18,8(sp)
   146b8:	dc400115 	stw	r17,4(sp)
   146bc:	dc000015 	stw	r16,0(sp)
   146c0:	2500b804 	addi	r20,r4,736
   146c4:	a0002326 	beq	r20,zero,14754 <_fwalk+0xbc>
   146c8:	282b883a 	mov	r21,r5
   146cc:	002f883a 	mov	r23,zero
   146d0:	05800044 	movi	r22,1
   146d4:	04ffffc4 	movi	r19,-1
   146d8:	a4400117 	ldw	r17,4(r20)
   146dc:	a4800217 	ldw	r18,8(r20)
   146e0:	8c7fffc4 	addi	r17,r17,-1
   146e4:	88000d16 	blt	r17,zero,1471c <_fwalk+0x84>
   146e8:	94000304 	addi	r16,r18,12
   146ec:	94800384 	addi	r18,r18,14
   146f0:	80c0000b 	ldhu	r3,0(r16)
   146f4:	8c7fffc4 	addi	r17,r17,-1
   146f8:	813ffd04 	addi	r4,r16,-12
   146fc:	b0c0042e 	bgeu	r22,r3,14710 <_fwalk+0x78>
   14700:	90c0000f 	ldh	r3,0(r18)
   14704:	1cc00226 	beq	r3,r19,14710 <_fwalk+0x78>
   14708:	a83ee83a 	callr	r21
   1470c:	b8aeb03a 	or	r23,r23,r2
   14710:	84001a04 	addi	r16,r16,104
   14714:	94801a04 	addi	r18,r18,104
   14718:	8cfff51e 	bne	r17,r19,146f0 <_gp+0xffff61e4>
   1471c:	a5000017 	ldw	r20,0(r20)
   14720:	a03fed1e 	bne	r20,zero,146d8 <_gp+0xffff61cc>
   14724:	b805883a 	mov	r2,r23
   14728:	dfc00817 	ldw	ra,32(sp)
   1472c:	ddc00717 	ldw	r23,28(sp)
   14730:	dd800617 	ldw	r22,24(sp)
   14734:	dd400517 	ldw	r21,20(sp)
   14738:	dd000417 	ldw	r20,16(sp)
   1473c:	dcc00317 	ldw	r19,12(sp)
   14740:	dc800217 	ldw	r18,8(sp)
   14744:	dc400117 	ldw	r17,4(sp)
   14748:	dc000017 	ldw	r16,0(sp)
   1474c:	dec00904 	addi	sp,sp,36
   14750:	f800283a 	ret
   14754:	002f883a 	mov	r23,zero
   14758:	003ff206 	br	14724 <_gp+0xffff6218>

0001475c <_fwalk_reent>:
   1475c:	defff704 	addi	sp,sp,-36
   14760:	dd400515 	stw	r21,20(sp)
   14764:	dfc00815 	stw	ra,32(sp)
   14768:	ddc00715 	stw	r23,28(sp)
   1476c:	dd800615 	stw	r22,24(sp)
   14770:	dd000415 	stw	r20,16(sp)
   14774:	dcc00315 	stw	r19,12(sp)
   14778:	dc800215 	stw	r18,8(sp)
   1477c:	dc400115 	stw	r17,4(sp)
   14780:	dc000015 	stw	r16,0(sp)
   14784:	2540b804 	addi	r21,r4,736
   14788:	a8002326 	beq	r21,zero,14818 <_fwalk_reent+0xbc>
   1478c:	2829883a 	mov	r20,r5
   14790:	202d883a 	mov	r22,r4
   14794:	002f883a 	mov	r23,zero
   14798:	04c00044 	movi	r19,1
   1479c:	04bfffc4 	movi	r18,-1
   147a0:	ac400117 	ldw	r17,4(r21)
   147a4:	ac000217 	ldw	r16,8(r21)
   147a8:	8c7fffc4 	addi	r17,r17,-1
   147ac:	88000c16 	blt	r17,zero,147e0 <_fwalk_reent+0x84>
   147b0:	84000304 	addi	r16,r16,12
   147b4:	80c0000b 	ldhu	r3,0(r16)
   147b8:	8c7fffc4 	addi	r17,r17,-1
   147bc:	817ffd04 	addi	r5,r16,-12
   147c0:	98c0052e 	bgeu	r19,r3,147d8 <_fwalk_reent+0x7c>
   147c4:	80c0008f 	ldh	r3,2(r16)
   147c8:	b009883a 	mov	r4,r22
   147cc:	1c800226 	beq	r3,r18,147d8 <_fwalk_reent+0x7c>
   147d0:	a03ee83a 	callr	r20
   147d4:	b8aeb03a 	or	r23,r23,r2
   147d8:	84001a04 	addi	r16,r16,104
   147dc:	8cbff51e 	bne	r17,r18,147b4 <_gp+0xffff62a8>
   147e0:	ad400017 	ldw	r21,0(r21)
   147e4:	a83fee1e 	bne	r21,zero,147a0 <_gp+0xffff6294>
   147e8:	b805883a 	mov	r2,r23
   147ec:	dfc00817 	ldw	ra,32(sp)
   147f0:	ddc00717 	ldw	r23,28(sp)
   147f4:	dd800617 	ldw	r22,24(sp)
   147f8:	dd400517 	ldw	r21,20(sp)
   147fc:	dd000417 	ldw	r20,16(sp)
   14800:	dcc00317 	ldw	r19,12(sp)
   14804:	dc800217 	ldw	r18,8(sp)
   14808:	dc400117 	ldw	r17,4(sp)
   1480c:	dc000017 	ldw	r16,0(sp)
   14810:	dec00904 	addi	sp,sp,36
   14814:	f800283a 	ret
   14818:	002f883a 	mov	r23,zero
   1481c:	003ff206 	br	147e8 <_gp+0xffff62dc>

00014820 <__smakebuf_r>:
   14820:	2880030b 	ldhu	r2,12(r5)
   14824:	10c0008c 	andi	r3,r2,2
   14828:	1800401e 	bne	r3,zero,1492c <__smakebuf_r+0x10c>
   1482c:	deffec04 	addi	sp,sp,-80
   14830:	dc000f15 	stw	r16,60(sp)
   14834:	2821883a 	mov	r16,r5
   14838:	2940038f 	ldh	r5,14(r5)
   1483c:	dc401015 	stw	r17,64(sp)
   14840:	dfc01315 	stw	ra,76(sp)
   14844:	dcc01215 	stw	r19,72(sp)
   14848:	dc801115 	stw	r18,68(sp)
   1484c:	2023883a 	mov	r17,r4
   14850:	28001b16 	blt	r5,zero,148c0 <__smakebuf_r+0xa0>
   14854:	d80d883a 	mov	r6,sp
   14858:	0014fdc0 	call	14fdc <_fstat_r>
   1485c:	10001716 	blt	r2,zero,148bc <__smakebuf_r+0x9c>
   14860:	d8800117 	ldw	r2,4(sp)
   14864:	00e00014 	movui	r3,32768
   14868:	10bc000c 	andi	r2,r2,61440
   1486c:	10c03726 	beq	r2,r3,1494c <__smakebuf_r+0x12c>
   14870:	80c0030b 	ldhu	r3,12(r16)
   14874:	18c20014 	ori	r3,r3,2048
   14878:	80c0030d 	sth	r3,12(r16)
   1487c:	00c80004 	movi	r3,8192
   14880:	10c03c1e 	bne	r2,r3,14974 <__smakebuf_r+0x154>
   14884:	8140038f 	ldh	r5,14(r16)
   14888:	8809883a 	mov	r4,r17
   1488c:	00150340 	call	15034 <_isatty_r>
   14890:	10004e26 	beq	r2,zero,149cc <__smakebuf_r+0x1ac>
   14894:	8080030b 	ldhu	r2,12(r16)
   14898:	04c00044 	movi	r19,1
   1489c:	80c010c4 	addi	r3,r16,67
   148a0:	14c4b03a 	or	r2,r2,r19
   148a4:	8080030d 	sth	r2,12(r16)
   148a8:	80c00015 	stw	r3,0(r16)
   148ac:	80c00415 	stw	r3,16(r16)
   148b0:	84c00515 	stw	r19,20(r16)
   148b4:	04810004 	movi	r18,1024
   148b8:	00000706 	br	148d8 <__smakebuf_r+0xb8>
   148bc:	8080030b 	ldhu	r2,12(r16)
   148c0:	10c0200c 	andi	r3,r2,128
   148c4:	18001f1e 	bne	r3,zero,14944 <__smakebuf_r+0x124>
   148c8:	04810004 	movi	r18,1024
   148cc:	10820014 	ori	r2,r2,2048
   148d0:	8080030d 	sth	r2,12(r16)
   148d4:	0027883a 	mov	r19,zero
   148d8:	8809883a 	mov	r4,r17
   148dc:	900b883a 	mov	r5,r18
   148e0:	001241c0 	call	1241c <_malloc_r>
   148e4:	10002e26 	beq	r2,zero,149a0 <__smakebuf_r+0x180>
   148e8:	80c0030b 	ldhu	r3,12(r16)
   148ec:	01000074 	movhi	r4,1
   148f0:	210fb904 	addi	r4,r4,16100
   148f4:	89000f15 	stw	r4,60(r17)
   148f8:	18c02014 	ori	r3,r3,128
   148fc:	80c0030d 	sth	r3,12(r16)
   14900:	80800015 	stw	r2,0(r16)
   14904:	80800415 	stw	r2,16(r16)
   14908:	84800515 	stw	r18,20(r16)
   1490c:	98001c1e 	bne	r19,zero,14980 <__smakebuf_r+0x160>
   14910:	dfc01317 	ldw	ra,76(sp)
   14914:	dcc01217 	ldw	r19,72(sp)
   14918:	dc801117 	ldw	r18,68(sp)
   1491c:	dc401017 	ldw	r17,64(sp)
   14920:	dc000f17 	ldw	r16,60(sp)
   14924:	dec01404 	addi	sp,sp,80
   14928:	f800283a 	ret
   1492c:	288010c4 	addi	r2,r5,67
   14930:	28800015 	stw	r2,0(r5)
   14934:	28800415 	stw	r2,16(r5)
   14938:	00800044 	movi	r2,1
   1493c:	28800515 	stw	r2,20(r5)
   14940:	f800283a 	ret
   14944:	04801004 	movi	r18,64
   14948:	003fe006 	br	148cc <_gp+0xffff63c0>
   1494c:	81000a17 	ldw	r4,40(r16)
   14950:	00c00074 	movhi	r3,1
   14954:	18d37104 	addi	r3,r3,19908
   14958:	20ffc51e 	bne	r4,r3,14870 <_gp+0xffff6364>
   1495c:	80c0030b 	ldhu	r3,12(r16)
   14960:	01010004 	movi	r4,1024
   14964:	81001315 	stw	r4,76(r16)
   14968:	1906b03a 	or	r3,r3,r4
   1496c:	80c0030d 	sth	r3,12(r16)
   14970:	003fc206 	br	1487c <_gp+0xffff6370>
   14974:	0027883a 	mov	r19,zero
   14978:	04810004 	movi	r18,1024
   1497c:	003fd606 	br	148d8 <_gp+0xffff63cc>
   14980:	8140038f 	ldh	r5,14(r16)
   14984:	8809883a 	mov	r4,r17
   14988:	00150340 	call	15034 <_isatty_r>
   1498c:	103fe026 	beq	r2,zero,14910 <_gp+0xffff6404>
   14990:	8080030b 	ldhu	r2,12(r16)
   14994:	10800054 	ori	r2,r2,1
   14998:	8080030d 	sth	r2,12(r16)
   1499c:	003fdc06 	br	14910 <_gp+0xffff6404>
   149a0:	8080030b 	ldhu	r2,12(r16)
   149a4:	10c0800c 	andi	r3,r2,512
   149a8:	183fd91e 	bne	r3,zero,14910 <_gp+0xffff6404>
   149ac:	10800094 	ori	r2,r2,2
   149b0:	80c010c4 	addi	r3,r16,67
   149b4:	8080030d 	sth	r2,12(r16)
   149b8:	00800044 	movi	r2,1
   149bc:	80c00015 	stw	r3,0(r16)
   149c0:	80c00415 	stw	r3,16(r16)
   149c4:	80800515 	stw	r2,20(r16)
   149c8:	003fd106 	br	14910 <_gp+0xffff6404>
   149cc:	04c00044 	movi	r19,1
   149d0:	04810004 	movi	r18,1024
   149d4:	003fc006 	br	148d8 <_gp+0xffff63cc>

000149d8 <memset>:
   149d8:	20c000cc 	andi	r3,r4,3
   149dc:	2005883a 	mov	r2,r4
   149e0:	18004326 	beq	r3,zero,14af0 <memset+0x118>
   149e4:	31ffffc4 	addi	r7,r6,-1
   149e8:	30004026 	beq	r6,zero,14aec <memset+0x114>
   149ec:	2813883a 	mov	r9,r5
   149f0:	200d883a 	mov	r6,r4
   149f4:	2007883a 	mov	r3,r4
   149f8:	00000406 	br	14a0c <memset+0x34>
   149fc:	3a3fffc4 	addi	r8,r7,-1
   14a00:	31800044 	addi	r6,r6,1
   14a04:	38003926 	beq	r7,zero,14aec <memset+0x114>
   14a08:	400f883a 	mov	r7,r8
   14a0c:	18c00044 	addi	r3,r3,1
   14a10:	32400005 	stb	r9,0(r6)
   14a14:	1a0000cc 	andi	r8,r3,3
   14a18:	403ff81e 	bne	r8,zero,149fc <_gp+0xffff64f0>
   14a1c:	010000c4 	movi	r4,3
   14a20:	21c02d2e 	bgeu	r4,r7,14ad8 <memset+0x100>
   14a24:	29803fcc 	andi	r6,r5,255
   14a28:	3008923a 	slli	r4,r6,8
   14a2c:	218cb03a 	or	r6,r4,r6
   14a30:	3008943a 	slli	r4,r6,16
   14a34:	218cb03a 	or	r6,r4,r6
   14a38:	010003c4 	movi	r4,15
   14a3c:	21c0182e 	bgeu	r4,r7,14aa0 <memset+0xc8>
   14a40:	3b3ffc04 	addi	r12,r7,-16
   14a44:	6018d13a 	srli	r12,r12,4
   14a48:	1a000104 	addi	r8,r3,4
   14a4c:	1ac00204 	addi	r11,r3,8
   14a50:	6008913a 	slli	r4,r12,4
   14a54:	1a800304 	addi	r10,r3,12
   14a58:	1813883a 	mov	r9,r3
   14a5c:	21000504 	addi	r4,r4,20
   14a60:	1909883a 	add	r4,r3,r4
   14a64:	49800015 	stw	r6,0(r9)
   14a68:	41800015 	stw	r6,0(r8)
   14a6c:	59800015 	stw	r6,0(r11)
   14a70:	51800015 	stw	r6,0(r10)
   14a74:	42000404 	addi	r8,r8,16
   14a78:	4a400404 	addi	r9,r9,16
   14a7c:	5ac00404 	addi	r11,r11,16
   14a80:	52800404 	addi	r10,r10,16
   14a84:	413ff71e 	bne	r8,r4,14a64 <_gp+0xffff6558>
   14a88:	63000044 	addi	r12,r12,1
   14a8c:	6018913a 	slli	r12,r12,4
   14a90:	39c003cc 	andi	r7,r7,15
   14a94:	010000c4 	movi	r4,3
   14a98:	1b07883a 	add	r3,r3,r12
   14a9c:	21c00e2e 	bgeu	r4,r7,14ad8 <memset+0x100>
   14aa0:	1813883a 	mov	r9,r3
   14aa4:	3811883a 	mov	r8,r7
   14aa8:	010000c4 	movi	r4,3
   14aac:	49800015 	stw	r6,0(r9)
   14ab0:	423fff04 	addi	r8,r8,-4
   14ab4:	4a400104 	addi	r9,r9,4
   14ab8:	223ffc36 	bltu	r4,r8,14aac <_gp+0xffff65a0>
   14abc:	393fff04 	addi	r4,r7,-4
   14ac0:	2008d0ba 	srli	r4,r4,2
   14ac4:	39c000cc 	andi	r7,r7,3
   14ac8:	21000044 	addi	r4,r4,1
   14acc:	2109883a 	add	r4,r4,r4
   14ad0:	2109883a 	add	r4,r4,r4
   14ad4:	1907883a 	add	r3,r3,r4
   14ad8:	38000426 	beq	r7,zero,14aec <memset+0x114>
   14adc:	19cf883a 	add	r7,r3,r7
   14ae0:	19400005 	stb	r5,0(r3)
   14ae4:	18c00044 	addi	r3,r3,1
   14ae8:	19fffd1e 	bne	r3,r7,14ae0 <_gp+0xffff65d4>
   14aec:	f800283a 	ret
   14af0:	2007883a 	mov	r3,r4
   14af4:	300f883a 	mov	r7,r6
   14af8:	003fc806 	br	14a1c <_gp+0xffff6510>

00014afc <lflush>:
   14afc:	2080030b 	ldhu	r2,12(r4)
   14b00:	00c00244 	movi	r3,9
   14b04:	1080024c 	andi	r2,r2,9
   14b08:	10c00226 	beq	r2,r3,14b14 <lflush+0x18>
   14b0c:	0005883a 	mov	r2,zero
   14b10:	f800283a 	ret
   14b14:	0013ea41 	jmpi	13ea4 <fflush>

00014b18 <__srefill_r>:
   14b18:	defffc04 	addi	sp,sp,-16
   14b1c:	dc400115 	stw	r17,4(sp)
   14b20:	dc000015 	stw	r16,0(sp)
   14b24:	dfc00315 	stw	ra,12(sp)
   14b28:	dc800215 	stw	r18,8(sp)
   14b2c:	2023883a 	mov	r17,r4
   14b30:	2821883a 	mov	r16,r5
   14b34:	20000226 	beq	r4,zero,14b40 <__srefill_r+0x28>
   14b38:	20800e17 	ldw	r2,56(r4)
   14b3c:	10003c26 	beq	r2,zero,14c30 <__srefill_r+0x118>
   14b40:	80c0030b 	ldhu	r3,12(r16)
   14b44:	1908000c 	andi	r4,r3,8192
   14b48:	1805883a 	mov	r2,r3
   14b4c:	2000071e 	bne	r4,zero,14b6c <__srefill_r+0x54>
   14b50:	81001917 	ldw	r4,100(r16)
   14b54:	18880014 	ori	r2,r3,8192
   14b58:	00f7ffc4 	movi	r3,-8193
   14b5c:	20c8703a 	and	r4,r4,r3
   14b60:	8080030d 	sth	r2,12(r16)
   14b64:	1007883a 	mov	r3,r2
   14b68:	81001915 	stw	r4,100(r16)
   14b6c:	80000115 	stw	zero,4(r16)
   14b70:	1100080c 	andi	r4,r2,32
   14b74:	2000571e 	bne	r4,zero,14cd4 <__srefill_r+0x1bc>
   14b78:	1100010c 	andi	r4,r2,4
   14b7c:	20001f26 	beq	r4,zero,14bfc <__srefill_r+0xe4>
   14b80:	81400c17 	ldw	r5,48(r16)
   14b84:	28000826 	beq	r5,zero,14ba8 <__srefill_r+0x90>
   14b88:	80801004 	addi	r2,r16,64
   14b8c:	28800226 	beq	r5,r2,14b98 <__srefill_r+0x80>
   14b90:	8809883a 	mov	r4,r17
   14b94:	00143a80 	call	143a8 <_free_r>
   14b98:	80800f17 	ldw	r2,60(r16)
   14b9c:	80000c15 	stw	zero,48(r16)
   14ba0:	80800115 	stw	r2,4(r16)
   14ba4:	1000391e 	bne	r2,zero,14c8c <__srefill_r+0x174>
   14ba8:	80800417 	ldw	r2,16(r16)
   14bac:	10004b26 	beq	r2,zero,14cdc <__srefill_r+0x1c4>
   14bb0:	8480030b 	ldhu	r18,12(r16)
   14bb4:	908000cc 	andi	r2,r18,3
   14bb8:	10001f1e 	bne	r2,zero,14c38 <__srefill_r+0x120>
   14bbc:	81800417 	ldw	r6,16(r16)
   14bc0:	80800817 	ldw	r2,32(r16)
   14bc4:	81400717 	ldw	r5,28(r16)
   14bc8:	81c00517 	ldw	r7,20(r16)
   14bcc:	81800015 	stw	r6,0(r16)
   14bd0:	8809883a 	mov	r4,r17
   14bd4:	103ee83a 	callr	r2
   14bd8:	80800115 	stw	r2,4(r16)
   14bdc:	00800e0e 	bge	zero,r2,14c18 <__srefill_r+0x100>
   14be0:	0005883a 	mov	r2,zero
   14be4:	dfc00317 	ldw	ra,12(sp)
   14be8:	dc800217 	ldw	r18,8(sp)
   14bec:	dc400117 	ldw	r17,4(sp)
   14bf0:	dc000017 	ldw	r16,0(sp)
   14bf4:	dec00404 	addi	sp,sp,16
   14bf8:	f800283a 	ret
   14bfc:	1100040c 	andi	r4,r2,16
   14c00:	20003026 	beq	r4,zero,14cc4 <__srefill_r+0x1ac>
   14c04:	1080020c 	andi	r2,r2,8
   14c08:	1000241e 	bne	r2,zero,14c9c <__srefill_r+0x184>
   14c0c:	18c00114 	ori	r3,r3,4
   14c10:	80c0030d 	sth	r3,12(r16)
   14c14:	003fe406 	br	14ba8 <_gp+0xffff669c>
   14c18:	80c0030b 	ldhu	r3,12(r16)
   14c1c:	1000161e 	bne	r2,zero,14c78 <__srefill_r+0x160>
   14c20:	18c00814 	ori	r3,r3,32
   14c24:	00bfffc4 	movi	r2,-1
   14c28:	80c0030d 	sth	r3,12(r16)
   14c2c:	003fed06 	br	14be4 <_gp+0xffff66d8>
   14c30:	00142340 	call	14234 <__sinit>
   14c34:	003fc206 	br	14b40 <_gp+0xffff6634>
   14c38:	00800074 	movhi	r2,1
   14c3c:	10994c04 	addi	r2,r2,25904
   14c40:	11000017 	ldw	r4,0(r2)
   14c44:	01400074 	movhi	r5,1
   14c48:	00800044 	movi	r2,1
   14c4c:	2952bf04 	addi	r5,r5,19196
   14c50:	8080030d 	sth	r2,12(r16)
   14c54:	00146980 	call	14698 <_fwalk>
   14c58:	00800244 	movi	r2,9
   14c5c:	8480030d 	sth	r18,12(r16)
   14c60:	9480024c 	andi	r18,r18,9
   14c64:	90bfd51e 	bne	r18,r2,14bbc <_gp+0xffff66b0>
   14c68:	8809883a 	mov	r4,r17
   14c6c:	800b883a 	mov	r5,r16
   14c70:	0013c400 	call	13c40 <__sflush_r>
   14c74:	003fd106 	br	14bbc <_gp+0xffff66b0>
   14c78:	18c01014 	ori	r3,r3,64
   14c7c:	80000115 	stw	zero,4(r16)
   14c80:	00bfffc4 	movi	r2,-1
   14c84:	80c0030d 	sth	r3,12(r16)
   14c88:	003fd606 	br	14be4 <_gp+0xffff66d8>
   14c8c:	80c00e17 	ldw	r3,56(r16)
   14c90:	0005883a 	mov	r2,zero
   14c94:	80c00015 	stw	r3,0(r16)
   14c98:	003fd206 	br	14be4 <_gp+0xffff66d8>
   14c9c:	8809883a 	mov	r4,r17
   14ca0:	800b883a 	mov	r5,r16
   14ca4:	0013e480 	call	13e48 <_fflush_r>
   14ca8:	10000a1e 	bne	r2,zero,14cd4 <__srefill_r+0x1bc>
   14cac:	8080030b 	ldhu	r2,12(r16)
   14cb0:	00fffdc4 	movi	r3,-9
   14cb4:	80000215 	stw	zero,8(r16)
   14cb8:	1886703a 	and	r3,r3,r2
   14cbc:	80000615 	stw	zero,24(r16)
   14cc0:	003fd206 	br	14c0c <_gp+0xffff6700>
   14cc4:	00800244 	movi	r2,9
   14cc8:	88800015 	stw	r2,0(r17)
   14ccc:	18c01014 	ori	r3,r3,64
   14cd0:	80c0030d 	sth	r3,12(r16)
   14cd4:	00bfffc4 	movi	r2,-1
   14cd8:	003fc206 	br	14be4 <_gp+0xffff66d8>
   14cdc:	8809883a 	mov	r4,r17
   14ce0:	800b883a 	mov	r5,r16
   14ce4:	00148200 	call	14820 <__smakebuf_r>
   14ce8:	003fb106 	br	14bb0 <_gp+0xffff66a4>

00014cec <__sread>:
   14cec:	defffe04 	addi	sp,sp,-8
   14cf0:	dc000015 	stw	r16,0(sp)
   14cf4:	2821883a 	mov	r16,r5
   14cf8:	2940038f 	ldh	r5,14(r5)
   14cfc:	dfc00115 	stw	ra,4(sp)
   14d00:	00150e40 	call	150e4 <_read_r>
   14d04:	10000716 	blt	r2,zero,14d24 <__sread+0x38>
   14d08:	80c01417 	ldw	r3,80(r16)
   14d0c:	1887883a 	add	r3,r3,r2
   14d10:	80c01415 	stw	r3,80(r16)
   14d14:	dfc00117 	ldw	ra,4(sp)
   14d18:	dc000017 	ldw	r16,0(sp)
   14d1c:	dec00204 	addi	sp,sp,8
   14d20:	f800283a 	ret
   14d24:	80c0030b 	ldhu	r3,12(r16)
   14d28:	18fbffcc 	andi	r3,r3,61439
   14d2c:	80c0030d 	sth	r3,12(r16)
   14d30:	dfc00117 	ldw	ra,4(sp)
   14d34:	dc000017 	ldw	r16,0(sp)
   14d38:	dec00204 	addi	sp,sp,8
   14d3c:	f800283a 	ret

00014d40 <__seofread>:
   14d40:	0005883a 	mov	r2,zero
   14d44:	f800283a 	ret

00014d48 <__swrite>:
   14d48:	2880030b 	ldhu	r2,12(r5)
   14d4c:	defffb04 	addi	sp,sp,-20
   14d50:	dcc00315 	stw	r19,12(sp)
   14d54:	dc800215 	stw	r18,8(sp)
   14d58:	dc400115 	stw	r17,4(sp)
   14d5c:	dc000015 	stw	r16,0(sp)
   14d60:	dfc00415 	stw	ra,16(sp)
   14d64:	10c0400c 	andi	r3,r2,256
   14d68:	2821883a 	mov	r16,r5
   14d6c:	2027883a 	mov	r19,r4
   14d70:	3025883a 	mov	r18,r6
   14d74:	3823883a 	mov	r17,r7
   14d78:	18000526 	beq	r3,zero,14d90 <__swrite+0x48>
   14d7c:	2940038f 	ldh	r5,14(r5)
   14d80:	000d883a 	mov	r6,zero
   14d84:	01c00084 	movi	r7,2
   14d88:	00150880 	call	15088 <_lseek_r>
   14d8c:	8080030b 	ldhu	r2,12(r16)
   14d90:	8140038f 	ldh	r5,14(r16)
   14d94:	10bbffcc 	andi	r2,r2,61439
   14d98:	9809883a 	mov	r4,r19
   14d9c:	900d883a 	mov	r6,r18
   14da0:	880f883a 	mov	r7,r17
   14da4:	8080030d 	sth	r2,12(r16)
   14da8:	dfc00417 	ldw	ra,16(sp)
   14dac:	dcc00317 	ldw	r19,12(sp)
   14db0:	dc800217 	ldw	r18,8(sp)
   14db4:	dc400117 	ldw	r17,4(sp)
   14db8:	dc000017 	ldw	r16,0(sp)
   14dbc:	dec00504 	addi	sp,sp,20
   14dc0:	0014e281 	jmpi	14e28 <_write_r>

00014dc4 <__sseek>:
   14dc4:	defffe04 	addi	sp,sp,-8
   14dc8:	dc000015 	stw	r16,0(sp)
   14dcc:	2821883a 	mov	r16,r5
   14dd0:	2940038f 	ldh	r5,14(r5)
   14dd4:	dfc00115 	stw	ra,4(sp)
   14dd8:	00150880 	call	15088 <_lseek_r>
   14ddc:	00ffffc4 	movi	r3,-1
   14de0:	10c00826 	beq	r2,r3,14e04 <__sseek+0x40>
   14de4:	80c0030b 	ldhu	r3,12(r16)
   14de8:	80801415 	stw	r2,80(r16)
   14dec:	18c40014 	ori	r3,r3,4096
   14df0:	80c0030d 	sth	r3,12(r16)
   14df4:	dfc00117 	ldw	ra,4(sp)
   14df8:	dc000017 	ldw	r16,0(sp)
   14dfc:	dec00204 	addi	sp,sp,8
   14e00:	f800283a 	ret
   14e04:	80c0030b 	ldhu	r3,12(r16)
   14e08:	18fbffcc 	andi	r3,r3,61439
   14e0c:	80c0030d 	sth	r3,12(r16)
   14e10:	dfc00117 	ldw	ra,4(sp)
   14e14:	dc000017 	ldw	r16,0(sp)
   14e18:	dec00204 	addi	sp,sp,8
   14e1c:	f800283a 	ret

00014e20 <__sclose>:
   14e20:	2940038f 	ldh	r5,14(r5)
   14e24:	0014e841 	jmpi	14e84 <_close_r>

00014e28 <_write_r>:
   14e28:	defffd04 	addi	sp,sp,-12
   14e2c:	dc000015 	stw	r16,0(sp)
   14e30:	04000074 	movhi	r16,1
   14e34:	dc400115 	stw	r17,4(sp)
   14e38:	841be504 	addi	r16,r16,28564
   14e3c:	2023883a 	mov	r17,r4
   14e40:	2809883a 	mov	r4,r5
   14e44:	300b883a 	mov	r5,r6
   14e48:	380d883a 	mov	r6,r7
   14e4c:	dfc00215 	stw	ra,8(sp)
   14e50:	80000015 	stw	zero,0(r16)
   14e54:	001588c0 	call	1588c <write>
   14e58:	00ffffc4 	movi	r3,-1
   14e5c:	10c00526 	beq	r2,r3,14e74 <_write_r+0x4c>
   14e60:	dfc00217 	ldw	ra,8(sp)
   14e64:	dc400117 	ldw	r17,4(sp)
   14e68:	dc000017 	ldw	r16,0(sp)
   14e6c:	dec00304 	addi	sp,sp,12
   14e70:	f800283a 	ret
   14e74:	80c00017 	ldw	r3,0(r16)
   14e78:	183ff926 	beq	r3,zero,14e60 <_gp+0xffff6954>
   14e7c:	88c00015 	stw	r3,0(r17)
   14e80:	003ff706 	br	14e60 <_gp+0xffff6954>

00014e84 <_close_r>:
   14e84:	defffd04 	addi	sp,sp,-12
   14e88:	dc000015 	stw	r16,0(sp)
   14e8c:	04000074 	movhi	r16,1
   14e90:	dc400115 	stw	r17,4(sp)
   14e94:	841be504 	addi	r16,r16,28564
   14e98:	2023883a 	mov	r17,r4
   14e9c:	2809883a 	mov	r4,r5
   14ea0:	dfc00215 	stw	ra,8(sp)
   14ea4:	80000015 	stw	zero,0(r16)
   14ea8:	0010f180 	call	10f18 <close>
   14eac:	00ffffc4 	movi	r3,-1
   14eb0:	10c00526 	beq	r2,r3,14ec8 <_close_r+0x44>
   14eb4:	dfc00217 	ldw	ra,8(sp)
   14eb8:	dc400117 	ldw	r17,4(sp)
   14ebc:	dc000017 	ldw	r16,0(sp)
   14ec0:	dec00304 	addi	sp,sp,12
   14ec4:	f800283a 	ret
   14ec8:	80c00017 	ldw	r3,0(r16)
   14ecc:	183ff926 	beq	r3,zero,14eb4 <_gp+0xffff69a8>
   14ed0:	88c00015 	stw	r3,0(r17)
   14ed4:	003ff706 	br	14eb4 <_gp+0xffff69a8>

00014ed8 <_fclose_r>:
   14ed8:	28003926 	beq	r5,zero,14fc0 <_fclose_r+0xe8>
   14edc:	defffc04 	addi	sp,sp,-16
   14ee0:	dc400115 	stw	r17,4(sp)
   14ee4:	dc000015 	stw	r16,0(sp)
   14ee8:	dfc00315 	stw	ra,12(sp)
   14eec:	dc800215 	stw	r18,8(sp)
   14ef0:	2023883a 	mov	r17,r4
   14ef4:	2821883a 	mov	r16,r5
   14ef8:	20000226 	beq	r4,zero,14f04 <_fclose_r+0x2c>
   14efc:	20800e17 	ldw	r2,56(r4)
   14f00:	10002726 	beq	r2,zero,14fa0 <_fclose_r+0xc8>
   14f04:	8080030f 	ldh	r2,12(r16)
   14f08:	1000071e 	bne	r2,zero,14f28 <_fclose_r+0x50>
   14f0c:	0005883a 	mov	r2,zero
   14f10:	dfc00317 	ldw	ra,12(sp)
   14f14:	dc800217 	ldw	r18,8(sp)
   14f18:	dc400117 	ldw	r17,4(sp)
   14f1c:	dc000017 	ldw	r16,0(sp)
   14f20:	dec00404 	addi	sp,sp,16
   14f24:	f800283a 	ret
   14f28:	8809883a 	mov	r4,r17
   14f2c:	800b883a 	mov	r5,r16
   14f30:	0013c400 	call	13c40 <__sflush_r>
   14f34:	1025883a 	mov	r18,r2
   14f38:	80800b17 	ldw	r2,44(r16)
   14f3c:	10000426 	beq	r2,zero,14f50 <_fclose_r+0x78>
   14f40:	81400717 	ldw	r5,28(r16)
   14f44:	8809883a 	mov	r4,r17
   14f48:	103ee83a 	callr	r2
   14f4c:	10001616 	blt	r2,zero,14fa8 <_fclose_r+0xd0>
   14f50:	8080030b 	ldhu	r2,12(r16)
   14f54:	1080200c 	andi	r2,r2,128
   14f58:	1000151e 	bne	r2,zero,14fb0 <_fclose_r+0xd8>
   14f5c:	81400c17 	ldw	r5,48(r16)
   14f60:	28000526 	beq	r5,zero,14f78 <_fclose_r+0xa0>
   14f64:	80801004 	addi	r2,r16,64
   14f68:	28800226 	beq	r5,r2,14f74 <_fclose_r+0x9c>
   14f6c:	8809883a 	mov	r4,r17
   14f70:	00143a80 	call	143a8 <_free_r>
   14f74:	80000c15 	stw	zero,48(r16)
   14f78:	81401117 	ldw	r5,68(r16)
   14f7c:	28000326 	beq	r5,zero,14f8c <_fclose_r+0xb4>
   14f80:	8809883a 	mov	r4,r17
   14f84:	00143a80 	call	143a8 <_free_r>
   14f88:	80001115 	stw	zero,68(r16)
   14f8c:	00142440 	call	14244 <__sfp_lock_acquire>
   14f90:	8000030d 	sth	zero,12(r16)
   14f94:	00142480 	call	14248 <__sfp_lock_release>
   14f98:	9005883a 	mov	r2,r18
   14f9c:	003fdc06 	br	14f10 <_gp+0xffff6a04>
   14fa0:	00142340 	call	14234 <__sinit>
   14fa4:	003fd706 	br	14f04 <_gp+0xffff69f8>
   14fa8:	04bfffc4 	movi	r18,-1
   14fac:	003fe806 	br	14f50 <_gp+0xffff6a44>
   14fb0:	81400417 	ldw	r5,16(r16)
   14fb4:	8809883a 	mov	r4,r17
   14fb8:	00143a80 	call	143a8 <_free_r>
   14fbc:	003fe706 	br	14f5c <_gp+0xffff6a50>
   14fc0:	0005883a 	mov	r2,zero
   14fc4:	f800283a 	ret

00014fc8 <fclose>:
   14fc8:	00800074 	movhi	r2,1
   14fcc:	10994d04 	addi	r2,r2,25908
   14fd0:	200b883a 	mov	r5,r4
   14fd4:	11000017 	ldw	r4,0(r2)
   14fd8:	0014ed81 	jmpi	14ed8 <_fclose_r>

00014fdc <_fstat_r>:
   14fdc:	defffd04 	addi	sp,sp,-12
   14fe0:	dc000015 	stw	r16,0(sp)
   14fe4:	04000074 	movhi	r16,1
   14fe8:	dc400115 	stw	r17,4(sp)
   14fec:	841be504 	addi	r16,r16,28564
   14ff0:	2023883a 	mov	r17,r4
   14ff4:	2809883a 	mov	r4,r5
   14ff8:	300b883a 	mov	r5,r6
   14ffc:	dfc00215 	stw	ra,8(sp)
   15000:	80000015 	stw	zero,0(r16)
   15004:	00153180 	call	15318 <fstat>
   15008:	00ffffc4 	movi	r3,-1
   1500c:	10c00526 	beq	r2,r3,15024 <_fstat_r+0x48>
   15010:	dfc00217 	ldw	ra,8(sp)
   15014:	dc400117 	ldw	r17,4(sp)
   15018:	dc000017 	ldw	r16,0(sp)
   1501c:	dec00304 	addi	sp,sp,12
   15020:	f800283a 	ret
   15024:	80c00017 	ldw	r3,0(r16)
   15028:	183ff926 	beq	r3,zero,15010 <_gp+0xffff6b04>
   1502c:	88c00015 	stw	r3,0(r17)
   15030:	003ff706 	br	15010 <_gp+0xffff6b04>

00015034 <_isatty_r>:
   15034:	defffd04 	addi	sp,sp,-12
   15038:	dc000015 	stw	r16,0(sp)
   1503c:	04000074 	movhi	r16,1
   15040:	dc400115 	stw	r17,4(sp)
   15044:	841be504 	addi	r16,r16,28564
   15048:	2023883a 	mov	r17,r4
   1504c:	2809883a 	mov	r4,r5
   15050:	dfc00215 	stw	ra,8(sp)
   15054:	80000015 	stw	zero,0(r16)
   15058:	00154200 	call	15420 <isatty>
   1505c:	00ffffc4 	movi	r3,-1
   15060:	10c00526 	beq	r2,r3,15078 <_isatty_r+0x44>
   15064:	dfc00217 	ldw	ra,8(sp)
   15068:	dc400117 	ldw	r17,4(sp)
   1506c:	dc000017 	ldw	r16,0(sp)
   15070:	dec00304 	addi	sp,sp,12
   15074:	f800283a 	ret
   15078:	80c00017 	ldw	r3,0(r16)
   1507c:	183ff926 	beq	r3,zero,15064 <_gp+0xffff6b58>
   15080:	88c00015 	stw	r3,0(r17)
   15084:	003ff706 	br	15064 <_gp+0xffff6b58>

00015088 <_lseek_r>:
   15088:	defffd04 	addi	sp,sp,-12
   1508c:	dc000015 	stw	r16,0(sp)
   15090:	04000074 	movhi	r16,1
   15094:	dc400115 	stw	r17,4(sp)
   15098:	841be504 	addi	r16,r16,28564
   1509c:	2023883a 	mov	r17,r4
   150a0:	2809883a 	mov	r4,r5
   150a4:	300b883a 	mov	r5,r6
   150a8:	380d883a 	mov	r6,r7
   150ac:	dfc00215 	stw	ra,8(sp)
   150b0:	80000015 	stw	zero,0(r16)
   150b4:	001551c0 	call	1551c <lseek>
   150b8:	00ffffc4 	movi	r3,-1
   150bc:	10c00526 	beq	r2,r3,150d4 <_lseek_r+0x4c>
   150c0:	dfc00217 	ldw	ra,8(sp)
   150c4:	dc400117 	ldw	r17,4(sp)
   150c8:	dc000017 	ldw	r16,0(sp)
   150cc:	dec00304 	addi	sp,sp,12
   150d0:	f800283a 	ret
   150d4:	80c00017 	ldw	r3,0(r16)
   150d8:	183ff926 	beq	r3,zero,150c0 <_gp+0xffff6bb4>
   150dc:	88c00015 	stw	r3,0(r17)
   150e0:	003ff706 	br	150c0 <_gp+0xffff6bb4>

000150e4 <_read_r>:
   150e4:	defffd04 	addi	sp,sp,-12
   150e8:	dc000015 	stw	r16,0(sp)
   150ec:	04000074 	movhi	r16,1
   150f0:	dc400115 	stw	r17,4(sp)
   150f4:	841be504 	addi	r16,r16,28564
   150f8:	2023883a 	mov	r17,r4
   150fc:	2809883a 	mov	r4,r5
   15100:	300b883a 	mov	r5,r6
   15104:	380d883a 	mov	r6,r7
   15108:	dfc00215 	stw	ra,8(sp)
   1510c:	80000015 	stw	zero,0(r16)
   15110:	00156880 	call	15688 <read>
   15114:	00ffffc4 	movi	r3,-1
   15118:	10c00526 	beq	r2,r3,15130 <_read_r+0x4c>
   1511c:	dfc00217 	ldw	ra,8(sp)
   15120:	dc400117 	ldw	r17,4(sp)
   15124:	dc000017 	ldw	r16,0(sp)
   15128:	dec00304 	addi	sp,sp,12
   1512c:	f800283a 	ret
   15130:	80c00017 	ldw	r3,0(r16)
   15134:	183ff926 	beq	r3,zero,1511c <_gp+0xffff6c10>
   15138:	88c00015 	stw	r3,0(r17)
   1513c:	003ff706 	br	1511c <_gp+0xffff6c10>

00015140 <udivmodsi4>:
   15140:	2900182e 	bgeu	r5,r4,151a4 <udivmodsi4+0x64>
   15144:	28001716 	blt	r5,zero,151a4 <udivmodsi4+0x64>
   15148:	00800804 	movi	r2,32
   1514c:	00c00044 	movi	r3,1
   15150:	00000206 	br	1515c <udivmodsi4+0x1c>
   15154:	10001126 	beq	r2,zero,1519c <udivmodsi4+0x5c>
   15158:	28000516 	blt	r5,zero,15170 <udivmodsi4+0x30>
   1515c:	294b883a 	add	r5,r5,r5
   15160:	10bfffc4 	addi	r2,r2,-1
   15164:	18c7883a 	add	r3,r3,r3
   15168:	293ffa36 	bltu	r5,r4,15154 <_gp+0xffff6c48>
   1516c:	18000b26 	beq	r3,zero,1519c <udivmodsi4+0x5c>
   15170:	0005883a 	mov	r2,zero
   15174:	21400236 	bltu	r4,r5,15180 <udivmodsi4+0x40>
   15178:	2149c83a 	sub	r4,r4,r5
   1517c:	10c4b03a 	or	r2,r2,r3
   15180:	1806d07a 	srli	r3,r3,1
   15184:	280ad07a 	srli	r5,r5,1
   15188:	183ffa1e 	bne	r3,zero,15174 <_gp+0xffff6c68>
   1518c:	3000011e 	bne	r6,zero,15194 <udivmodsi4+0x54>
   15190:	f800283a 	ret
   15194:	2005883a 	mov	r2,r4
   15198:	f800283a 	ret
   1519c:	0005883a 	mov	r2,zero
   151a0:	003ffa06 	br	1518c <_gp+0xffff6c80>
   151a4:	00c00044 	movi	r3,1
   151a8:	003ff106 	br	15170 <_gp+0xffff6c64>

000151ac <__divsi3>:
   151ac:	defffe04 	addi	sp,sp,-8
   151b0:	dfc00115 	stw	ra,4(sp)
   151b4:	dc000015 	stw	r16,0(sp)
   151b8:	20000b16 	blt	r4,zero,151e8 <__divsi3+0x3c>
   151bc:	0021883a 	mov	r16,zero
   151c0:	28000c16 	blt	r5,zero,151f4 <__divsi3+0x48>
   151c4:	000d883a 	mov	r6,zero
   151c8:	00151400 	call	15140 <udivmodsi4>
   151cc:	0407c83a 	sub	r3,zero,r16
   151d0:	1884f03a 	xor	r2,r3,r2
   151d4:	1405883a 	add	r2,r2,r16
   151d8:	dfc00117 	ldw	ra,4(sp)
   151dc:	dc000017 	ldw	r16,0(sp)
   151e0:	dec00204 	addi	sp,sp,8
   151e4:	f800283a 	ret
   151e8:	0109c83a 	sub	r4,zero,r4
   151ec:	04000044 	movi	r16,1
   151f0:	283ff40e 	bge	r5,zero,151c4 <_gp+0xffff6cb8>
   151f4:	014bc83a 	sub	r5,zero,r5
   151f8:	8400005c 	xori	r16,r16,1
   151fc:	003ff106 	br	151c4 <_gp+0xffff6cb8>

00015200 <__modsi3>:
   15200:	defffd04 	addi	sp,sp,-12
   15204:	dfc00215 	stw	ra,8(sp)
   15208:	dc400115 	stw	r17,4(sp)
   1520c:	dc000015 	stw	r16,0(sp)
   15210:	20000c16 	blt	r4,zero,15244 <__modsi3+0x44>
   15214:	0023883a 	mov	r17,zero
   15218:	0021883a 	mov	r16,zero
   1521c:	28000d16 	blt	r5,zero,15254 <__modsi3+0x54>
   15220:	01800044 	movi	r6,1
   15224:	00151400 	call	15140 <udivmodsi4>
   15228:	1404f03a 	xor	r2,r2,r16
   1522c:	8885883a 	add	r2,r17,r2
   15230:	dfc00217 	ldw	ra,8(sp)
   15234:	dc400117 	ldw	r17,4(sp)
   15238:	dc000017 	ldw	r16,0(sp)
   1523c:	dec00304 	addi	sp,sp,12
   15240:	f800283a 	ret
   15244:	0109c83a 	sub	r4,zero,r4
   15248:	04400044 	movi	r17,1
   1524c:	043fffc4 	movi	r16,-1
   15250:	283ff30e 	bge	r5,zero,15220 <_gp+0xffff6d14>
   15254:	014bc83a 	sub	r5,zero,r5
   15258:	003ff106 	br	15220 <_gp+0xffff6d14>

0001525c <__udivsi3>:
   1525c:	000d883a 	mov	r6,zero
   15260:	00151401 	jmpi	15140 <udivmodsi4>

00015264 <__umodsi3>:
   15264:	01800044 	movi	r6,1
   15268:	00151401 	jmpi	15140 <udivmodsi4>

0001526c <__mulsi3>:
   1526c:	0005883a 	mov	r2,zero
   15270:	20000726 	beq	r4,zero,15290 <__mulsi3+0x24>
   15274:	20c0004c 	andi	r3,r4,1
   15278:	2008d07a 	srli	r4,r4,1
   1527c:	18000126 	beq	r3,zero,15284 <__mulsi3+0x18>
   15280:	1145883a 	add	r2,r2,r5
   15284:	294b883a 	add	r5,r5,r5
   15288:	203ffa1e 	bne	r4,zero,15274 <_gp+0xffff6d68>
   1528c:	f800283a 	ret
   15290:	f800283a 	ret

00015294 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15294:	defffd04 	addi	sp,sp,-12
   15298:	df000215 	stw	fp,8(sp)
   1529c:	df000204 	addi	fp,sp,8
   152a0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   152a4:	0001883a 	nop
   152a8:	e0bfff17 	ldw	r2,-4(fp)
   152ac:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   152b0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   152b4:	10000226 	beq	r2,zero,152c0 <_exit+0x2c>
    ALT_SIM_FAIL();
   152b8:	002af070 	cmpltui	zero,zero,43969
   152bc:	00000106 	br	152c4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   152c0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   152c4:	003fff06 	br	152c4 <_gp+0xffff6db8>

000152c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   152c8:	defffe04 	addi	sp,sp,-8
   152cc:	dfc00115 	stw	ra,4(sp)
   152d0:	df000015 	stw	fp,0(sp)
   152d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   152d8:	00800074 	movhi	r2,1
   152dc:	10994804 	addi	r2,r2,25888
   152e0:	10800017 	ldw	r2,0(r2)
   152e4:	10000526 	beq	r2,zero,152fc <alt_get_errno+0x34>
   152e8:	00800074 	movhi	r2,1
   152ec:	10994804 	addi	r2,r2,25888
   152f0:	10800017 	ldw	r2,0(r2)
   152f4:	103ee83a 	callr	r2
   152f8:	00000206 	br	15304 <alt_get_errno+0x3c>
   152fc:	00800074 	movhi	r2,1
   15300:	109be504 	addi	r2,r2,28564
}
   15304:	e037883a 	mov	sp,fp
   15308:	dfc00117 	ldw	ra,4(sp)
   1530c:	df000017 	ldw	fp,0(sp)
   15310:	dec00204 	addi	sp,sp,8
   15314:	f800283a 	ret

00015318 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   15318:	defffb04 	addi	sp,sp,-20
   1531c:	dfc00415 	stw	ra,16(sp)
   15320:	df000315 	stw	fp,12(sp)
   15324:	df000304 	addi	fp,sp,12
   15328:	e13ffe15 	stw	r4,-8(fp)
   1532c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15330:	e0bffe17 	ldw	r2,-8(fp)
   15334:	10000816 	blt	r2,zero,15358 <fstat+0x40>
   15338:	e13ffe17 	ldw	r4,-8(fp)
   1533c:	01400304 	movi	r5,12
   15340:	001526c0 	call	1526c <__mulsi3>
   15344:	1007883a 	mov	r3,r2
   15348:	00800074 	movhi	r2,1
   1534c:	1096d804 	addi	r2,r2,23392
   15350:	1885883a 	add	r2,r3,r2
   15354:	00000106 	br	1535c <fstat+0x44>
   15358:	0005883a 	mov	r2,zero
   1535c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   15360:	e0bffd17 	ldw	r2,-12(fp)
   15364:	10001026 	beq	r2,zero,153a8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   15368:	e0bffd17 	ldw	r2,-12(fp)
   1536c:	10800017 	ldw	r2,0(r2)
   15370:	10800817 	ldw	r2,32(r2)
   15374:	10000726 	beq	r2,zero,15394 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   15378:	e0bffd17 	ldw	r2,-12(fp)
   1537c:	10800017 	ldw	r2,0(r2)
   15380:	10800817 	ldw	r2,32(r2)
   15384:	e13ffd17 	ldw	r4,-12(fp)
   15388:	e17fff17 	ldw	r5,-4(fp)
   1538c:	103ee83a 	callr	r2
   15390:	00000a06 	br	153bc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   15394:	e0bfff17 	ldw	r2,-4(fp)
   15398:	00c80004 	movi	r3,8192
   1539c:	10c00115 	stw	r3,4(r2)
      return 0;
   153a0:	0005883a 	mov	r2,zero
   153a4:	00000506 	br	153bc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   153a8:	00152c80 	call	152c8 <alt_get_errno>
   153ac:	1007883a 	mov	r3,r2
   153b0:	00801444 	movi	r2,81
   153b4:	18800015 	stw	r2,0(r3)
    return -1;
   153b8:	00bfffc4 	movi	r2,-1
  }
}
   153bc:	e037883a 	mov	sp,fp
   153c0:	dfc00117 	ldw	ra,4(sp)
   153c4:	df000017 	ldw	fp,0(sp)
   153c8:	dec00204 	addi	sp,sp,8
   153cc:	f800283a 	ret

000153d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   153d0:	defffe04 	addi	sp,sp,-8
   153d4:	dfc00115 	stw	ra,4(sp)
   153d8:	df000015 	stw	fp,0(sp)
   153dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   153e0:	00800074 	movhi	r2,1
   153e4:	10994804 	addi	r2,r2,25888
   153e8:	10800017 	ldw	r2,0(r2)
   153ec:	10000526 	beq	r2,zero,15404 <alt_get_errno+0x34>
   153f0:	00800074 	movhi	r2,1
   153f4:	10994804 	addi	r2,r2,25888
   153f8:	10800017 	ldw	r2,0(r2)
   153fc:	103ee83a 	callr	r2
   15400:	00000206 	br	1540c <alt_get_errno+0x3c>
   15404:	00800074 	movhi	r2,1
   15408:	109be504 	addi	r2,r2,28564
}
   1540c:	e037883a 	mov	sp,fp
   15410:	dfc00117 	ldw	ra,4(sp)
   15414:	df000017 	ldw	fp,0(sp)
   15418:	dec00204 	addi	sp,sp,8
   1541c:	f800283a 	ret

00015420 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   15420:	deffed04 	addi	sp,sp,-76
   15424:	dfc01215 	stw	ra,72(sp)
   15428:	df001115 	stw	fp,68(sp)
   1542c:	df001104 	addi	fp,sp,68
   15430:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15434:	e0bfff17 	ldw	r2,-4(fp)
   15438:	10000816 	blt	r2,zero,1545c <isatty+0x3c>
   1543c:	e13fff17 	ldw	r4,-4(fp)
   15440:	01400304 	movi	r5,12
   15444:	001526c0 	call	1526c <__mulsi3>
   15448:	1007883a 	mov	r3,r2
   1544c:	00800074 	movhi	r2,1
   15450:	1096d804 	addi	r2,r2,23392
   15454:	1885883a 	add	r2,r3,r2
   15458:	00000106 	br	15460 <isatty+0x40>
   1545c:	0005883a 	mov	r2,zero
   15460:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   15464:	e0bfef17 	ldw	r2,-68(fp)
   15468:	10000e26 	beq	r2,zero,154a4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1546c:	e0bfef17 	ldw	r2,-68(fp)
   15470:	10800017 	ldw	r2,0(r2)
   15474:	10800817 	ldw	r2,32(r2)
   15478:	1000021e 	bne	r2,zero,15484 <isatty+0x64>
    {
      return 1;
   1547c:	00800044 	movi	r2,1
   15480:	00000d06 	br	154b8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   15484:	e0bff004 	addi	r2,fp,-64
   15488:	e13fff17 	ldw	r4,-4(fp)
   1548c:	100b883a 	mov	r5,r2
   15490:	00153180 	call	15318 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   15494:	e0bff117 	ldw	r2,-60(fp)
   15498:	10880020 	cmpeqi	r2,r2,8192
   1549c:	10803fcc 	andi	r2,r2,255
   154a0:	00000506 	br	154b8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   154a4:	00153d00 	call	153d0 <alt_get_errno>
   154a8:	1007883a 	mov	r3,r2
   154ac:	00801444 	movi	r2,81
   154b0:	18800015 	stw	r2,0(r3)
    return 0;
   154b4:	0005883a 	mov	r2,zero
  }
}
   154b8:	e037883a 	mov	sp,fp
   154bc:	dfc00117 	ldw	ra,4(sp)
   154c0:	df000017 	ldw	fp,0(sp)
   154c4:	dec00204 	addi	sp,sp,8
   154c8:	f800283a 	ret

000154cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   154cc:	defffe04 	addi	sp,sp,-8
   154d0:	dfc00115 	stw	ra,4(sp)
   154d4:	df000015 	stw	fp,0(sp)
   154d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   154dc:	00800074 	movhi	r2,1
   154e0:	10994804 	addi	r2,r2,25888
   154e4:	10800017 	ldw	r2,0(r2)
   154e8:	10000526 	beq	r2,zero,15500 <alt_get_errno+0x34>
   154ec:	00800074 	movhi	r2,1
   154f0:	10994804 	addi	r2,r2,25888
   154f4:	10800017 	ldw	r2,0(r2)
   154f8:	103ee83a 	callr	r2
   154fc:	00000206 	br	15508 <alt_get_errno+0x3c>
   15500:	00800074 	movhi	r2,1
   15504:	109be504 	addi	r2,r2,28564
}
   15508:	e037883a 	mov	sp,fp
   1550c:	dfc00117 	ldw	ra,4(sp)
   15510:	df000017 	ldw	fp,0(sp)
   15514:	dec00204 	addi	sp,sp,8
   15518:	f800283a 	ret

0001551c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1551c:	defff904 	addi	sp,sp,-28
   15520:	dfc00615 	stw	ra,24(sp)
   15524:	df000515 	stw	fp,20(sp)
   15528:	df000504 	addi	fp,sp,20
   1552c:	e13ffd15 	stw	r4,-12(fp)
   15530:	e17ffe15 	stw	r5,-8(fp)
   15534:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   15538:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1553c:	e0bffd17 	ldw	r2,-12(fp)
   15540:	10000816 	blt	r2,zero,15564 <lseek+0x48>
   15544:	e13ffd17 	ldw	r4,-12(fp)
   15548:	01400304 	movi	r5,12
   1554c:	001526c0 	call	1526c <__mulsi3>
   15550:	1007883a 	mov	r3,r2
   15554:	00800074 	movhi	r2,1
   15558:	1096d804 	addi	r2,r2,23392
   1555c:	1885883a 	add	r2,r3,r2
   15560:	00000106 	br	15568 <lseek+0x4c>
   15564:	0005883a 	mov	r2,zero
   15568:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1556c:	e0bffc17 	ldw	r2,-16(fp)
   15570:	10001026 	beq	r2,zero,155b4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   15574:	e0bffc17 	ldw	r2,-16(fp)
   15578:	10800017 	ldw	r2,0(r2)
   1557c:	10800717 	ldw	r2,28(r2)
   15580:	10000926 	beq	r2,zero,155a8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   15584:	e0bffc17 	ldw	r2,-16(fp)
   15588:	10800017 	ldw	r2,0(r2)
   1558c:	10800717 	ldw	r2,28(r2)
   15590:	e13ffc17 	ldw	r4,-16(fp)
   15594:	e17ffe17 	ldw	r5,-8(fp)
   15598:	e1bfff17 	ldw	r6,-4(fp)
   1559c:	103ee83a 	callr	r2
   155a0:	e0bffb15 	stw	r2,-20(fp)
   155a4:	00000506 	br	155bc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   155a8:	00bfde84 	movi	r2,-134
   155ac:	e0bffb15 	stw	r2,-20(fp)
   155b0:	00000206 	br	155bc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   155b4:	00bfebc4 	movi	r2,-81
   155b8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   155bc:	e0bffb17 	ldw	r2,-20(fp)
   155c0:	1000070e 	bge	r2,zero,155e0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   155c4:	00154cc0 	call	154cc <alt_get_errno>
   155c8:	1007883a 	mov	r3,r2
   155cc:	e0bffb17 	ldw	r2,-20(fp)
   155d0:	0085c83a 	sub	r2,zero,r2
   155d4:	18800015 	stw	r2,0(r3)
    rc = -1;
   155d8:	00bfffc4 	movi	r2,-1
   155dc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   155e0:	e0bffb17 	ldw	r2,-20(fp)
}
   155e4:	e037883a 	mov	sp,fp
   155e8:	dfc00117 	ldw	ra,4(sp)
   155ec:	df000017 	ldw	fp,0(sp)
   155f0:	dec00204 	addi	sp,sp,8
   155f4:	f800283a 	ret

000155f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   155f8:	defffe04 	addi	sp,sp,-8
   155fc:	df000115 	stw	fp,4(sp)
   15600:	df000104 	addi	fp,sp,4
   15604:	e13fff15 	stw	r4,-4(fp)
}
   15608:	e037883a 	mov	sp,fp
   1560c:	df000017 	ldw	fp,0(sp)
   15610:	dec00104 	addi	sp,sp,4
   15614:	f800283a 	ret

00015618 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   15618:	defffe04 	addi	sp,sp,-8
   1561c:	df000115 	stw	fp,4(sp)
   15620:	df000104 	addi	fp,sp,4
   15624:	e13fff15 	stw	r4,-4(fp)
}
   15628:	e037883a 	mov	sp,fp
   1562c:	df000017 	ldw	fp,0(sp)
   15630:	dec00104 	addi	sp,sp,4
   15634:	f800283a 	ret

00015638 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15638:	defffe04 	addi	sp,sp,-8
   1563c:	dfc00115 	stw	ra,4(sp)
   15640:	df000015 	stw	fp,0(sp)
   15644:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15648:	00800074 	movhi	r2,1
   1564c:	10994804 	addi	r2,r2,25888
   15650:	10800017 	ldw	r2,0(r2)
   15654:	10000526 	beq	r2,zero,1566c <alt_get_errno+0x34>
   15658:	00800074 	movhi	r2,1
   1565c:	10994804 	addi	r2,r2,25888
   15660:	10800017 	ldw	r2,0(r2)
   15664:	103ee83a 	callr	r2
   15668:	00000206 	br	15674 <alt_get_errno+0x3c>
   1566c:	00800074 	movhi	r2,1
   15670:	109be504 	addi	r2,r2,28564
}
   15674:	e037883a 	mov	sp,fp
   15678:	dfc00117 	ldw	ra,4(sp)
   1567c:	df000017 	ldw	fp,0(sp)
   15680:	dec00204 	addi	sp,sp,8
   15684:	f800283a 	ret

00015688 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   15688:	defff904 	addi	sp,sp,-28
   1568c:	dfc00615 	stw	ra,24(sp)
   15690:	df000515 	stw	fp,20(sp)
   15694:	df000504 	addi	fp,sp,20
   15698:	e13ffd15 	stw	r4,-12(fp)
   1569c:	e17ffe15 	stw	r5,-8(fp)
   156a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   156a4:	e0bffd17 	ldw	r2,-12(fp)
   156a8:	10000816 	blt	r2,zero,156cc <read+0x44>
   156ac:	e13ffd17 	ldw	r4,-12(fp)
   156b0:	01400304 	movi	r5,12
   156b4:	001526c0 	call	1526c <__mulsi3>
   156b8:	1007883a 	mov	r3,r2
   156bc:	00800074 	movhi	r2,1
   156c0:	1096d804 	addi	r2,r2,23392
   156c4:	1885883a 	add	r2,r3,r2
   156c8:	00000106 	br	156d0 <read+0x48>
   156cc:	0005883a 	mov	r2,zero
   156d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   156d4:	e0bffb17 	ldw	r2,-20(fp)
   156d8:	10002226 	beq	r2,zero,15764 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   156dc:	e0bffb17 	ldw	r2,-20(fp)
   156e0:	10800217 	ldw	r2,8(r2)
   156e4:	108000cc 	andi	r2,r2,3
   156e8:	10800060 	cmpeqi	r2,r2,1
   156ec:	1000181e 	bne	r2,zero,15750 <read+0xc8>
        (fd->dev->read))
   156f0:	e0bffb17 	ldw	r2,-20(fp)
   156f4:	10800017 	ldw	r2,0(r2)
   156f8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   156fc:	10001426 	beq	r2,zero,15750 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   15700:	e0bffb17 	ldw	r2,-20(fp)
   15704:	10800017 	ldw	r2,0(r2)
   15708:	10800517 	ldw	r2,20(r2)
   1570c:	e0ffff17 	ldw	r3,-4(fp)
   15710:	e13ffb17 	ldw	r4,-20(fp)
   15714:	e17ffe17 	ldw	r5,-8(fp)
   15718:	180d883a 	mov	r6,r3
   1571c:	103ee83a 	callr	r2
   15720:	e0bffc15 	stw	r2,-16(fp)
   15724:	e0bffc17 	ldw	r2,-16(fp)
   15728:	1000070e 	bge	r2,zero,15748 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1572c:	00156380 	call	15638 <alt_get_errno>
   15730:	1007883a 	mov	r3,r2
   15734:	e0bffc17 	ldw	r2,-16(fp)
   15738:	0085c83a 	sub	r2,zero,r2
   1573c:	18800015 	stw	r2,0(r3)
          return -1;
   15740:	00bfffc4 	movi	r2,-1
   15744:	00000c06 	br	15778 <read+0xf0>
        }
        return rval;
   15748:	e0bffc17 	ldw	r2,-16(fp)
   1574c:	00000a06 	br	15778 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   15750:	00156380 	call	15638 <alt_get_errno>
   15754:	1007883a 	mov	r3,r2
   15758:	00800344 	movi	r2,13
   1575c:	18800015 	stw	r2,0(r3)
   15760:	00000406 	br	15774 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   15764:	00156380 	call	15638 <alt_get_errno>
   15768:	1007883a 	mov	r3,r2
   1576c:	00801444 	movi	r2,81
   15770:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15774:	00bfffc4 	movi	r2,-1
}
   15778:	e037883a 	mov	sp,fp
   1577c:	dfc00117 	ldw	ra,4(sp)
   15780:	df000017 	ldw	fp,0(sp)
   15784:	dec00204 	addi	sp,sp,8
   15788:	f800283a 	ret

0001578c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1578c:	defff904 	addi	sp,sp,-28
   15790:	df000615 	stw	fp,24(sp)
   15794:	df000604 	addi	fp,sp,24
   15798:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1579c:	0005303a 	rdctl	r2,status
   157a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157a4:	e0fffc17 	ldw	r3,-16(fp)
   157a8:	00bfff84 	movi	r2,-2
   157ac:	1884703a 	and	r2,r3,r2
   157b0:	1001703a 	wrctl	status,r2
  
  return context;
   157b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   157b8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   157bc:	d0a00d17 	ldw	r2,-32716(gp)
   157c0:	10c000c4 	addi	r3,r2,3
   157c4:	00bfff04 	movi	r2,-4
   157c8:	1884703a 	and	r2,r3,r2
   157cc:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   157d0:	d0e00d17 	ldw	r3,-32716(gp)
   157d4:	e0bfff17 	ldw	r2,-4(fp)
   157d8:	1887883a 	add	r3,r3,r2
   157dc:	008000b4 	movhi	r2,2
   157e0:	10a80004 	addi	r2,r2,-24576
   157e4:	10c0062e 	bgeu	r2,r3,15800 <sbrk+0x74>
   157e8:	e0bffa17 	ldw	r2,-24(fp)
   157ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157f0:	e0bffd17 	ldw	r2,-12(fp)
   157f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   157f8:	00bfffc4 	movi	r2,-1
   157fc:	00000b06 	br	1582c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   15800:	d0a00d17 	ldw	r2,-32716(gp)
   15804:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   15808:	d0e00d17 	ldw	r3,-32716(gp)
   1580c:	e0bfff17 	ldw	r2,-4(fp)
   15810:	1885883a 	add	r2,r3,r2
   15814:	d0a00d15 	stw	r2,-32716(gp)
   15818:	e0bffa17 	ldw	r2,-24(fp)
   1581c:	e0bffe15 	stw	r2,-8(fp)
   15820:	e0bffe17 	ldw	r2,-8(fp)
   15824:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   15828:	e0bffb17 	ldw	r2,-20(fp)
} 
   1582c:	e037883a 	mov	sp,fp
   15830:	df000017 	ldw	fp,0(sp)
   15834:	dec00104 	addi	sp,sp,4
   15838:	f800283a 	ret

0001583c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1583c:	defffe04 	addi	sp,sp,-8
   15840:	dfc00115 	stw	ra,4(sp)
   15844:	df000015 	stw	fp,0(sp)
   15848:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1584c:	00800074 	movhi	r2,1
   15850:	10994804 	addi	r2,r2,25888
   15854:	10800017 	ldw	r2,0(r2)
   15858:	10000526 	beq	r2,zero,15870 <alt_get_errno+0x34>
   1585c:	00800074 	movhi	r2,1
   15860:	10994804 	addi	r2,r2,25888
   15864:	10800017 	ldw	r2,0(r2)
   15868:	103ee83a 	callr	r2
   1586c:	00000206 	br	15878 <alt_get_errno+0x3c>
   15870:	00800074 	movhi	r2,1
   15874:	109be504 	addi	r2,r2,28564
}
   15878:	e037883a 	mov	sp,fp
   1587c:	dfc00117 	ldw	ra,4(sp)
   15880:	df000017 	ldw	fp,0(sp)
   15884:	dec00204 	addi	sp,sp,8
   15888:	f800283a 	ret

0001588c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1588c:	defff904 	addi	sp,sp,-28
   15890:	dfc00615 	stw	ra,24(sp)
   15894:	df000515 	stw	fp,20(sp)
   15898:	df000504 	addi	fp,sp,20
   1589c:	e13ffd15 	stw	r4,-12(fp)
   158a0:	e17ffe15 	stw	r5,-8(fp)
   158a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   158a8:	e0bffd17 	ldw	r2,-12(fp)
   158ac:	10000816 	blt	r2,zero,158d0 <write+0x44>
   158b0:	e13ffd17 	ldw	r4,-12(fp)
   158b4:	01400304 	movi	r5,12
   158b8:	001526c0 	call	1526c <__mulsi3>
   158bc:	1007883a 	mov	r3,r2
   158c0:	00800074 	movhi	r2,1
   158c4:	1096d804 	addi	r2,r2,23392
   158c8:	1885883a 	add	r2,r3,r2
   158cc:	00000106 	br	158d4 <write+0x48>
   158d0:	0005883a 	mov	r2,zero
   158d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   158d8:	e0bffb17 	ldw	r2,-20(fp)
   158dc:	10002126 	beq	r2,zero,15964 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   158e0:	e0bffb17 	ldw	r2,-20(fp)
   158e4:	10800217 	ldw	r2,8(r2)
   158e8:	108000cc 	andi	r2,r2,3
   158ec:	10001826 	beq	r2,zero,15950 <write+0xc4>
   158f0:	e0bffb17 	ldw	r2,-20(fp)
   158f4:	10800017 	ldw	r2,0(r2)
   158f8:	10800617 	ldw	r2,24(r2)
   158fc:	10001426 	beq	r2,zero,15950 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   15900:	e0bffb17 	ldw	r2,-20(fp)
   15904:	10800017 	ldw	r2,0(r2)
   15908:	10800617 	ldw	r2,24(r2)
   1590c:	e0ffff17 	ldw	r3,-4(fp)
   15910:	e13ffb17 	ldw	r4,-20(fp)
   15914:	e17ffe17 	ldw	r5,-8(fp)
   15918:	180d883a 	mov	r6,r3
   1591c:	103ee83a 	callr	r2
   15920:	e0bffc15 	stw	r2,-16(fp)
   15924:	e0bffc17 	ldw	r2,-16(fp)
   15928:	1000070e 	bge	r2,zero,15948 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1592c:	001583c0 	call	1583c <alt_get_errno>
   15930:	1007883a 	mov	r3,r2
   15934:	e0bffc17 	ldw	r2,-16(fp)
   15938:	0085c83a 	sub	r2,zero,r2
   1593c:	18800015 	stw	r2,0(r3)
        return -1;
   15940:	00bfffc4 	movi	r2,-1
   15944:	00000c06 	br	15978 <write+0xec>
      }
      return rval;
   15948:	e0bffc17 	ldw	r2,-16(fp)
   1594c:	00000a06 	br	15978 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   15950:	001583c0 	call	1583c <alt_get_errno>
   15954:	1007883a 	mov	r3,r2
   15958:	00800344 	movi	r2,13
   1595c:	18800015 	stw	r2,0(r3)
   15960:	00000406 	br	15974 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   15964:	001583c0 	call	1583c <alt_get_errno>
   15968:	1007883a 	mov	r3,r2
   1596c:	00801444 	movi	r2,81
   15970:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15974:	00bfffc4 	movi	r2,-1
}
   15978:	e037883a 	mov	sp,fp
   1597c:	dfc00117 	ldw	ra,4(sp)
   15980:	df000017 	ldw	fp,0(sp)
   15984:	dec00204 	addi	sp,sp,8
   15988:	f800283a 	ret
